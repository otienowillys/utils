/* Step 1: Import the Excel Data */
proc import datafile="path/to/data.xlsx"
    out=mydata
    dbms=xlsx
    replace;
    sheet="Sheet1";
    getnames=yes;
run;

/* Step 2: Concatenate Rows Based on { and } */
data combined_data;
    set mydata;
    length full_text $5000; /* Declare full_text as a character variable */
    retain full_text; /* Retain the full_text variable */
    
    /* Initialize in_braces as a numeric variable */
    retain in_braces 0; /* Track whether we're inside braces */

    /* Check if the row starts with '{' */
    if index(your_column_name, '{') then do;
        in_braces + 1; /* Increment if we find an opening brace */
    end;

    /* Concatenate the current row */
    full_text = catx(' ', full_text, your_column_name);

    /* Check if the row ends with '}' */
    if index(your_column_name, '}') then do;
        in_braces - 1; /* Decrement if we find a closing brace */
    end;

    /* Output the accumulated text if we're back to zero braces */
    if in_braces = 0 and full_text ne '' then do;
        output; /* Output the concatenated result */
        full_text = ''; /* Reset for the next section */
    end;

    /* If this is the last row, check if there's any remaining text */
    if eof and full_text ne '' then do;
        output;
    end;
run;

/* Step 3: Extract Text Between Curly Braces and Check for Specific Pattern */
data extracted_data;
    set combined_data;

    /* Regular expression to find text between curly braces */
    retain regex;
    if _N_ = 1 then do;
        regex = prxparse('/\{(.*?)\}/');
    end;

    /* Extract the text */
    if prxmatch(regex, full_text) then do;
        extracted_text = prxposn(regex, 1, full_text);
    end;
    else do;
        extracted_text = ''; /* If no match found */
    end;

    /* Initialize a flag variable */
    length pattern_found 8; /* Declare pattern_found as a numeric variable */
    pattern_found = 0; /* Default value is 0 */

    /* Check for the specific pattern _toc_ followed by 6 digits */
    if prxmatch('/_toc_\d{6}/', full_text) then do;
        /* If a match is found, remove it and set the flag to 1 */
        full_text = prxchange('s/_toc_\d{6}//o', -1, full_text);
        pattern_found = 1; /* Set flag to 1 if pattern was found */
    end;

    /* Keep only the necessary columns */
    keep extracted_text full_text pattern_found;
run;

/* Step 4: Move extracted_text to Previous Row if Not Missing */
data final_data;
    set extracted_data;
    retain prev_full_text ''; /* To store previous row's full_text */

    /* If extracted_text is not missing, concatenate it with the previous full_text */
    if extracted_text ne '' then do;
        full_text = catx(' ', prev_full_text, extracted_text);
        extracted_text = ''; /* Clear extracted_text as it's now moved */
    end;

    /* Output the current full_text and store it as prev_full_text for the next iteration */
    prev_full_text = full_text; /* Store current full_text for the next row */
    output; /* Output the current row */
run;

proc print data=extracted_data;
run;
  /* Initialize variables */
    length extracted_value $50 text_after_extracted $200;
    extracted_value = '';
    text_after_extracted = '';

    /* Regular expression to check if left_part starts with a digit */
    if prxmatch('/^\d+(\.\d+)*[ ]?/', left_part) then do;
        /* Extract all numbers and "." */
        /* This regex captures the initial numeric pattern */
        extracted_value = prxchange('s/^(\d+(\.\d+)*).*/\1/', 1, left_part);
        
        /* Extract the text after the extracted value */
        text_after_extracted = prxchange('s/^\d+(\.\d+)*[ ]?(.*)/\2/', 1, left_part);
    end;
    else do;
        /* If it doesn't start with a digit, keep left_part in text_after_extracted */
        text_after_extracted = left_part;
    end;

/* Merge using PROC SQL */
proc sql;
    create table merged_data as
    select a.*, b.*
    from dataset1 as a
    left join dataset2 as b
    on a.text_after_extracted = b.text_after_extracted;
quit;

/* Print the merged data */
proc print data=merged_data;
run;
