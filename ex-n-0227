Option Explicit

' Main function to handle form submission
Public Sub SubmitIntake()
    On Error GoTo ErrorHandler
    
    Dim wsInput As Worksheet
    Dim wsData As Worksheet
    Dim entryId As Long
    Dim emailSent As Boolean
    
    Set wsInput = ThisWorkbook.Worksheets("IntakeForm")
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    
    ' Validate form
    If Not ValidateForm(wsInput) Then
        MsgBox "Please fill in all required fields.", vbExclamation
        Exit Sub
    End If
    
    ' Get next entry ID
    entryId = GetNextEntryId(wsData)
    
    ' Try to send email
    emailSent = SendEmail(wsInput, entryId)
    
    ' Save form data regardless of email status
    SaveFormData wsInput, wsData, entryId
    
    ' Clear form
    ClearForm wsInput
    
    ' Format data sheet
    FormatDataSheet wsData
    
    If emailSent Then
        MsgBox "Form submitted successfully and email sent!", vbInformation
    Else
        MsgBox "Form submitted successfully, but email could not be sent. The data has been saved.", vbInformation
    End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "An error occurred in SubmitIntake: " & Err.Description, vbCritical
End Sub

' Function to validate form fields
Private Function ValidateForm(ws As Worksheet) As Boolean
    On Error GoTo ErrorHandler
    
    Dim cell As Range
    Dim requiredRange As Range
    
    ' Assuming required fields are in column A, rows 2 to 10
    Set requiredRange = ws.Range("A2:A10")
    
    For Each cell In requiredRange
        If IsEmpty(cell.Offset(0, 1)) Then
            ValidateForm = False
            Exit Function
        End If
    Next cell
    
    ValidateForm = True
    Exit Function
    
ErrorHandler:
    MsgBox "Error in ValidateForm: " & Err.Description, vbCritical
    ValidateForm = False
End Function

' Function to get the next entry ID
Private Function GetNextEntryId(wsData As Worksheet) As Long
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    If lastRow = 1 Then
        GetNextEntryId = 1
    Else
        GetNextEntryId = wsData.Cells(lastRow, "A").Value + 1
    End If
    
    Exit Function
    
ErrorHandler:
    MsgBox "Error in GetNextEntryId: " & Err.Description, vbCritical
    GetNextEntryId = 0
End Function

' Function to send email
Private Function SendEmail(wsInput As Worksheet, entryId As Long) As Boolean
    On Error GoTo ErrorHandler
    
    Dim outlookApp As Object
    Dim mailItem As Object
    Dim htmlBody As String
    Dim userResponse As VbMsgBoxResult
    Dim recipientEmail As String
    
    ' Get recipient email from the form (assuming it's in cell B3)
    recipientEmail = wsInput.Range("B3").Value
    If recipientEmail = "" Then
        MsgBox "Recipient email address is missing!", vbExclamation
        SendEmail = False
        Exit Function
    End If
    
    ' Try to use Outlook
    Set outlookApp = GetOutlookApp()
    
    If Not outlookApp Is Nothing Then
        Set mailItem = outlookApp.CreateItem(0)  ' 0 = olMailItem
        
        With mailItem
            .To = recipientEmail
            .Subject = "New Intake Form Submission - Entry ID: " & entryId
            
            ' Build HTML body
            htmlBody = BuildEmailHTML(wsInput, entryId)
            .HTMLBody = htmlBody
            
            ' Ask user for confirmation
            userResponse = MsgBox("Do you want to send this email?" & vbNewLine & _
                                  "To: " & .To & vbNewLine & _
                                  "Subject: " & .Subject, vbYesNo + vbQuestion)
            
            If userResponse = vbYes Then
                .Send
                SendEmail = True
            Else
                SendEmail = False
            End If
        End With
        
        Set mailItem = Nothing
    Else
        ' Fallback to CDO if Outlook is not available
        SendEmail = SendEmailCDO(wsInput, entryId)
    End If
    
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in SendEmail: " & Err.Description
    ' Fallback to CDO if there's an error with Outlook
    SendEmail = SendEmailCDO(wsInput, entryId)
End Function

' Function to send email using CDO
Private Function SendEmailCDO(wsInput As Worksheet, entryId As Long) As Boolean
    On Error GoTo ErrorHandler
    
    Dim cdoMessage As Object
    Dim cdoConfig As Object
    Dim htmlBody As String
    Dim userResponse As VbMsgBoxResult
    Dim recipientEmail As String
    
    ' Get recipient email from the form (assuming it's in cell B3)
    recipientEmail = wsInput.Range("B3").Value
    If recipientEmail = "" Then
        MsgBox "Recipient email address is missing!", vbExclamation
        SendEmailCDO = False
        Exit Function
    End If
    
    Set cdoMessage = CreateObject("CDO.Message")
    Set cdoConfig = CreateObject("CDO.Configuration")
    
    ' Configure SMTP settings
    With cdoConfig.Fields
        .Item("http://schemas.microsoft.com/cdo/configuration/sendusing") = 2
        .Item("http://schemas.microsoft.com/cdo/configuration/smtpserver") = "smtp.example.com"
        .Item("http://schemas.microsoft.com/cdo/configuration/smtpserverport") = 25
        ' Uncomment and set the following if your SMTP server requires authentication
        '.Item("http://schemas.microsoft.com/cdo/configuration/smtpauthenticate") = 1
        '.Item("http://schemas.microsoft.com/cdo/configuration/sendusername") = "your_username"
        '.Item("http://schemas.microsoft.com/cdo/configuration/sendpassword") = "your_password"
        .Update
    End With
    
    htmlBody = BuildEmailHTML(wsInput, entryId)
    
    With cdoMessage
        Set .Configuration = cdoConfig
        .To = recipientEmail
        .From = "sender@example.com"
        .Subject = "New Intake Form Submission - Entry ID: " & entryId
        .HTMLBody = htmlBody
        
        ' Ask user for confirmation
        userResponse = MsgBox("Do you want to send this email?" & vbNewLine & _
                              "To: " & .To & vbNewLine & _
                              "Subject: " & .Subject, vbYesNo + vbQuestion)
        
        If userResponse = vbYes Then
            .Send
            SendEmailCDO = True
        Else
            SendEmailCDO = False
        End If
    End With
    
    Set cdoMessage = Nothing
    Set cdoConfig = Nothing
    
    Exit Function
    
ErrorHandler:
    MsgBox "Error in SendEmailCDO: " & Err.Description & vbNewLine & _
           "Please check your SMTP server settings and network connection.", vbCritical
    SendEmailCDO = False
End Function

' Function to get or create Outlook application object
Private Function GetOutlookApp() As Object
    On Error Resume Next
    Set GetOutlookApp = GetObject(, "Outlook.Application")
    If GetOutlookApp Is Nothing Then
        Set GetOutlookApp = CreateObject("Outlook.Application")
    End If
    On Error GoTo 0
End Function

' Function to build HTML email content
Private Function BuildEmailHTML(ws As Worksheet, entryId As Long) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim i As Integer
    Dim fieldName As String
    Dim fieldValue As String
    
    html = "<html><head><style>"
    html = html & "body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }"
    html = html & "h1 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }"
    html = html & "table { width: 100%; border-collapse: collapse; margin-top: 20px; }"
    html = html & "th, td { padding: 12px; text-align: left; border-bottom: 1px solid #e0e0e0; }"
    html = html & "th { background-color: #3498db; color: white; text-transform: uppercase; font-size: 14px; }"
    html = html & "tr:nth-child(even) { background-color: #f8f8f8; }"
    html = html & "tr:hover { background-color: #f1f1f1; }"
    html = html & ".highlight { font-weight: bold; color: #2980b9; }"
    html = html & "</style></head><body>"
    
    html = html & "<h1>New Intake Form Submission</h1>"
    html = html & "<p>A new intake form has been submitted with the following details:</p>"
    html = html & "<table>"
    html = html & "<tr><th>Field</th><th>Value</th></tr>"
    
    ' Add Entry ID
    html = html & "<tr><td><strong>Entry ID</strong></td><td class='highlight'>" & entryId & "</td></tr>"
    
    ' Loop through form fields (assuming they're in columns A and B, starting from row 2)
    For i = 2 To 10  ' Adjust the range as needed
        If Not IsEmpty(ws.Cells(i, 1)) Then
            fieldName = ws.Cells(i, 1).Value
            fieldValue = ws.Cells(i, 2).Value
            
            ' Escape HTML special characters
            fieldName = Replace(Replace(Replace(fieldName, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            fieldValue = Replace(Replace(Replace(fieldValue, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            
            html = html & "<tr>"
            html = html & "<td><strong>" & fieldName & "</strong></td>"
            html = html & "<td>" & fieldValue & "</td>"
            html = html & "</tr>"
        End If
    Next i
    
    html = html & "</table>"
    html = html & "<p>Thank you for using our intake form system.</p>"
    html = html & "</body></html>"
    
    BuildEmailHTML = html
    
    Exit Function
    
ErrorHandler:
    MsgBox "Error in BuildEmailHTML: " & Err.Description, vbCritical
    BuildEmailHTML = ""
End Function

' Subroutine to save form data
Private Sub SaveFormData(wsInput As Worksheet, wsData As Worksheet, entryId As Long)
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Integer
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row + 1
    
    ' Save Entry ID
    wsData.Cells(lastRow, "A").Value = entryId
    
    ' Save form data (assuming form fields are in column B of wsInput)
    For i = 2 To 10  ' Adjust the range as needed
        wsData.Cells(lastRow, i).Value = wsInput.Cells(i, 2).Value
    Next i
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in SaveFormData: " & Err.Description, vbCritical
End Sub

' Subroutine to clear form
Private Sub ClearForm(ws As Worksheet)
    On Error GoTo ErrorHandler
    
    ' Clear the form first
    Dim clearRange As Range
    Set clearRange = ws.Range("B2:B10")
    clearRange.ClearContents
    
    ' Restore default values
    RestoreDefaultValues ws
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in ClearForm: " & Err.Description, vbCritical
End Sub

' Subroutine to format data sheet
Private Sub FormatDataSheet(wsData As Worksheet)
    On Error GoTo ErrorHandler
    
    Dim dataRange As Range
    Dim lastRow As Long
    Dim lastCol As Long
    
    ' Find the last row and column with data
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    lastCol = wsData.Cells(1, wsData.Columns.Count).End(xlToLeft).Column
    
    ' Set the data range
    Set dataRange = wsData.Range(wsData.Cells(1, 1), wsData.Cells(lastRow, lastCol))
    
    With dataRange
        ' Add borders
        .Borders.LineStyle = xlContinuous
        .Borders.Weight = xlThin
        
        ' Format header row
        .Rows(1).Font.Bold = True
        .Rows(1).Interior.Color = RGB(200, 200, 200)
        
        ' Autofit columns
        .Columns.AutoFit
    End With
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in FormatDataSheet: " & Err.Description, vbCritical
End Sub

' Add new function to restore default values
Private Sub RestoreDefaultValues(ws As Worksheet)
    On Error GoTo ErrorHandler
    
    ' Store default values in a hidden sheet if they don't exist
    If Not SheetExists("DefaultValues") Then
        CreateDefaultValuesSheet ws
    End If
    
    ' Copy default values back to the form
    Dim defaultSheet As Worksheet
    Set defaultSheet = ThisWorkbook.Sheets("DefaultValues")
    
    Dim i As Long
    For i = 2 To 10 ' Adjust range as needed
        If Not IsEmpty(defaultSheet.Cells(i, 2)) Then
            ws.Cells(i, 2).Value = defaultSheet.Cells(i, 2).Value
        End If
    Next i
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in RestoreDefaultValues: " & Err.Description, vbCritical
End Sub

' Add helper function to check if sheet exists
Private Function SheetExists(sheetName As String) As Boolean
    On Error Resume Next
    SheetExists = Not ThisWorkbook.Sheets(sheetName) Is Nothing
    On Error GoTo 0
End Function

' Add function to create and populate default values sheet
Private Sub CreateDefaultValuesSheet(wsInput As Worksheet)
    On Error GoTo ErrorHandler
    
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets.Add
    
    ' Rename the sheet
    ws.Name = "DefaultValues"
    
    ' Copy current values from input form
    wsInput.Range("A2:B10").Copy ws.Range("A2")
    
    ' Hide the sheet
    ws.Visible = xlSheetVeryHidden
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in CreateDefaultValuesSheet: " & Err.Description, vbCritical
End Sub

' Add function to save current values as new defaults
Public Sub SaveAsDefaults()
    On Error GoTo ErrorHandler
    
    Dim wsInput As Worksheet
    Set wsInput = ThisWorkbook.Worksheets("IntakeForm")
    
    ' Create or access the DefaultValues sheet
    If Not SheetExists("DefaultValues") Then
        CreateDefaultValuesSheet wsInput
    Else
        ' Update existing default values
        Dim defaultSheet As Worksheet
        Set defaultSheet = ThisWorkbook.Sheets("DefaultValues")
        wsInput.Range("A2:B10").Copy defaultSheet.Range("A2")
    End If
    
    MsgBox "Current values have been saved as the new defaults.", vbInformation
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in SaveAsDefaults: " & Err.Description, vbCritical
End Sub

