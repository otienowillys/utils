Option Explicit

Private Const INPUT_SHEET_NAME As String = "IntakeForm"
Private Const DATA_SHEET_NAME As String = "IntakeData"

Public Sub SubmitIntake()
    On Error GoTo ErrHandler

    ' Disable screen updating
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual 'Disable automatic calculations for speed

    ' Initialize worksheets
    Dim wsInput As Worksheet, wsData As Worksheet
    Set wsInput = ThisWorkbook.Worksheets(INPUT_SHEET_NAME)
    Set wsData = ThisWorkbook.Worksheets(DATA_SHEET_NAME)

    ' Validate form
    If Not ValidateForm(wsInput) Then
        MsgBox "Please fill in all required fields", vbExclamation
        wsInput.Activate
        GoTo CleanExit
    End If

    ' Get next ID
    Dim entryId As Long
    entryId = GetNextEntryId(wsData)

    ' Try to send email
    If SendEmail(wsInput, entryId) Then
        ' If email sent successfully, then accumulate data
        SaveFormData wsInput, wsData, entryId

        ' Clear the form
        ClearForm wsInput

        ' Format the data sheet  (Only format if data was actually added)
         If wsData.Range("A" & wsData.Rows.Count).End(xlUp).Row > 1 Then 'Check if there is data
            FormatDataSheet wsData
         End If

        ' Show success message
        MsgBox "Entry #" & entryId & " has been processed successfully", vbInformation

        ' Activate the input form for next entry
        wsInput.Activate
        wsInput.Range("B2").Select
    End If

CleanExit:
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic 'Re-enable calculations
    Exit Sub

ErrHandler:
    MsgBox "Error: " & Err.Description & " (Error Number: " & Err.Number & ")", vbCritical 'Include error number
    Resume CleanExit
End Sub

Private Function ValidateForm(ws As Worksheet) As Boolean
    Dim cell As Range
    For Each cell In ws.Range("B2:B7")
        If Len(Trim(cell.Value)) = 0 Then
            cell.Select
            ValidateForm = False ' Explicitly set to false
            Exit Function
        End If
    Next cell
    ValidateForm = True
End Function

Private Function GetNextEntryId(wsData As Worksheet) As Long
    Dim lastRow As Long
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row ' More reliable last row
    GetNextEntryId = IIf(lastRow = 1 And IsEmpty(wsData.Range("A1").Value), 1, IIf(lastRow = 1, 1, wsData.Cells(lastRow, 1).Value + 1)) 'Handles empty sheet
End Function


Private Function SendEmail(wsInput As Worksheet, entryId As Long) As Boolean
    On Error GoTo EmailError

    Dim outApp As Object, outMail As Object
    Set outApp = CreateObject("Outlook.Application")
    Set outMail = outApp.CreateItem(0)

    With outMail
        .To = wsInput.Range("B3").Value 'Use Email from the form, not D2
        .Subject = "Form Submission #" & entryId
        .HTMLBody = BuildEmailHTML(wsInput, entryId)

        ' Display for preview
        .Display

        ' Ask for confirmation while email is still open
        If MsgBox("Send this email?", vbQuestion + vbYesNo) = vbYes Then
            On Error Resume Next ' Handle potential send errors
            .Send
            If Err.Number = 0 Then
                SendEmail = True
            Else
                MsgBox "Email send failed: " & Err.Description & ".  Please try again or send manually.", vbInformation ' More informative message
            End If
        End If
    End With

EmailCleanup:
    Set outMail = Nothing
    Set outApp = Nothing
    Exit Function

EmailError:
    MsgBox "Email error: " & Err.Description & " (Error Number: " & Err.Number & ")", vbExclamation ' Include error number
    Resume EmailCleanup
End Function

Private Function BuildEmailHTML(ws As Worksheet, entryId As Long) As String
    ' ... (No changes needed in this function)
End Function

Private Sub SaveFormData(wsInput As Worksheet, wsData As Worksheet, entryId As Long)
    ' Initialize headers if needed (Improved check)
    If wsData.Cells(1, 1).Value = "" Then  'Check only the first cell
        With wsData.Range("A1:H1")
            .Value = Array("Entry ID", "Name", "Email", "Phone", "Company", "Title", "Department", "Timestamp")
            .Font.Bold = True
            .Interior.Color = RGB(240, 240, 240)
        End With
    End If

    ' Find next row (reliable method)
    Dim nextRow As Long
    nextRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row + 1

    ' Add new data
    With wsData
        .Cells(nextRow, 1).Value = entryId
        .Cells(nextRow, 2).Value = wsInput.Range("B2").Value
        .Cells(nextRow, 3).Value = wsInput.Range("B3").Value
        .Cells(nextRow, 4).Value = wsInput.Range("B4").Value
        .Cells(nextRow, 5).Value = wsInput.Range("B5").Value
        .Cells(nextRow, 6).Value = wsInput.Range("B6").Value
        .Cells(nextRow, 7).Value = wsInput.Range("B7").Value
        .Cells(nextRow, 8).Value = Now

        ' Format timestamp (No change needed)
        .Cells(nextRow, 8).NumberFormat = "yyyy-mm-dd hh:mm:ss"

    End With
End Sub

Private Sub FormatDataSheet(wsData As Worksheet)
    ' ... (No changes needed in this function)
End Sub

Private Sub ClearForm(ws As Worksheet)
    ' ... (No changes needed in this function)
End Sub
