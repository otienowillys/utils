/* Assuming you have three datasets: USE_DATA, MONITOR_DATA, and CONTROL_DATA */

/* Dataset: USE_DATA (Assuming it's already sorted by useIdNumber) */
/* If not, sort it: */
proc sort data=USE_DATA;
  by useIdNumber;
run;

/* Dataset: MONITOR_DATA (Assuming it's already sorted by useIdNumber) */
/* If not, sort it: */
proc sort data=MONITOR_DATA;
  by useIdNumber;
run;

/* Dataset: CONTROL_DATA (Assuming it's already sorted by useIdNumber) */
/* If not, sort it: */
proc sort data=CONTROL_DATA;
  by useIdNumber;
run;

/* Generate the desired code using PUT statements */
data _NULL_;
  set USE_DATA;
  by useIdNumber;
  file 'output_code.txt' MOD; /* Create or append to output_code.txt */
  call symputx('useIdNumber',useIdNumber); /* define useIdNumber macro variable*/

  if first.useIdNumber then do;
    put 'const use' _N_ ' = await prisma.use.create({';
    put '  data: {';
    put '    name: ''' name ''',';
    put '    version: ''' version ''',';
    put '    useIdNumber: ''' useIdNumber ''',';
    if not missing(useLevel1) then put '    useLevel1: ''' useLevel1 ''',';
    if not missing(useLevel2) then put '    useLevel2: ''' useLevel2 ''',';
    put '    useDescription: ''' useDescription ''',';
    put '    users: ''' users ''',';
    put '    usage: ''' usage ''',';
    put '    businessUsage: ''' businessUsage ''',';
    put '    useStatus: ''' useStatus ''',';
    put '    results: ''' results ''',';
    put '    monitors: {';
    put '      create: [';
  end;

  /* Generate monitors for each USE record */
  data _NULL_;
    set MONITOR_DATA;
    by useIdNumber;
    where useIdNumber = "&useIdNumber";
    file 'output_code.txt' MOD;
    if _N_ > 1 then put ',';/*add comma if not first monitor*/
    put '        {';
    put '          name: ''' name ''',';
    put '          version: ''' version ''',';
    put '          mmpVersion: ''' mmpVersion ''',';
    put '          asOfDate: new Date(''' put(asOfDate, yymmdd10.) '''),';
    put '          useDescription: ''' useDescription ''',';
    put '          kpiId: ''' kpiId ''',';
    put '          metricName: ''' metricName ''',';
    put '          metricUnits: ''' metricUnits ''',';
    put '          metricJustification: ''' metricJustification ''',';
    put '          inner: ' inner ',',;
    put '          outer: ' outer ',',;
    put '          justification: ''' justification ''',';
    put '          firstTimeDate: new Date(''' put(firstTimeDate, yymmdd10.) '''),';
    put '          limId: ''' limId '''';
    put '        }';
  run;

  if last.useIdNumber then do;
    put '      ]';
    put '    },';
    put '    control: {';
    put '      create: [';

    /* Generate controls for each USE record */
    data _NULL_;
      set CONTROL_DATA;
      by useIdNumber;
      where useIdNumber = "&useIdNumber";
      file 'output_code.txt' MOD;
      if _N_ > 1 then put ',';/*add comma if not first control*/
      put '        {';
      put '          name: ''' name ''',';
      put '          version: ''' version ''',';
      put '          caVersion: ''' caVersion ''',';
      put '          caAsOfDate: new Date(''' put(caAsOfDate, yymmdd10.) '''),';
      put '          controlId: ''' controlId ''',';
      if not missing(altControlId) then put '    altControlId: ''' altControlId ''',';
      put '          category: ''' category ''',';
      put '          controlName: ''' controlName ''',';
      put '          controlDistribution: ''' controlDistribution ''',';
      put '          metric: ''' metric ''',';
      put '          justification: ''' justification ''',';
      put '          inner: ' inner ',',;
      put '          outer: ' outer ',',;
      put '          prodMon: ''' prodMon '''';
      put '        }';
    run;
    put '      ]';
    put '    }';
    put '  }';
    put '});';
    put '';
    put 'console.log(`Created Use model with useIdNumber: ${use' _N_ '.useIdNumber} and its related monitors`);';
    put '';
  end;
run;

/*Final console log*/
data _NULL_;
 file 'output_code.txt' MOD;
 put 'console.log(''Seeding completed successfully!'');';
 put '}';
run;














/* Create a combined dataset with all relevant data using PROC SQL */
proc sql;
  /* Create a dataset of distinct uses */
  create table DISTINCT_USES as
  select *, monotonic() as use_number
  from SORTED_USE_DATA
  group by useIdNumber
  having min(monotonic());
  
  /* Create a joined dataset with all monitors related to their uses */
  create table COMBINED_DATA as
  select a.*, b.*, a.useIdNumber as use_id, b.useIdNumber as monitor_id,
         a.use_number, 
         monotonic() as monitor_row_num
  from DISTINCT_USES a
  left join SORTED_MONITOR_DATA b
  on a.useIdNumber = b.useIdNumber
  order by a.useIdNumber, calculated monitor_row_num;
quit;

/* Generate the output code file */
data _NULL_;
  set COMBINED_DATA;
  by use_id;
  file 'output_code.txt' MOD;
  
  /* Handle start of each use group */
  if first.use_id then do;
    put 'const use' use_number ' = await prisma.use.create({';
    put '  data: {';
    put '    name: "' a.name '",';
    put '    version: "' a.version '",';
    put '    useIdNumber: "' a.useIdNumber '",';
    if not missing(a.useLevel1) then put '    useLevel1: "' a.useLevel1 '",';
    if not missing(a.useLevel2) then put '    useLevel2: "' a.useLevel2 '",';
    put '    useDescription: "' a.useDescription '",';
    put '    users: "' a.users '",';
    put '    usage: "' a.usage '",';
    put '    businessUsage: "' a.businessUsage '",';
    put '    useStatus: "' a.useStatus '",';
    put '    results: "' a.results '",';
    put '    monitors: {';
    put '      create: [';
  end;
  
  /* Only output monitor data if it exists */
  if not missing(monitor_id) then do;
    /* Add comma between monitors but not before first one */
    if monitor_row_num > 1 and first.monitor_row_num = 0 then put ',';
    
    put '        {';
    put '          name: "' b.name '",';
    put '          version: "' b.version '",';
    put '          mmpVersion: "' b.mmpVersion '",';
    put '          asOfDate: new Date("' put(b.asOfDate, yymmdd10.) '"),';
    put '          useDescription: "' b.useDescription '",';
    put '          kpiId: "' b.kpiId '",';
    put '          metricName: "' b.metricName '",';
    put '          metricUnits: "' b.metricUnits '",';
    put '          metricJustification: "' b.metricJustification '",';
    put '          inner: ' b.inner ',';
    put '          outer: ' b.outer ',';
    put '          justification: "' b.justification '",';
    put '          firstTimeDate: new Date("' put(b.firstTimeDate, yymmdd10.) '"),';
    put '          limId: "' b.limId '"';
    put '        }';
  end;
  
  /* Close each use group */
  if last.use_id then do;
    put '      ]';
    put '    }';
    put '  }';
    put '});';
    put '';
    put 'console.log(`Created Use model with useIdNumber: ${use' use_number '.useIdNumber} and its related monitors`);';
    put '';
  end;
run;

/* Write final console log */
data _NULL_;
  file 'output_code.txt' MOD;
  put 'console.log("Seeding completed successfully!");';
  put '}';
run;
