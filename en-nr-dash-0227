Private Function BuildReviewEmailHTML(wsData As Worksheet, rowIndex As Long, entryId As Long, status As String, comments As String, reviewer As String) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim i As Integer
    Dim fieldName As String
    Dim fieldValue As String
    Dim statusClass As String
    Dim statusIcon As String
    
    ' Determine status class and icon based on status
    Select Case status
        Case STATUS_APPROVED
            statusClass = "status-approved"
            statusIcon = "✓"
        Case STATUS_REJECTED
            statusClass = "status-rejected"
            statusIcon = "✕"
        Case Else
            statusClass = "status-pending"
            statusIcon = "⟳"
    End Select
    
    html = "<html><head><meta name='viewport' content='width=device-width, initial-scale=1.0'><style>"
    ' Modern, sleek design with advanced CSS
    html = html & "@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap');"
    html = html & "body { font-family: 'Inter', sans-serif; line-height: 1.6; color: #333; max-width: 650px; margin: 0 auto; padding: 0; background-color: #f5f5f5; }"
    html = html & ".email-container { background-color: #ffffff; border-radius: 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.08); padding: 40px; margin: 20px; }"
    html = html & ".header-section { margin-bottom: 30px; }"
    html = html & "h1 { color: #1a202c; font-weight: 600; font-size: 24px; margin-top: 0; margin-bottom: 8px; letter-spacing: -0.5px; }"
    html = html & ".subtitle { color: #718096; font-weight: 400; font-size: 16px; margin-bottom: 25px; }"
    html = html & "h2 { color: #2D3748; font-weight: 600; font-size: 18px; margin-top: 30px; margin-bottom: 15px; letter-spacing: -0.3px; }"
    
    ' Stylish ID badge
    html = html & ".entry-id { display: inline-block; background: linear-gradient(135deg, #4776E6 0%, #8E54E9 100%); color: white; padding: 10px 16px; border-radius: 6px; font-weight: 500; letter-spacing: 0.5px; margin-bottom: 25px; box-shadow: 0 2px 10px rgba(71, 118, 230, 0.2); }"
    
    ' Status badges
    html = html & ".status-badge { display: inline-flex; align-items: center; padding: 8px 16px; border-radius: 30px; font-size: 14px; font-weight: 500; }"
    html = html & ".status-icon { margin-right: 8px; }"
    html = html & ".status-approved { background-color: #C6F6D5; color: #22543D; }"
    html = html & ".status-rejected { background-color: #FED7D7; color: #822727; }"
    html = html & ".status-pending { background-color: #FEFCBF; color: #744210; }"
    
    ' Review cards
    html = html & ".review-cards { display: flex; gap: 20px; margin: 25px 0; }"
    html = html & ".review-card { flex: 1; background-color: #F7FAFC; border-radius: 8px; padding: 24px; box-shadow: 0 2px 8px rgba(0,0,0,0.06); }"
    html = html & ".review-card h3 { color: #2D3748; font-size: 16px; font-weight: 600; margin-top: 0; margin-bottom: 16px; }"
    html = html & ".review-detail { margin-bottom: 12px; }"
    html = html & ".review-label { color: #718096; font-size: 14px; display: block; margin-bottom: 4px; }"
    html = html & ".review-value { color: #4A5568; font-weight: 500; }"
    html = html & ".review-comments { background-color: white; border-radius: 6px; padding: 16px; border-left: 3px solid #4776E6; margin-top: 16px; }"
    
    ' Modern table design
    html = html & "table { width: 100%; border-collapse: separate; border-spacing: 0; margin: 25px 0; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.06); }"
    html = html & "th { background: linear-gradient(135deg, #4776E6 0%, #8E54E9 100%); color: white; font-weight: 500; text-align: left; padding: 16px; font-size: 14px; letter-spacing: 0.5px; }"
    html = html & "td { padding: 16px; border-bottom: 1px solid #E2E8F0' Create a modern ribbon menu
Public Sub CreateCustomRibbon()
    ' Note: This function is just a placeholder as actual Ribbon customization
    ' requires XML and other components. In a real implementation, you would
    ' create an XML file and use the CustomUI editor to implement this.
    MsgBox "Custom ribbon menu creation requires the CustomUI editor and XML." & vbNewLine & _
           "Please use the form buttons for navigation instead.", vbInformation
End Sub

' Function to create a dashboard
Public Sub CreateDashboard()
    On Error GoTo ErrorHandler
    
    Dim wsDashboard As Worksheet
    Dim wsData As Worksheet
    Dim chartObj As ChartObject
    Dim cht As Chart
    Dim statusRange As Range
    Dim lastRow As Long
    Dim i As Integer
    
    ' Check if IntakeData exists
    On Error Resume Next
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    If wsData Is Nothing Then
        MsgBox "IntakeData sheet not found. Please set up the workbook first.", vbExclamation
        Exit Sub
    End If
    On Error GoTo ErrorHandler
    
    ' Create or activate Dashboard sheet
    On Error Resume Next
    Set wsDashboard = ThisWorkbook.Worksheets("Dashboard")
    If wsDashboard Is Nothing Then
        Set wsDashboard = ThisWorkbook.Worksheets.Add(Before:=ThisWorkbook.Sheets(1))
        wsDashboard.Name = "Dashboard"
    End If
    wsDashboard.Activate
    On Error GoTo ErrorHandler
    
    ' Clear existing content
    wsDashboard.Cells.Clear
    
    ' Add title
    With wsDashboard.Range("A1")
        .Value = "INTAKE FORM DASHBOARD"
        .Font.Size = 16
        .Font.Bold = True
    End With
    
    ' Get data count
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    Dim totalCount As Long
    totalCount = lastRow - 1 ' Subtract header row
    If totalCount < 0 Then totalCount = 0
    
    ' Get status counts
    Dim pendingCount As Long, approvedCount As Long, rejectedCount As Long
    pendingCount = WorksheetFunction.CountIf(wsData.Range("AO2:AO" & lastRow), STATUS_PENDING)
    approvedCount = WorksheetFunction.CountIf(wsData.Range("AO2:AO" & lastRow), STATUS_APPROVED)
    rejectedCount = WorksheetFunction.CountIf(wsData.Range("AO2:AO" & lastRow), STATUS_REJECTED)
    
    ' Create summary section
    wsDashboard.Range("A3").Value = "SUMMARY"
    wsDashboard.Range("A3").Font.Bold = True
    
    ' Style the dashboard with modern look
    With wsDashboard
        ' Create Info Cards
        CreateInfoCard wsDashboard, "B4", "Total Submissions", totalCount, RGB(65, 105, 225)
        CreateInfoCard wsDashboard, "D4", "Pending Review", pendingCount, RGB(255, 191, 0)
        CreateInfoCard wsDashboard, "F4", "Approved", approvedCount, RGB(0, 176, 80)
        CreateInfoCard wsDashboard, "H4", "Rejected", rejectedCount, RGB(255, 0, 0)
        
        ' Add action buttons with icons (using shapes with text as we can't insert real icons in VBA)
        CreateActionButton wsDashboard, "B7", "New Submission", "ThisWorkbook.Worksheets(""IntakeForm"").Activate"
        CreateActionButton wsDashboard, "D7", "Review Pending", "ViewPendingSubmissions"
        CreateActionButton wsDashboard, "F7", "Add New Field", "AddNewField"
        CreateActionButton wsDashboard, "H7", "Settings", "ThisWorkbook.Worksheets(""Settings"").Activate"
    End With
    
    ' Create status pie chart
    If lastRow > 1 Then
        ' Create data for chart
        wsDashboard.Range("A20").Value = "Status"
        wsDashboard.Range("B20").Value = "Count"
        
        wsDashboard.Range("A21").Value = "Pending"
        wsDashboard.Range("A22").Value = "Approved"
        wsDashboard.Range("A23").Value = "Rejected"
        
        wsDashboard.Range("B21").Value = pendingCount
        wsDashboard.Range("B22").Value = approvedCount
        wsDashboard.Range("B23").Value = rejectedCount
        
        ' Create chart
        Set chartObj = wsDashboard.ChartObjects.Add(Left:=300, Width:=300, Top:=150, Height:=200)
        Set cht = chartObj.Chart
        
        With cht
            .SetSourceData Source:=wsDashboard.Range("A20:B23")
            .ChartType = xlPie
            .HasTitle = True
            .ChartTitle.Text = "Submission Status"
            .ApplyLayout 3 ' Clean layout
            
            ' Format pie slices with custom colors
            .SeriesCollection(1).Points(1).Format.Fill.ForeColor.RGB = RGB(255, 191, 0) ' Pending - Yellow
            .SeriesCollection(1).Points(2).Format.Fill.ForeColor.RGB = RGB(0, 176, 80)  ' Approved - Green
            .SeriesCollection(1).Points(3).Format.Fill.ForeColor.RGB = RGB(255, 0, 0)   ' Rejected - Red
            
            ' Add data labels
            .SeriesCollection(1).HasDataLabels = True
            .SeriesCollection(1).DataLabels.ShowPercentage = True
            .SeriesCollection(1).DataLabels.ShowCategoryName = True
            .SeriesCollection(1).DataLabels.Font.Size = 10
        End With
    End If
    
    ' Add latest submissions table
    wsDashboard.Range("A11").Value = "LATEST SUBMISSIONS"
    wsDashboard.Range("A11").Font.Bold = True
    
    ' Create header row for submissions table
    wsDashboard.Range("A12").Value = "ID"
    wsDashboard.Range("B12").Value = "Name"
    wsDashboard.Range("C12").Value = "Date"
    wsDashboard.Range("D12").Value = "Status"
    wsDashboard.Range("A12:D12").Font.Bold = True
    wsDashboard.Range("A12:D12").Interior.Color = RGB(200, 200, 200)
    
    ' Fill latest submissions (up to 5)
    Dim displayLimit As Long
    displayLimit = WorksheetFunction.Min(5, totalCount)
    
    If displayLimit > 0 Then
        For i = 1 To displayLimit
            Dim dataRow As Long
            dataRow = lastRow - displayLimit + i
            
            If dataRow >= 2 Then  ' Make sure we don't go above the header row
                wsDashboard.Cells(12 + i, 1).Value = wsData.Cells(dataRow, 1).Value  ' ID
                
                ' Attempt to get full name from column 2 or another appropriate column
                On Error Resume Next
                Dim nameIdx As Integer
                nameIdx = FindColumnByName(wsData, "Full Name", "Name")
                If nameIdx > 0 Then
                    wsDashboard.Cells(12 + i, 2).Value = wsData.Cells(dataRow, nameIdx).Value
                Else
                    wsDashboard.Cells(12 + i, 2).Value = "<No Name>"
                End If
                On Error GoTo ErrorHandler
                
                ' Attempt to get date from column 4 or another date column
                On Error Resume Next
                Dim dateIdx As Integer
                dateIdx = FindColumnByName(wsData, "Date", "Submission Date")
                If dateIdx > 0 Then
                    wsDashboard.Cells(12 + i, 3).Value = wsData.Cells(dataRow, dateIdx).Value
                Else
                    wsDashboard.Cells(12 + i, 3).Value = "<No Date>"
                End If
                On Error GoTo ErrorHandler
                
                ' Status with conditional formatting
                wsDashboard.Cells(12 + i, 4).Value = wsData.Cells(dataRow, 41).Value  ' Status
                
                ' Color-code status cell
                Select Case wsDashboard.Cells(12 + i, 4).Value
                    Case STATUS_PENDING
                        wsDashboard.Cells(12 + i, 4).Interior.Color = RGB(255, 235, 156)  ' Light yellow
                    Case STATUS_APPROVED
                        wsDashboard.Cells(12 + i, 4).Interior.Color = RGB(198, 239, 206)  ' Light green
                    Case STATUS_REJECTED
                        wsDashboard.Cells(12 + i, 4).Interior.Color = RGB(255, 199, 206)  ' Light red
                End Select
            End If
        Next i
    End If
    
    ' Format columns
    wsDashboard.Columns("A:J").AutoFit
    
    ' Add a refresh button
    CreateActionButton wsDashboard, "I12", "Refresh Dashboard", "CreateDashboard"
    
    ' Format the entire dashboard
    With wsDashboard
        .Rows(2).RowHeight = 15  ' Spacer
        .Rows(10).RowHeight = 15  ' Spacer
    End With
    
    ' Hide the data for pie chart
    wsDashboard.Range("A20:B23").Font.ThemeColor = xlThemeColorLight1
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in CreateDashboard: " & Err.Description, vbCritical
End Sub

' Helper function to create info card on dashboard
Private Sub CreateInfoCard(ws As Worksheet, cell As String, title As String, value As Variant, colorRGB As Long)
    Dim cardRange As Range
    Set cardRange = ws.Range(cell & ":" & Replace(cell, ":", "") & "+1")
    
    With cardRange
        ' Create border and fill
        .Merge
        .Interior.Color = colorRGB
        .Borders.LineStyle = xlContinuous
        .Borders.Weight = xlThin
        .Borders.Color = RGB(50, 50, 50)
        
        ' Set content with custom format
        .Value = title & ": " & value
        .Font.Color = RGB(255, 255, 255)
        .Font.Bold = True
        .Font.Size = 12
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .RowHeight = 36
        .ColumnWidth = 18
    End With
End Sub

' Helper function to create action button on dashboard
Private Sub CreateActionButton(ws As Worksheet, cell As String, caption As String, macroName As String)
    Dim btn As Button
    Dim btnLeft As Double, btnTop As Double
    Dim btnWidth As Double, btnHeight As Double
    
    ' Convert cell reference to position
    btnLeft = ws.Range(cell).Left
    btnTop = ws.Range(cell).Top
    btnWidth = ws.Range(cell & ":" & Replace(cell, ":", "") & "+1").Width
    btnHeight = 28
    
    ' Create the button
    Set btn = ws.Buttons.Add(btnLeft, btnTop, btnWidth, btnHeight)
    
    With btn
        .Caption = caption
        .Font.Bold = True
        .Font.Size = 10
        .OnAction = macroName
    End With
End Sub

' Helper function to find a column by name (will try multiple possible names)
Private Function FindColumnByName(ws As Worksheet, ParamArray possibleNames() As Variant) As Integer
    Dim i As Integer, j As Integer
    Dim lastColumn As Integer
    
    lastColumn = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    For i = 1 To lastColumn
        Dim cellValue As String
        If Not IsEmpty(ws.Cells(1, i)) Then
            cellValue = Trim(LCase(ws.Cells(1, i).Value))
            
            For j = LBound(possibleNames) To UBound(possibleNames)
                If cellValue = LCase(possibleNames(j)) Then
                    FindColumnByName = i
                    Exit Function
                End If
            Next j
        End If
    Next i
    
    ' Not found
    FindColumnByName = 0
End Function' Function to update IntakeForm from DefaultValues
Public Sub UpdateFormFromDefaults()
    On Error GoTo ErrorHandler
    
    Dim wsInput As Worksheet
    Dim wsDefaults As Worksheet
    Dim i As Integer
    Dim lastRow As Long
    
    ' Get references to worksheets
    Set wsInput = ThisWorkbook.Worksheets("IntakeForm")
    Set wsDefaults = ThisWorkbook.Worksheets("DefaultValues")
    
    ' Unprotect IntakeForm temporarily
    On Error Resume Next
    wsInput.Unprotect Password:="IntakeForm"
    On Error GoTo ErrorHandler
    
    ' Determine last row in DefaultValues sheet
    lastRow = wsDefaults.Cells(wsDefaults.Rows.Count, 1).End(xlUp).Row
    
    ' First, clear existing field names in IntakeForm
    wsInput.Range("A2:A40").ClearContents
    
    ' Copy field names from DefaultValues to IntakeForm
    For i = 2 To lastRow
        wsInput.Cells(i, 1).Value = wsDefaults.Cells(i, 1).Value
        
        ' Set default values if they exist in DefaultValues
        If Not IsEmpty(wsDefaults.Cells(i, 2)) Then
            wsInput.Cells(i, 2).Value = wsDefaults.Cells(i, 2).Value
        End If
    Next i
    
    ' Reapply protection
    wsInput.Protect Password:="IntakeForm", UserInterfaceOnly:=True
    
    MsgBox "Form updated successfully with field names from DefaultValues sheet.", vbInformation
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in UpdateFormFromDefaults: " & Err.Description, vbCritical
    
    ' Try to reapply protection in case of error
    On Error Resume Next
    wsInput.Protect Password:="IntakeForm", UserInterfaceOnly:=True
End Sub

' Function to add a new field to DefaultValues and update form
Public Sub AddNewField()
    On Error GoTo ErrorHandler
    
    Dim wsDefaults As Worksheet
    Dim lastRow As Long
    Dim fieldName As String
    Dim defaultValue As String
    
    ' Get reference to DefaultValues worksheet
    Set wsDefaults = ThisWorkbook.Worksheets("DefaultValues")
    
    ' Unprotect DefaultValues temporarily
    On Error Resume Next
    wsDefaults.Unprotect Password:="DefaultValues"
    On Error GoTo ErrorHandler
    
    ' Find the last row
    lastRow = wsDefaults.Cells(wsDefaults.Rows.Count, 1).End(xlUp).Row
    
    ' Check if we're at the limit
    If lastRow >= 40 Then
        MsgBox "Maximum number of fields (40) has been reached.", vbExclamation
        Exit Sub
    End If
    
    ' Get field name from user
    fieldName = InputBox("Enter name for the new field:", "Add New Field")
    If fieldName = "" Then
        ' User canceled
        wsDefaults.Protect Password:="DefaultValues", UserInterfaceOnly:=True
        Exit Sub
    End If
    
    ' Get default value (optional)
    defaultValue = InputBox("Enter default value (optional):", "Add New Field")
    
    ' Add to DefaultValues
    wsDefaults.Cells(lastRow + 1, 1).Value = fieldName
    If defaultValue <> "" Then
        wsDefaults.Cells(lastRow + 1, 2).Value = defaultValue
    End If
    
    ' Reapply protection
    wsDefaults.Protect Password:="DefaultValues", UserInterfaceOnly:=True
    
    ' Update the form
    UpdateFormFromDefaults
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in AddNewField: " & Err.Description, vbCritical
    
    ' Try to reapply protection in case of error
    On Error Resume Next
    wsDefaults.Protect Password:="DefaultValues", UserInterfaceOnly:=True
End Sub' Function to initialize and protect worksheets
Public Sub InitializeWorksheets()
    On Error GoTo ErrorHandler
    
    Dim wsInput As Worksheet
    Dim wsData As Worksheet
    Dim wsDefaults As Worksheet
    Dim wsSettings As Worksheet
    
    ' Set references to worksheets
    Set wsInput = ThisWorkbook.Worksheets("IntakeForm")
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    
    ' Try to get optional sheets
    On Error Resume Next
    Set wsDefaults = ThisWorkbook.Worksheets("DefaultValues")
    Set wsSettings = ThisWorkbook.Worksheets("Settings")
    On Error GoTo ErrorHandler
    
    ' Protect the IntakeData sheet (read-only)
    With wsData
        ' First unprotect in case it's already protected
        On Error Resume Next
        .Unprotect
        On Error GoTo ErrorHandler
        
        ' Protect the sheet with a password
        .Protect Password:="IntakeData", UserInterfaceOnly:=True, _
                AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
    End With
    
    ' Make only column B editable in IntakeForm
    With wsInput
        ' First unprotect in case it's already protected
        On Error Resume Next
        .Unprotect
        On Error GoTo ErrorHandler
        
        ' Unlock column B only
        .Cells.Locked = True
        .Columns("B").Locked = False
        
        ' Protect the sheet with a password
        .Protect Password:="IntakeForm", UserInterfaceOnly:=True
    End With
    
    ' Protect other sheets if they exist
    If Not wsDefaults Is Nothing Then
        On Error Resume Next
        wsDefaults.Unprotect
        On Error GoTo ErrorHandler
        
        ' Allow editing of default values in column B
        wsDefaults.Cells.Locked = True
        wsDefaults.Columns("B").Locked = False
        
        wsDefaults.Protect Password:="DefaultValues", UserInterfaceOnly:=True
    End If
    
    If Not wsSettings Is Nothing Then
        On Error Resume Next
        wsSettings.Unprotect
        On Error GoTo ErrorHandler
        
        ' Allow editing of settings values in column B
        wsSettings.Cells.Locked = True
        wsSettings.Columns("B").Locked = False
        
        wsSettings.Protect Password:="Settings", UserInterfaceOnly:=True
    End If
    
    MsgBox "Worksheets have been initialized and protected successfully.", vbInformation
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in InitializeWorksheets: " & Err.Description, vbCritical
End Sub

' Workbook_Open event handler - add this to ThisWorkbook module
' Public Sub Workbook_Open()
'     InitializeWorksheets
' End SubOption Explicit

' Constants for status
Private Const STATUS_PENDING As String = "Pending Review"
Private Const STATUS_APPROVED As String = "Approved"
Private Const STATUS_REJECTED As String = "Rejected"

' Main function to handle form submission
Public Sub SubmitIntake()
    On Error GoTo ErrorHandler
    
    Dim wsInput As Worksheet
    Dim wsData As Worksheet
    Dim entryId As Long
    Dim emailSent As Boolean
    
    Set wsInput = ThisWorkbook.Worksheets("IntakeForm")
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    
    ' Validate form
    If Not ValidateForm(wsInput) Then
        MsgBox "Please fill in all required fields.", vbExclamation
        Exit Sub
    End If
    
    ' Get next entry ID
    entryId = GetNextEntryId(wsData)
    
    ' Save form data first
    SaveFormData wsInput, wsData, entryId
    
    ' Try to send email
    emailSent = SendEmail(wsInput, entryId)
    
    ' Restore default values to form
    ClearForm wsInput
    
    ' Format data sheet
    FormatDataSheet wsData
    
    If emailSent Then
        MsgBox "Form submitted successfully and email sent!" & vbNewLine & _
               "The submission is now pending review.", vbInformation
    Else
        MsgBox "Form submitted successfully, but email could not be sent. The data has been saved." & vbNewLine & _
               "The submission is now pending review.", vbInformation
    End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "An error occurred in SubmitIntake: " & Err.Description, vbCritical
End Sub

' Function to validate form fields
Private Function ValidateForm(ws As Worksheet) As Boolean
    On Error GoTo ErrorHandler
    
    Dim cell As Range
    Dim requiredRange As Range
    
    ' Assuming required fields are in column A, rows 2 to 40
    Set requiredRange = ws.Range("A2:A40")
    
    For Each cell In requiredRange
        If Not IsEmpty(cell) And IsEmpty(cell.Offset(0, 1)) Then
            ValidateForm = False
            Exit Function
        End If
    Next cell
    
    ValidateForm = True
    Exit Function
    
ErrorHandler:
    MsgBox "Error in ValidateForm: " & Err.Description, vbCritical
    ValidateForm = False
End Function

' Function to get the next entry ID
Private Function GetNextEntryId(wsData As Worksheet) As Long
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    If lastRow = 1 Then
        GetNextEntryId = 1
    Else
        GetNextEntryId = wsData.Cells(lastRow, "A").Value + 1
    End If
    
    Exit Function
    
ErrorHandler:
    MsgBox "Error in GetNextEntryId: " & Err.Description, vbCritical
    GetNextEntryId = 0
End Function

' Function to send email
Private Function SendEmail(wsInput As Worksheet, entryId As Long) As Boolean
    On Error GoTo ErrorHandler
    
    Dim outlookApp As Object
    Dim mailItem As Object
    Dim htmlBody As String
    Dim userResponse As VbMsgBoxResult
    Dim recipientEmail As String
    
    ' Try to use Outlook
    Set outlookApp = GetOutlookApp()
    
    ' Get recipient email - can be configured in a settings sheet or cell
    recipientEmail = GetRecipientEmail()
    
    If Not outlookApp Is Nothing Then
        Set mailItem = outlookApp.CreateItem(0)  ' 0 = olMailItem
        
        With mailItem
            .To = recipientEmail
            .Subject = "New Intake Form Submission - Entry ID: " & entryId
            
            ' Build HTML body
            htmlBody = BuildEmailHTML(wsInput, entryId)
            .HTMLBody = htmlBody
            
            ' Optional: Add attachments if needed
            ' .Attachments.Add "path\to\file.xlsx"
            
            ' Ask user for confirmation
            userResponse = MsgBox("Do you want to send this email?" & vbNewLine & _
                                  "To: " & .To & vbNewLine & _
                                  "Subject: " & .Subject, vbYesNo + vbQuestion)
            
            If userResponse = vbYes Then
                .Send
                SendEmail = True
            Else
                SendEmail = False
            End If
        End With
        
        Set mailItem = Nothing
    Else
        ' Fallback to CDO if Outlook is not available
        MsgBox "Outlook is not available. Please make sure Outlook is installed and running.", vbExclamation
        SendEmail = False
    End If
    
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in SendEmail: " & Err.Description
    MsgBox "Error sending email: " & Err.Description & vbNewLine & _
           "Please ensure Outlook is properly configured.", vbExclamation
    SendEmail = False
End Function

' Function to get or create Outlook application object
Private Function GetOutlookApp() As Object
    On Error Resume Next
    Set GetOutlookApp = GetObject(, "Outlook.Application")
    If GetOutlookApp Is Nothing Then
        Set GetOutlookApp = CreateObject("Outlook.Application")
    End If
    On Error GoTo 0
End Function

' Function to get recipient email (can be modified to read from a settings sheet)
Private Function GetRecipientEmail() As String
    On Error Resume Next
    
    Dim wsSettings As Worksheet
    
    ' Try to get email from Settings sheet if it exists
    Set wsSettings = ThisWorkbook.Worksheets("Settings")
    
    If Not wsSettings Is Nothing Then
        ' Check if there's a cell with "Email" or "Recipient" label
        Dim findCell As Range
        Set findCell = wsSettings.Cells.Find(What:="Email", LookAt:=xlWhole)
        
        If findCell Is Nothing Then
            Set findCell = wsSettings.Cells.Find(What:="Recipient", LookAt:=xlWhole)
        End If
        
        If Not findCell Is Nothing Then
            ' Get the value in the cell next to the label
            Dim emailValue As String
            emailValue = Trim(findCell.Offset(0, 1).Value)
            
            If emailValue <> "" Then
                GetRecipientEmail = emailValue
                Exit Function
            End If
        End If
    End If
    
    ' If we couldn't find a settings sheet or value, use the default
    GetRecipientEmail = "recipient@example.com"
End Function

' Function to create Settings sheet if it doesn't exist
Public Sub CreateSettingsSheet()
    On Error Resume Next
    
    Dim wsSettings As Worksheet
    
    ' Check if Settings sheet already exists
    Set wsSettings = ThisWorkbook.Worksheets("Settings")
    
    If wsSettings Is Nothing Then
        ' Create new Settings sheet
        Set wsSettings = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsSettings.Name = "Settings"
        
        ' Set up headers
        wsSettings.Range("A1").Value = "Setting"
        wsSettings.Range("B1").Value = "Value"
        wsSettings.Range("A1:B1").Font.Bold = True
        
        ' Add recipient email setting
        wsSettings.Range("A2").Value = "Recipient Email"
        wsSettings.Range("B2").Value = "recipient@example.com"
        
        ' Add reviewer email setting
        wsSettings.Range("A3").Value = "Reviewer Email"
        wsSettings.Range("B3").Value = "reviewer@example.com"
        
        ' Add company name setting
        wsSettings.Range("A4").Value = "Company Name"
        wsSettings.Range("B4").Value = "Your Company Name"
        
        ' Format the sheet
        wsSettings.Columns("A:B").AutoFit
        
        MsgBox "Settings sheet has been created." & vbNewLine & _
               "You can now configure email addresses and other settings.", vbInformation
    Else
        MsgBox "Settings sheet already exists.", vbInformation
    End If
End Sub

' Function to build HTML email content
Private Function BuildEmailHTML(ws As Worksheet, entryId As Long) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim i As Integer
    Dim fieldName As String
    Dim fieldValue As String
    
    html = "<html><head><meta name='viewport' content='width=device-width, initial-scale=1.0'><style>"
    ' Modern, sleek design with advanced CSS
    html = html & "@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap');"
    html = html & "body { font-family: 'Inter', sans-serif; line-height: 1.6; color: #333; max-width: 650px; margin: 0 auto; padding: 0; background-color: #f5f5f5; }"
    html = html & ".email-container { background-color: #ffffff; border-radius: 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.08); padding: 40px; margin: 20px; }"
    html = html & ".header-section { margin-bottom: 30px; }"
    html = html & "h1 { color: #1a202c; font-weight: 600; font-size: 24px; margin-top: 0; margin-bottom: 8px; letter-spacing: -0.5px; }"
    html = html & ".subtitle { color: #718096; font-weight: 400; font-size: 16px; margin-bottom: 25px; }"
    
    ' Stylish ID badge
    html = html & ".entry-id { display: inline-block; background: linear-gradient(135deg, #4776E6 0%, #8E54E9 100%); color: white; padding: 10px 16px; border-radius: 6px; font-weight: 500; letter-spacing: 0.5px; margin-bottom: 25px; box-shadow: 0 2px 10px rgba(71, 118, 230, 0.2); }"
    
    ' Modern table design
    html = html & "table { width: 100%; border-collapse: separate; border-spacing: 0; margin: 25px 0; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.06); }"
    html = html & "th { background: linear-gradient(135deg, #4776E6 0%, #8E54E9 100%); color: white; font-weight: 500; text-align: left; padding: 16px; letter-spacing: 0.5px; font-size: 14px; }"
    html = html & "td { padding: 16px; border-bottom: 1px solid #E2E8F0; font-size: 15px; }"
    html = html & "tr:last-child td { border-bottom: none; }"
    html = html & "tr:nth-child(even) { background-color: #F7FAFC; }"
    html = html & ".category-cell { color: #2D3748; font-weight: 500; }"
    
    ' Status badges
    html = html & ".status-badge { display: inline-flex; align-items: center; padding: 6px 12px; border-radius: 4px; font-size: 13px; font-weight: 500; }"
    html = html & ".status-pending { background-color: #FEFCBF; color: #744210; }"
    html = html & ".status-approved { background-color: #C6F6D5; color: #22543D; }"
    html = html & ".status-rejected { background-color: #FED7D7; color: #822727; }"
    
    ' Button styling
    html = html & ".button-container { text-align: center; margin-top: 30px; }"
    html = html & ".button { display: inline-block; background: linear-gradient(135deg, #4776E6 0%, #8E54E9 100%); color: white; padding: 12px 24px; border-radius: 6px; text-decoration: none; font-weight: 500; transition: all 0.3s ease; box-shadow: 0 4px 10px rgba(71, 118, 230, 0.2); }"
    html = html & ".button:hover { transform: translateY(-2px); box-shadow: 0 6px 15px rgba(71, 118, 230, 0.3); }"
    
    ' Footer styling
    html = html & ".footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #E2E8F0; color: #718096; font-size: 14px; text-align: center; }"
    html = html & "</style></head><body>"
    
    html = html & "<div class='email-container'>"
    html = html & "<div class='header-section'>"
    html = html & "<h1>New Intake Form Submission</h1>"
    html = html & "<p class='subtitle'>A new submission has been received and requires your attention.</p>"
    html = html & "<div class='entry-id'>Entry ID: " & entryId & "</div>"
    html = html & "</div>"
    
    html = html & "<table>"
    html = html & "<tr><th>Category</th><th>Details</th><th>Status</th></tr>"
    
    ' Loop through form fields (assuming they're in columns A and B, starting from row 2)
    For i = 2 To 40  ' Adjusted range to 40
        If Not IsEmpty(ws.Cells(i, 1)) And Not IsEmpty(ws.Cells(i, 2)) Then
            fieldName = ws.Cells(i, 1).Value
            fieldValue = ws.Cells(i, 2).Value
            
            ' Escape HTML special characters
            fieldName = Replace(Replace(Replace(fieldName, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            fieldValue = Replace(Replace(Replace(fieldValue, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            
            html = html & "<tr>"
            html = html & "<td class='category-cell'>" & fieldName & "</td>"
            html = html & "<td>" & fieldValue & "</td>"
            html = html & "<td><span class='status-badge status-pending'>Pending Review</span></td>"
            html = html & "</tr>"
        End If
    Next i
    
    html = html & "</table>"
    
    html = html & "<div class='button-container'>"
    html = html & "<a href='#' class='button'>Review Submission →</a>"
    html = html & "</div>"
    
    html = html & "<div class='footer'>"
    html = html & "Thank you for using our intake form system. If you have any questions, please contact support."
    html = html & "</div>"
    
    html = html & "</div></body></html>"
    
    BuildEmailHTML = html
    
    Exit Function
    
ErrorHandler:
    MsgBox "Error in BuildEmailHTML: " & Err.Description, vbCritical
    BuildEmailHTML = ""
End Function

' Subroutine to save form data
' Subroutine to save form data
Private Sub SaveFormData(wsInput As Worksheet, wsData As Worksheet, entryId As Long)
    On Error GoTo ErrorHandler
    
    ' First unprotect the data sheet to make changes
    On Error Resume Next
    wsData.Unprotect Password:="IntakeData"
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Integer
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row + 1
    
    ' Save Entry ID
    wsData.Cells(lastRow, "A").Value = entryId
    
    ' Save form data (assuming form fields are in column B of wsInput)
    For i = 2 To 40  ' Updated range to 40
        If Not IsEmpty(wsInput.Cells(i, 1)) Then
            wsData.Cells(lastRow, i).Value = wsInput.Cells(i, 2).Value
        End If
    Next i
    
    ' Add status column (column 41) with default "Pending Review"
    wsData.Cells(lastRow, 41).Value = STATUS_PENDING
    
    ' Add review comments column (column 42) - empty by default
    wsData.Cells(lastRow, 42).Value = ""
    
    ' Add reviewer column (column 43) - empty by default
    wsData.Cells(lastRow, 43).Value = ""
    
    ' Add review date column (column 44) - empty by default
    wsData.Cells(lastRow, 44).Value = ""
    
    ' Protect the sheet again
    wsData.Protect Password:="IntakeData", UserInterfaceOnly:=True, _
                AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in SaveFormData: " & Err.Description, vbCritical
    
    ' Try to protect the sheet in case of error
    On Error Resume Next
    wsData.Protect Password:="IntakeData", UserInterfaceOnly:=True, _
                AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
End Sub

' Subroutine to restore default values to form
Private Sub ClearForm(ws As Worksheet)
    On Error GoTo ErrorHandler
    
    Dim clearRange As Range
    Dim wsDefaults As Worksheet
    Dim i As Integer
    
    ' Try to get DefaultValues worksheet
    On Error Resume Next
    Set wsDefaults = ThisWorkbook.Worksheets("DefaultValues")
    On Error GoTo ErrorHandler
    
    ' Check if DefaultValues sheet exists
    If wsDefaults Is Nothing Then
        ' No DefaultValues sheet, just clear the form
        Set clearRange = ws.Range("B2:B40")
        clearRange.ClearContents
        Debug.Print "DefaultValues sheet not found. Form cleared."
    Else
        ' DefaultValues sheet exists, load default values
        For i = 2 To 40  ' Adjust the range as needed
            If Not IsEmpty(ws.Cells(i, 1)) Then
                ' Find the corresponding default value by field name
                Dim fieldName As String
                Dim defaultCell As Range
                
                fieldName = ws.Cells(i, 1).Value
                Set defaultCell = FindDefaultCell(wsDefaults, fieldName)
                
                If Not defaultCell Is Nothing Then
                    ' Copy default value to the form
                    ws.Cells(i, 2).Value = defaultCell.Offset(0, 1).Value
                Else
                    ' No default found, clear the cell
                    ws.Cells(i, 2).ClearContents
                End If
            End If
        Next i
        Debug.Print "Default values loaded from DefaultValues sheet."
    End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in ClearForm: " & Err.Description, vbCritical
    
    ' Fall back to simple clearing if there's an error
    On Error Resume Next
    Set clearRange = ws.Range("B2:B40")
    clearRange.ClearContents
    On Error GoTo 0
End Sub

' Helper function to find a default value cell by field name
Private Function FindDefaultCell(wsDefaults As Worksheet, fieldName As String) As Range
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long
    
    lastRow = wsDefaults.Cells(wsDefaults.Rows.Count, 1).End(xlUp).Row
    
    For i = 1 To lastRow
        If wsDefaults.Cells(i, 1).Value = fieldName Then
            Set FindDefaultCell = wsDefaults.Cells(i, 1)
            Exit Function
        End If
    Next i
    
    ' Field name not found
    Set FindDefaultCell = Nothing
    
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in FindDefaultCell: " & Err.Description
    Set FindDefaultCell = Nothing
End Function

' Subroutine to format data sheet
' Subroutine to format data sheet
' Subroutine to format data sheet
Private Sub FormatDataSheet(wsData As Worksheet)
    On Error GoTo ErrorHandler
    
    ' First unprotect the sheet to make changes
    On Error Resume Next
    wsData.Unprotect Password:="IntakeData"
    On Error GoTo ErrorHandler
    
    Dim dataRange As Range
    Dim lastRow As Long
    Dim lastCol As Long
    
    ' Find the last row and column with data
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    lastCol = wsData.Cells(1, wsData.Columns.Count).End(xlToLeft).Column
    
    ' Ensure we have headers for the review columns
    If wsData.Cells(1, 41).Value = "" Then wsData.Cells(1, 41).Value = "Status"
    If wsData.Cells(1, 42).Value = "" Then wsData.Cells(1, 42).Value = "Review Comments"
    If wsData.Cells(1, 43).Value = "" Then wsData.Cells(1, 43).Value = "Reviewer"
    If wsData.Cells(1, 44).Value = "" Then wsData.Cells(1, 44).Value = "Review Date"
    
    ' Set the data range
    Set dataRange = wsData.Range(wsData.Cells(1, 1), wsData.Cells(lastRow, lastCol))
    
    With dataRange
        ' Add borders
        .Borders.LineStyle = xlContinuous
        .Borders.Weight = xlThin
        
        ' Format header row
        .Rows(1).Font.Bold = True
        .Rows(1).Interior.Color = RGB(200, 200, 200)
        
        ' Autofit columns
        .Columns.AutoFit
    End With
    
    ' Conditionally format the Status column
    Dim statusRange As Range
    Set statusRange = wsData.Range(wsData.Cells(2, 41), wsData.Cells(lastRow, 41))
    
    ' Clear existing conditional formatting
    statusRange.FormatConditions.Delete
    
    ' Format "Pending Review" as yellow
    With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_PENDING & """")
        .Interior.Color = RGB(255, 255, 0)
    End With
    
    ' Format "Approved" as green
    With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_APPROVED & """")
        .Interior.Color = RGB(0, 255, 0)
    End With
    
    ' Format "Rejected" as red
    With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_REJECTED & """")
        .Interior.Color = RGB(255, 0, 0)
    End With
    
    ' Protect the sheet again
    wsData.Protect Password:="IntakeData", UserInterfaceOnly:=True, _
                  AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in FormatDataSheet: " & Err.Description, vbCritical
    
    ' Try to protect the sheet in case of error
    On Error Resume Next
    wsData.Protect Password:="IntakeData", UserInterfaceOnly:=True, _
                  AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
End Sub

' ' ' New function to review submissions
Public Sub ReviewSubmission()
    On Error GoTo ErrorHandler
    
    Dim wsData As Worksheet
    Dim entryId As Long
    Dim rowIndex As Long
    Dim statusValue As String
    Dim comments As String
    Dim reviewer As String
    Dim emailSent As Boolean
    
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    
    ' Unprotect the data sheet
    On Error Resume Next
    wsData.Unprotect Password:="IntakeData"
    On Error GoTo ErrorHandler
    
    ' Get entry ID to review
    entryId = Application.InputBox("Enter the Entry ID to review:", "Review Submission", Type:=1)
    If entryId = 0 Then
        ' User canceled
        ' Protect the sheet again
        wsData.Protect Password:="IntakeData", UserInterfaceOnly:=True, _
                    AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
        Exit Sub
    End If
    
    ' Find the row with the entry ID
    rowIndex = FindEntryRow(wsData, entryId)
    If rowIndex = 0 Then
        MsgBox "Entry ID " & entryId & " not found.", vbExclamation
        ' Protect the sheet again
        wsData.Protect Password:="IntakeData", UserInterfaceOnly:=True, _
                    AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
        Exit Sub
    End If
    
    ' Get current status
    statusValue = wsData.Cells(rowIndex, 41).Value
    If statusValue <> STATUS_PENDING Then
        ' Entry has already been reviewed
        If MsgBox("This entry has already been reviewed as '" & statusValue & "'." & vbNewLine & _
                 "Do you want to review it again?", vbYesNo + vbQuestion) = vbNo Then
            ' Protect the sheet again
            wsData.Protect Password:="IntakeData", UserInterfaceOnly:=True, _
                        AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
            Exit Sub
        End If
    End If
    
    ' Get reviewer name
    reviewer = Application.InputBox("Enter your name:", "Reviewer Information", Type:=2)
    If reviewer = "" Then
        ' User canceled
        ' Protect the sheet again
        wsData.Protect Password:="IntakeData", UserInterfaceOnly:=True, _
                    AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
        Exit Sub
    End If
    
    ' Prompt for approval/rejection
    Dim reviewResult As VbMsgBoxResult
    reviewResult = MsgBox("Do you want to approve this submission?" & vbNewLine & _
                        "Click 'Yes' to approve or 'No' to reject.", vbYesNo + vbQuestion)
    
    If reviewResult = vbYes Then
        statusValue = STATUS_APPROVED
    Else
        statusValue = STATUS_REJECTED
    End If
    
    ' Get comments
    comments = Application.InputBox("Enter your review comments:", "Review Comments", Type:=2)
    
    ' Update the data
    wsData.Cells(rowIndex, 41).Value = statusValue          ' Status
    wsData.Cells(rowIndex, 42).Value = comments             ' Comments
    wsData.Cells(rowIndex, 43).Value = reviewer             ' Reviewer
    wsData.Cells(rowIndex, 44).Value = Now()                ' Review date
    
    ' Protect the sheet again
    wsData.Protect Password:="IntakeData", UserInterfaceOnly:=True, _
                AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
    
    ' Send notification email
    emailSent = SendReviewNotificationEmail(wsData, rowIndex, entryId, statusValue, comments, reviewer)
    
    ' Format data sheet
    FormatDataSheet wsData
    
    ' Show confirmation
    If emailSent Then
        MsgBox "Review completed successfully and notification email sent!", vbInformation
    Else
        MsgBox "Review completed successfully, but notification email could not be sent.", vbInformation
    End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "An error occurred in ReviewSubmission: " & Err.Description, vbCritical
    
    ' Try to protect the sheet in case of error
    On Error Resume Next
    wsData.Protect Password:="IntakeData", UserInterfaceOnly:=True, _
                AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
End Sub

' Function to find the row index for an entry ID
Private Function FindEntryRow(wsData As Worksheet, entryId As Long) As Long
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    For i = 2 To lastRow
        If wsData.Cells(i, 1).Value = entryId Then
            FindEntryRow = i
            Exit Function
        End If
    Next i
    
    ' Entry not found
    FindEntryRow = 0
    
    Exit Function
    
ErrorHandler:
    MsgBox "Error in FindEntryRow: " & Err.Description, vbCritical
    FindEntryRow = 0
End Function

' Function to send review notification email
Private Function SendReviewNotificationEmail(wsData As Worksheet, rowIndex As Long, entryId As Long, status As String, comments As String, reviewer As String) As Boolean
    On Error GoTo ErrorHandler
    
    Dim outlookApp As Object
    Dim mailItem As Object
    Dim htmlBody As String
    Dim userResponse As VbMsgBoxResult
    Dim recipientEmail As String
    
    ' Try to use Outlook
    Set outlookApp = GetOutlookApp()
    
    ' Get recipient email - can be configured in a settings sheet or cell
    recipientEmail = GetRecipientEmail()
    
    If Not outlookApp Is Nothing Then
        Set mailItem = outlookApp.CreateItem(0)  ' 0 = olMailItem
        
        With mailItem
            .To = recipientEmail
            .Subject = "Intake Form Review - Entry ID: " & entryId & " - " & status
            
            ' Build HTML body
            htmlBody = BuildReviewEmailHTML(wsData, rowIndex, entryId, status, comments, reviewer)
            .HTMLBody = htmlBody
            
            ' Optional: Add CC to other stakeholders if needed
            ' .CC = "manager@example.com"
            
            ' Ask user for confirmation
            userResponse = MsgBox("Do you want to send this review notification email?" & vbNewLine & _
                                  "To: " & .To & vbNewLine & _
                                  "Subject: " & .Subject, vbYesNo + vbQuestion)
            
            If userResponse = vbYes Then
                .Send
                SendReviewNotificationEmail = True
            Else
                SendReviewNotificationEmail = False
            End If
        End With
        
        Set mailItem = Nothing
    Else
        ' Outlook not available
        MsgBox "Outlook is not available. Please make sure Outlook is installed and running.", vbExclamation
        SendReviewNotificationEmail = False
    End If
    
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in SendReviewNotificationEmail: " & Err.Description
    MsgBox "Error sending review notification email: " & Err.Description & vbNewLine & _
           "Please ensure Outlook is properly configured.", vbExclamation
    SendReviewNotificationEmail = False
End Function

' Function to build HTML email for review notification
Private Function BuildReviewEmailHTML(wsData As Worksheet, rowIndex As Long, entryId As Long, status As String, comments As String, reviewer As String) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim i As Integer
    Dim fieldName As String
    Dim fieldValue As String
    Dim statusClass As String
    
    ' Determine status class based on status
    Select Case status
        Case STATUS_APPROVED
            statusClass = "completed"
        Case STATUS_REJECTED
            statusClass = "in-progress"   ' Using in-progress class for rejected (yellow warning color)
        Case Else
            statusClass = "pending"
    End Select
    
    html = "<html><head><meta name='viewport' content='width=device-width, initial-scale=1.0'><style>"
    ' Accessible design with good contrast ratios inspired by the example image
    html = html & "body { font-family: Arial, Helvetica, sans-serif; line-height: 1.6; color: #000000; max-width: 650px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; }"
    html = html & ".email-container { background-color: #ffffff; border: 1px solid #dddddd; padding: 20px; }"
    html = html & "h1 { color: #000000; font-weight: bold; margin-top: 0; padding-bottom: 10px; border-bottom: 1px solid #dddddd; }"
    html = html & "h2 { color: #000000; font-weight: bold; margin-top: 30px; margin-bottom: 15px; }"
    html = html & ".header-section { margin-bottom: 25px; }"
    html = html & ".entry-id { background-color: #006EB6; color: #ffffff; display: inline-block; padding: 8px 12px; font-weight: bold; margin-bottom: 15px; }"
    
    ' Announcement boxes
    html = html & ".announcements { display: flex; margin: 25px 0; gap: 20px; }"
    html = html & ".announcement-box { border: 1px solid #dddddd; padding: 15px; flex: 1; }"
    html = html & ".announcement-box h3 { color: #006EB6; margin-top: 0; }"
    html = html & ".announcement-box.blue h3 { color: #006EB6; }"
    html = html & ".announcement-box.orange h3 { color: #FF9800; }"
    
    ' Table styling
    html = html & "table { width: 100%; border-collapse: collapse; margin: 25px 0; border: 1px solid #dddddd; }"
    html = html & "th { background-color: #006EB6; color: #ffffff; font-weight: bold; text-align: left; padding: 10px; }"
    html = html & "td { padding: 10px; border-bottom: 1px solid #dddddd; }"
    html = html & "tr:last-child td { border-bottom: none; }"
    html = html & ".category-cell { font-weight: bold; }"
    
    ' Status indicators
    html = html & ".completed { background-color: #4CAF50; color: #ffffff; padding: 5px 10px; font-weight: bold; display: inline-block; }"
    html = html & ".in-progress { background-color: #FFC107; color: #000000; padding: 5px 10px; font-weight: bold; display: inline-block; }"
    html = html & ".pending { background-color: #17a2b8; color: #ffffff; padding: 5px 10px; font-weight: bold; display: inline-block; }"
    
    html = html & ".button-container { text-align: center; margin-top: 25px; }"
    html = html & ".button { background-color: #006EB6; color: #ffffff; padding: 10px 20px; text-decoration: none; font-weight: bold; display: inline-block; }"
    html = html & ".footer { margin-top: 20px; border-top: 1px solid #dddddd; padding-top: 20px; color: #666666; font-size: 14px; }"
    html = html & "</style></head><body>"
    
    html = html & "<div class='email-container'>"
    html = html & "<div class='header-section'>"
    html = html & "<h1>Intake Form Review Notification</h1>"
    html = html & "<p>The following submission has been reviewed:</p>"
    html = html & "<div class='entry-id'>Entry ID: " & entryId & "</div>"
    html = html & "</div>"
    
    ' Review announcements
    html = html & "<div class='announcements'>"
    html = html & "<div class='announcement-box blue'>"
    html = html & "<h3>Review Details</h3>"
    html = html & "<p><strong>Status:</strong> <span class='" & statusClass & "'>" & status & "</span></p>"
    html = html & "<p><strong>Reviewer:</strong> " & reviewer & "</p>"
    html = html & "<p><strong>Date:</strong> " & Format(wsData.Cells(rowIndex, 14).Value, "yyyy-mm-dd") & "</p>"
    html = html & "</div>"
    
    html = html & "<div class='announcement-box orange'>"
    html = html & "<h3>Review Comments</h3>"
    If comments <> "" Then
        html = html & "<p>" & comments & "</p>"
    Else
        html = html & "<p>No additional comments provided.</p>"
    End If
    html = html & "</div>"
    html = html & "</div>"
    
    ' Submission details
    html = html & "<h2>Submission Details</h2>"
    html = html & "<table>"
    html = html & "<tr><th>Category</th><th>Details</th><th>Status</th></tr>"
    
    ' Loop through form data (columns 1 to 40 in data sheet)
    For i = 1 To 40  ' Updated range to 40
        If Not IsEmpty(wsData.Cells(1, i)) And Not IsEmpty(wsData.Cells(rowIndex, i)) Then
            fieldName = wsData.Cells(1, i).Value
            fieldValue = wsData.Cells(rowIndex, i).Value
            
            ' Escape HTML special characters
            fieldName = Replace(Replace(Replace(fieldName, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            If IsDate(fieldValue) Then
                fieldValue = Format(fieldValue, "yyyy-mm-dd")
            Else
                fieldValue = Replace(Replace(Replace(CStr(fieldValue), "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            End If
            
            html = html & "<tr>"
            html = html & "<td class='category-cell'>" & fieldName & "</td>"
            html = html & "<td>" & fieldValue & "</td>"
            html = html & "<td><div class='" & statusClass & "'>" & status & "</div></td>"
            html = html & "</tr>"
        End If
    Next i
    
    html = html & "</table>"
    
    html = html & "<div class='button-container'>"
    html = html & "<a href='#' class='button'>View Full Details →</a>"
    html = html & "</div>"
    
    html = html & "<div class='footer'>"
    html = html & "Thank you for using our intake form system. If you have any questions, please contact support."
    html = html & "</div>"
    
    html = html & "</div></body></html>"
    
    BuildReviewEmailHTML = html
    
    Exit Function
    
ErrorHandler:
    MsgBox "Error in BuildReviewEmailHTML: " & Err.Description, vbCritical
    BuildReviewEmailHTML = ""
End FunctionValue
            
            ' Escape HTML special characters
            fieldName = Replace(Replace(Replace(fieldName, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            If IsDate(fieldValue) Then
                fieldValue = Format(fieldValue, "yyyy-mm-dd")
            Else
                fieldValue = Replace(Replace(Replace(CStr(fieldValue), "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            End If
            
            html = html & "<tr>"
            html = html & "<td class='category-cell'>" & fieldName & "</td>"
            html = html & "<td>" & fieldValue & "</td>"
            html = html & "<td><div class='" & statusClass & "'>" & status & "</div></td>"
            html = html & "</tr>"
        End If
    Next i
    
    html = html & "</table>"
    
    html = html & "<div class='button-container'>"
    html = html & "<a href='#' class='button'>View Full Details →</a>"
    html = html & "</div>"
    
    html = html & "<div class='footer'>"
    html = html & "Thank you for using our intake form system. If you have any questions, please contact support."
    html = html & "</div>"
    
    html = html & "</div></body></html>"
    
    BuildReviewEmailHTML = html
    
    Exit Function
    
ErrorHandler:
    MsgBox "Error in BuildReviewEmailHTML: " & Err.Description, vbCritical
    BuildReviewEmailHTML = ""
End Function

' Add a function to view pending submissions
Public Sub ViewPendingSubmissions()
    On Error GoTo ErrorHandler
    
    Dim wsData As Worksheet
    Dim pendingCount As Long
    Dim statusRange As Range
    Dim msg As String
    
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    
    ' Count pending submissions
    pendingCount = WorksheetFunction.CountIf(wsData.Columns(11), STATUS_PENDING)
    
    If pendingCount = 0 Then
        MsgBox "There are no pending submissions to review.", vbInformation
        Exit Sub
    End If
    
    ' Build message with pending submission IDs
    msg = "There are " & pendingCount & " pending submissions:" & vbNewLine & vbNewLine
    
    Dim lastRow As Long
    Dim i As Long
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    For i = 2 To lastRow
        If wsData.Cells(i, 11).Value = STATUS_PENDING Then
            msg = msg & "Entry ID: " & wsData.Cells(i, 1).Value
            
            ' Add submission date if available
            If Not IsEmpty(wsData.Cells(i, 3).Value) And IsDate(wsData.Cells(i, 3).Value) Then
                msg = msg & " - Date: " & Format(wsData.Cells(i, 3).Value, "yyyy-mm-dd")
            End If
            
            msg = msg & vbNewLine
        End If
    Next i
    
    msg = msg & vbNewLine & "Use the ReviewSubmission function to review these submissions."
    
    MsgBox msg, vbInformation
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in ViewPendingSubmissions: " & Err.Description, vbCritical
End Sub

' ' ' ' Function to setup the workbook structure
Public Sub SetupWorkbook()
    On Error GoTo ErrorHandler
    
    Dim wb As Workbook
    Dim wsInput As Worksheet
    Dim wsData As Worksheet
    Dim wsDefaults As Worksheet
    Dim wsSettings As Worksheet
    Dim i As Integer, fieldsCount As Integer
    Dim fieldNames As Variant
    Dim defaultValues As Variant
    
    Set wb = ThisWorkbook
    
    ' First check if Settings exists or create it
    On Error Resume Next
    Set wsSettings = wb.Worksheets("Settings")
    If wsSettings Is Nothing Then
        CreateSettingsSheet
        Set wsSettings = wb.Worksheets("Settings")
    End If
    On Error GoTo ErrorHandler
    
    ' First check if DefaultValues exists or create it
    On Error Resume Next
    Set wsDefaults = wb.Worksheets("DefaultValues")
    If wsDefaults Is Nothing Then
        ' Create DefaultValues sheet with default field structure
        Set wsDefaults = wb.Worksheets.Add(Before:=wb.Sheets(1))
        wsDefaults.Name = "DefaultValues"
        
        ' Set up header
        wsDefaults.Range("A1").Value = "Field Name"
        wsDefaults.Range("B1").Value = "Default Value"
        wsDefaults.Range("A1:B1").Font.Bold = True
        
        ' Ask if user wants to start with example fields or create from scratch
        Dim startOption As VbMsgBoxResult
        startOption = MsgBox("Do you want to create the form with example fields?" & vbNewLine & _
                             "Choose 'Yes' to start with example fields." & vbNewLine & _
                             "Choose 'No' to start with an empty form you can customize.", vbYesNo + vbQuestion)
        
        If startOption = vbYes Then
            ' Use example fields - read them from a predefined array
            fieldNames = Array("Full Name", "Email", "Date", "Phone", "Department", "Category", "Description", "Priority", "Attached Files")
            defaultValues = Array("", "", Date, "", "", "", "", "Medium", "")
            
            For i = 0 To UBound(fieldNames)
                wsDefaults.Cells(i + 2, 1).Value = fieldNames(i)
                wsDefaults.Cells(i + 2, 2).Value = defaultValues(i)
            Next i
            
            fieldsCount = UBound(fieldNames) + 1
        Else
            ' Start with a minimum set of fields the user can add to
            wsDefaults.Cells(2, 1).Value = "Full Name"
            wsDefaults.Cells(3, 1).Value = "Email"
            
            fieldsCount = 2
            
            ' Immediately prompt to add fields
            If MsgBox("Would you like to add more fields now?", vbYesNo + vbQuestion) = vbYes Then
                ' Add fields until user is done
                Do
                    Dim fieldName As String, defaultValue As String
                    
                    fieldName = InputBox("Enter field name (leave blank to finish adding):", "Add Field")
                    If fieldName = "" Then Exit Do
                    
                    defaultValue = InputBox("Enter default value (optional):", "Default Value")
                    
                    fieldsCount = fieldsCount + 1
                    wsDefaults.Cells(fieldsCount + 1, 1).Value = fieldName
                    wsDefaults.Cells(fieldsCount + 1, 2).Value = defaultValue
                Loop
            End If
        End If
        
        ' Format columns
        wsDefaults.Columns("A:B").AutoFit
    Else
        ' Count existing fields
        fieldsCount = 0
        For i = 2 To 40
            If Not IsEmpty(wsDefaults.Cells(i, 1)) Then
                fieldsCount = fieldsCount + 1
            Else
                Exit For
            End If
        Next i
    End If
    On Error GoTo ErrorHandler
    
    ' Check if IntakeForm exists, if not create it
    On Error Resume Next
    Set wsInput = wb.Worksheets("IntakeForm")
    If wsInput Is Nothing Then
        Set wsInput = wb.Worksheets.Add(After:=wsDefaults)
        wsInput.Name = "IntakeForm"
        
        ' Setup the basic form structure
        wsInput.Range("A1").Value = "Intake Form"
        wsInput.Range("A1").Font.Size = 14
        wsInput.Range("A1").Font.Bold = True
        
        ' Copy field names from DefaultValues
        For i = 2 To fieldsCount + 1  ' +1 because we start from row 2
            If Not IsEmpty(wsDefaults.Cells(i, 1)) Then
                wsInput.Cells(i, 1).Value = wsDefaults.Cells(i, 1).Value
                
                ' Also copy default values if provided
                If Not IsEmpty(wsDefaults.Cells(i, 2)) Then
                    wsInput.Cells(i, 2).Value = wsDefaults.Cells(i, 2).Value
                End If
            End If
        Next i
        
        ' Format column widths
        wsInput.Columns("A").ColumnWidth = 15
        wsInput.Columns("B").ColumnWidth = 30
        
        ' Add a submit button
        Dim btnSubmit As Button
        Set btnSubmit = wsInput.Buttons.Add(100, 300, 100, 25)
        btnSubmit.Caption = "Submit Form"
        btnSubmit.OnAction = "SubmitIntake"
        
        ' Format the headers
        wsInput.Range("A1:B1").Interior.Color = RGB(200, 200, 200)
        wsInput.Range("A2:A40").Font.Bold = True
    End If
    On Error GoTo ErrorHandler
    
    ' Check if IntakeData exists, if not create it
    On Error Resume Next
    Set wsData = wb.Worksheets("IntakeData")
    If wsData Is Nothing Then
        Set wsData = wb.Worksheets.Add(After:=wsInput)
        wsData.Name = "IntakeData"
        
        ' Setup the data headers
        wsData.Range("A1").Value = "Entry ID"
        For i = 2 To fieldsCount + 1
            If Not IsEmpty(wsDefaults.Cells(i, 1)) Then
                wsData.Cells(1, i).Value = wsDefaults.Cells(i, 1).Value
            End If
        Next i
        
        wsData.Range("AO1").Value = "Status"
        wsData.Range("AP1").Value = "Review Comments"
        wsData.Range("AQ1").Value = "Reviewer"
        wsData.Range("AR1").Value = "Review Date"
        
        ' Format the headers
        wsData.Range("A1:AR1").Font.Bold = True
        wsData.Range("A1:AR1").Interior.Color = RGB(200, 200, 200)
        
        ' Autofit columns
        wsData.Columns("A:AR").AutoFit
    End If
    On Error GoTo ErrorHandler
    
    ' Initialize worksheet protection
    InitializeWorksheets
    
    MsgBox "Workbook setup completed successfully." & vbNewLine & _
           "All sheets have been created and configured.", vbInformation
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in SetupWorkbook: " & Err.Description, vbCritical
End Sub9").Value = "Priority"
        wsInput.Range("A10").Value = "Attached Files"
        
        ' Format column widths
        wsInput.Columns("A").ColumnWidth = 15
        wsInput.Columns("B").ColumnWidth = 30
        
        ' Add a submit button
        Dim btnSubmit As Button
        Set btnSubmit = wsInput.Buttons.Add(100, 300, 100, 25)
        btnSubmit.Caption = "Submit Form"
        btnSubmit.OnAction = "SubmitIntake"
        
        ' Format the headers
        wsInput.Range("A1:B1").Interior.Color = RGB(200, 200, 200)
        wsInput.Range("A2:A10").Font.Bold = True
    End If
    On Error GoTo ErrorHandler
    
    ' Check if IntakeData exists, if not create it
    On Error Resume Next
    Set wsData = wb.Worksheets("IntakeData")
    If wsData Is Nothing Then
        Set wsData = wb.Worksheets.Add(After:=wsInput)
        wsData.Name = "IntakeData"
        
        ' Setup the data headers
        wsData.Range("A1").Value = "Entry ID"
        For i = 2 To 10
            If Not IsEmpty(wsInput.Cells(i, 1)) Then
                wsData.Cells(1, i).Value = wsInput.Cells(i, 1).Value
            End If
        Next i
        
        wsData.Range("K1").Value = "Status"
        wsData.Range("L1").Value = "Review Comments"
        wsData.Range("M1").Value = "Reviewer"
        wsData.Range("N1").Value = "Review Date"
        
        ' Format the headers
        wsData.Range("A1:N1").Font.Bold = True
        wsData.Range("A1:N1").Interior.Color = RGB(200, 200, 200)
        
        ' Autofit columns
        wsData.Columns("A:N").AutoFit
    End If
    On Error GoTo ErrorHandler
    
    ' Create other sheets if needed
    CreateDefaultValuesSheet
    CreateSettingsSheet
    
    ' Initialize worksheet protection
    InitializeWorksheets
    
    MsgBox "Workbook setup completed successfully.", vbInformation
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in SetupWorkbook: " & Err.Description, vbCritical
End Sub

' ' Function to create DefaultValues sheet if it doesn't exist
Public Sub CreateDefaultValuesSheet()
    On Error Resume Next
    
    Dim wsDefaults As Worksheet
    Dim wsInput As Worksheet
    Dim i As Integer
    
    ' Check if DefaultValues sheet already exists
    Set wsDefaults = ThisWorkbook.Worksheets("DefaultValues")
    
    If wsDefaults Is Nothing Then
        ' Create new DefaultValues sheet
        Set wsDefaults = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsDefaults.Name = "DefaultValues"
        
        ' Set up header
        wsDefaults.Range("A1").Value = "Field Name"
        wsDefaults.Range("B1").Value = "Default Value"
        wsDefaults.Range("A1:B1").Font.Bold = True
        
        ' Copy field names from IntakeForm
        Set wsInput = ThisWorkbook.Worksheets("IntakeForm")
        
        For i = 2 To 40  ' Updated range to 40
            If Not IsEmpty(wsInput.Cells(i, 1)) Then
                wsDefaults.Cells(i, 1).Value = wsInput.Cells(i, 1).Value
                
                ' Copy current values as defaults (optional)
                If Not IsEmpty(wsInput.Cells(i, 2)) Then
                    wsDefaults.Cells(i, 2).Value = wsInput.Cells(i, 2).Value
                End If
            End If
        Next i
        
        ' Format the sheet
        wsDefaults.Columns("A:B").AutoFit
        
        MsgBox "DefaultValues sheet has been created." & vbNewLine & _
               "You can now enter default values for the form fields.", vbInformation
    Else
        MsgBox "DefaultValues sheet already exists.", vbInformation
    End If
End Sub
