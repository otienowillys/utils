'==============================================================================
' Intake Form Management System
' Version: 2.0
' Author: v0
' Last Updated: 2/28/2025
'==============================================================================
' A comprehensive system for managing intake forms with advanced features:
' - Modern UI with visual indicators
' - Robust email notifications with HTML templates
' - Advanced validation and error handling
' - Dashboard analytics
' - Export capabilities
'==============================================================================

Option Explicit

'------------------------------------------------------------------------------
' CONSTANTS AND ENUMERATIONS
'------------------------------------------------------------------------------
' Status constants with color codes
Private Const STATUS_PENDING As String = "Pending Review"
Private Const STATUS_APPROVED As String = "Approved"
Private Const STATUS_REJECTED As String = "Rejected"
Private Const STATUS_ARCHIVED As String = "Archived"

' Color constants for UI elements
Private Const COLOR_PRIMARY As Long = &H006EB6     ' Blue
Private Const COLOR_SUCCESS As Long = &H4CAF50     ' Green
Private Const COLOR_WARNING As Long = &HFFC107     ' Yellow
Private Const COLOR_DANGER As Long = &H0000FF      ' Red
Private Const COLOR_INFO As Long = &HE2A929        ' Light Blue
Private Const COLOR_LIGHT As Long = &HEEEEEE       ' Light Gray
Private Const COLOR_DARK As Long = &H333333        ' Dark Gray

' Sheet names
Private Const SHEET_INTAKE_FORM As String = "IntakeForm"
Private Const SHEET_INTAKE_DATA As String = "IntakeData"
Private Const SHEET_SETTINGS As String = "Settings"
Private Const SHEET_DEFAULTS As String = "DefaultValues"
Private Const SHEET_DASHBOARD As String = "Dashboard"

' Email template types
Private Enum EmailTemplateType
    etSubmission = 1
    etReview = 2
    etReminder = 3
    etSummary = 4
End Enum

' User roles
Private Enum UserRole
    urViewer = 1
    urSubmitter = 2
    urReviewer = 3
    urAdmin = 4
End Enum

'------------------------------------------------------------------------------
' TYPE DEFINITIONS
'------------------------------------------------------------------------------
' Form field type definition
Private Type FormField
    Name As String
    Value As Variant
    Required As Boolean
    FieldType As String
    ValidationRule As String
End Type

' User type definition
Private Type UserInfo
    Username As String
    DisplayName As String
    Email As String
    Role As UserRole
    LastLogin As Date
End Type

' Current user information
Private CurrentUser As UserInfo

'------------------------------------------------------------------------------
' MAIN FORM SUBMISSION FUNCTION
'------------------------------------------------------------------------------
Public Sub SubmitIntake()
    On Error GoTo ErrorHandler
    
    ' Show progress indicator
    ShowProgressDialog "Submitting form...", 0
    
    Dim wsInput As Worksheet
    Dim wsData As Worksheet
    Dim entryId As Long
    Dim emailSent As Boolean
    Dim formFields() As FormField
    Dim validationResult As Boolean
    
    ' Initialize worksheets
    Set wsInput = ThisWorkbook.Worksheets(SHEET_INTAKE_FORM)
    Set wsData = ThisWorkbook.Worksheets(SHEET_INTAKE_DATA)
    
    ' Update progress
    ShowProgressDialog "Validating form...", 20
    
    ' Load and validate form fields
    formFields = LoadFormFields(wsInput)
    validationResult = ValidateFormFields(formFields)
    
    If Not validationResult Then
        HideProgressDialog
        Exit Sub
    End If
    
    ' Update progress
    ShowProgressDialog "Generating entry ID...", 40
    
    ' Get next entry ID
    entryId = GetNextEntryId(wsData)
    
    ' Update progress
    ShowProgressDialog "Saving form data...", 60
    
    ' Save form data
    SaveFormData wsInput, wsData, entryId, formFields
    
    ' Update progress
    ShowProgressDialog "Sending email notification...", 80
    
    ' Send email notification
    emailSent = SendEmail(wsInput, entryId, etSubmission)
    
    ' Update progress
    ShowProgressDialog "Finalizing submission...", 90
    
    ' Clear form and format data sheet
    ClearForm wsInput
    FormatDataSheet wsData
    
    ' Update dashboard
    UpdateDashboard
    
    ' Hide progress dialog
    HideProgressDialog
    
    ' Show success message with animation
    Dim successMsg As String
    If emailSent Then
        successMsg = "Form submitted successfully and email sent!" & vbNewLine & "The submission is now pending review."
        ShowAnimatedMessage successMsg, "Success", vbInformation
    Else
        successMsg = "Form submitted successfully, but email could not be sent. The data has been saved." & vbNewLine & "The submission is now pending review."
        ShowAnimatedMessage successMsg, "Success with Warning", vbInformation
    End If
    
    ' Log the activity
    LogActivity "Form submitted", "Entry ID: " & entryId
    
    Exit Sub
    
ErrorHandler:
    HideProgressDialog
    ShowErrorMessage "SubmitIntake", Err.Number, Err.Description
End Sub

'------------------------------------------------------------------------------
' FORM VALIDATION FUNCTIONS
'------------------------------------------------------------------------------
' Function to load form fields from the worksheet
Private Function LoadFormFields(ws As Worksheet) As FormField()
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long, fieldCount As Long
    Dim fields() As FormField
    
    ' Find the last row with field names
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    ' Count valid fields
    fieldCount = 0
    For i = 2 To lastRow
        If Not IsEmpty(ws.Cells(i, 1)) Then
            fieldCount = fieldCount + 1
        End If
    Next i
    
    ' Resize array to hold all fields
    ReDim fields(1 To fieldCount)
    
    ' Load fields
    fieldCount = 0
    For i = 2 To lastRow
        If Not IsEmpty(ws.Cells(i, 1)) Then
            fieldCount = fieldCount + 1
            
            ' Load field properties
            fields(fieldCount).Name = ws.Cells(i, 1).Value
            fields(fieldCount).Value = ws.Cells(i, 2).Value
            
            ' Check if field is required (indicated by * in name)
            fields(fieldCount).Required = (InStr(fields(fieldCount).Name, "*") > 0)
            
            ' Determine field type based on cell format or validation
            fields(fieldCount).FieldType = DetermineFieldType(ws.Cells(i, 2))
            
            ' Get validation rule if any
            If ws.Cells(i, 2).Validation.Type <> xlValidateNone Then
                fields(fieldCount).ValidationRule = GetValidationRule(ws.Cells(i, 2).Validation)
            End If
        End If
    Next i
    
    LoadFormFields = fields
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "LoadFormFields", Err.Number, Err.Description
    ReDim fields(1 To 1)
    LoadFormFields = fields
End Function

' Function to determine field type based on cell format
Private Function DetermineFieldType(cell As Range) As String
    On Error Resume Next
    
    ' Check for date format
    If cell.NumberFormat Like "*d*m*y*" Or cell.NumberFormat Like "*m*d*y*" Or cell.NumberFormat Like "*y*m*d*" Then
        DetermineFieldType = "Date"
        Exit Function
    End If
    
    ' Check for number format
    If cell.NumberFormat Like "0*" Or cell.NumberFormat Like "#*" Or cell.NumberFormat Like "$*" Then
        DetermineFieldType = "Number"
        Exit Function
    End If
    
    ' Check for dropdown validation
    If cell.Validation.Type = xlValidateList Then
        DetermineFieldType = "Dropdown"
        Exit Function
    End If
    
    ' Default to text
    DetermineFieldType = "Text"
End Function

' Function to get validation rule as string
Private Function GetValidationRule(validation As Validation) As String
    On Error Resume Next
    
    Select Case validation.Type
        Case xlValidateList
            GetValidationRule = "List: " & validation.Formula1
        Case xlValidateDecimal, xlValidateWholeNumber
            GetValidationRule = "Range: " & validation.Formula1 & " to " & validation.Formula2
        Case xlValidateDate
            GetValidationRule = "Date: " & validation.Formula1 & " to " & validation.Formula2
        Case xlValidateTextLength
            GetValidationRule = "Length: " & validation.Formula1 & " to " & validation.Formula2
        Case xlValidateCustom
            GetValidationRule = "Custom: " & validation.Formula1
        Case Else
            GetValidationRule = ""
    End Select
End Function

' Function to validate form fields
Private Function ValidateFormFields(fields() As FormField) As Boolean
    On Error GoTo ErrorHandler
    
    Dim i As Long
    Dim errorMessages As String
    Dim hasErrors As Boolean
    
    hasErrors = False
    errorMessages = "Please correct the following issues:" & vbNewLine & vbNewLine
    
    ' Check each field
    For i = LBound(fields) To UBound(fields)
        ' Check required fields
        If fields(i).Required And (IsEmpty(fields(i).Value) Or Trim(CStr(fields(i).Value)) = "") Then
            errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " is required" & vbNewLine
            hasErrors = True
            Continue For
        End If
        
        ' Skip validation for empty non-required fields
        If IsEmpty(fields(i).Value) Or Trim(CStr(fields(i).Value)) = "" Then
            Continue For
        End If
        
        ' Validate based on field type
        Select Case fields(i).FieldType
            Case "Date"
                If Not IsDate(fields(i).Value) Then
                    errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " must be a valid date" & vbNewLine
                    hasErrors = True
                End If
                
            Case "Number"
                If Not IsNumeric(fields(i).Value) Then
                    errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " must be a number" & vbNewLine
                    hasErrors = True
                End If
                
            Case "Email"
                If Not IsValidEmail(CStr(fields(i).Value)) Then
                    errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " must be a valid email address" & vbNewLine
                    hasErrors = True
                End If
        End Select
        
        ' Apply custom validation rules if any
        If fields(i).ValidationRule <> "" And Not ApplyCustomValidation(fields(i).Value, fields(i).ValidationRule) Then
            errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " does not meet validation requirements" & vbNewLine
            hasErrors = True
        End If
    Next i
    
    ' Show error message if validation failed
    If hasErrors Then
        ShowValidationErrors errorMessages
        ValidateFormFields = False
    Else
        ValidateFormFields = True
    End If
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "ValidateFormFields", Err.Number, Err.Description
    ValidateFormFields = False
End Function

' Function to validate email format
Private Function IsValidEmail(email As String) As Boolean
    On Error Resume Next
    
    Dim regex As Object
    Set regex = CreateObject("VBScript.RegExp")
    
    With regex
        .Pattern = "^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$"
        .Global = False
        .IgnoreCase = True
        IsValidEmail = .Test(email)
    End With
    
    Set regex = Nothing
End Function

' Function to apply custom validation rules
Private Function ApplyCustomValidation(value As Variant, rule As String) As Boolean
    On Error Resume Next
    
    ' Default to true if no rule
    If rule = "" Then
        ApplyCustomValidation = True
        Exit Function
    End If
    
    ' Parse rule type
    Dim ruleType As String
    Dim ruleParams As String
    
    ruleType = Left(rule, InStr(rule, ":") - 1)
    ruleParams = Mid(rule, InStr(rule, ":") + 1)
    
    ' Apply rule based on type
    Select Case ruleType
        Case "List"
            ' Check if value is in list
            ApplyCustomValidation = (InStr(1, ruleParams, CStr(value), vbTextCompare) > 0)
            
        Case "Range"
            ' Check if value is in range
            Dim minVal As Variant, maxVal As Variant
            minVal = Trim(Left(ruleParams, InStr(ruleParams, "to") - 1))
            maxVal = Trim(Mid(ruleParams, InStr(ruleParams, "to") + 2))
            
            If IsNumeric(value) And IsNumeric(minVal) And IsNumeric(maxVal) Then
                ApplyCustomValidation = (CDbl(value) >= CDbl(minVal) And CDbl(value) <= CDbl(maxVal))
            Else
                ApplyCustomValidation = False
            End If
            
        Case "Length"
            ' Check if text length is in range
            Dim minLen As Long, maxLen As Long
            minLen = CLng(Trim(Left(ruleParams, InStr(ruleParams, "to") - 1)))
            maxLen = CLng(Trim(Mid(ruleParams, InStr(ruleParams, "to") + 2)))
            
            ApplyCustomValidation = (Len(CStr(value)) >= minLen And Len(CStr(value)) <= maxLen)
            
        Case "Custom"
            ' Evaluate custom formula
            ' This is risky but allows for complex validation
            On Error Resume Next
            ApplyCustomValidation = Evaluate(Replace(ruleParams, "value", CStr(value)))
            If Err.Number <> 0 Then ApplyCustomValidation = False
            On Error GoTo 0
            
        Case Else
            ApplyCustomValidation = True
    End Select
End Function

' Function to show validation errors with modern UI
Private Sub ShowValidationErrors(errorMessages As String)
    On Error Resume Next
    
    ' Create a UserForm dynamically for better UI
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Validation Errors"
        .Properties("Width") = 400
        .Properties("Height") = 300
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add a label for the error messages
    Dim lbl As Object
    Set lbl = frm.Designer.Controls.Add("Forms.Label.1")
    With lbl
        .Left = 10
        .Top = 10
        .Width = 380
        .Height = 240
        .Caption = errorMessages
        .ForeColor = COLOR_DANGER
        .Font.Bold = True
    End With
    
    ' Add an OK button
    Dim btn As Object
    Set btn = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btn
        .Left = 150
        .Top = 260
        .Width = 100
        .Height = 30
        .Caption = "OK"
        .Default = True
        .Cancel = True
    End With
    
    ' Add code to close the form when the button is clicked
    Dim btnCode As String
    btnCode = "Private Sub CommandButton1_Click()" & vbNewLine & _
              "  Me.Hide" & vbNewLine & _
              "End Sub"
    frm.CodeModule.AddFromString btnCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Sub

'------------------------------------------------------------------------------
' DATA HANDLING FUNCTIONS
'------------------------------------------------------------------------------
' Function to get the next entry ID
Private Function GetNextEntryId(wsData As Worksheet) As Long
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    If lastRow = 1 Then
        GetNextEntryId = 1
    Else
        ' Get the maximum ID value (in case rows were deleted)
        GetNextEntryId = Application.WorksheetFunction.Max(wsData.Range("A2:A" & lastRow)) + 1
    End If
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "GetNextEntryId", Err.Number, Err.Description
    GetNextEntryId = 1
End Function

' Subroutine to save form data
Private Sub SaveFormData(wsInput As Worksheet, wsData As Worksheet, entryId As Long, formFields() As FormField)
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long, j As Long
    Dim headerRow As Range
    
    ' Get the header row
    Set headerRow = wsData.Range("1:1")
    
    ' Find the last row
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row + 1
    
    ' Save Entry ID
    wsData.Cells(lastRow, "A").Value = entryId
    
    ' Save form data
    For i = LBound(formFields) To UBound(formFields)
        ' Find the column with matching header
        For j = 2 To headerRow.Cells.Count
            If headerRow.Cells(1, j).Value = formFields(i).Name Then
                wsData.Cells(lastRow, j).Value = formFields(i).Value
                Exit For
            End If
        Next j
        
        ' If header not found, add it
        If j > headerRow.Cells.Count Then
            wsData.Cells(1, j).Value = formFields(i).Name
            wsData.Cells(lastRow, j).Value = formFields(i).Value
        End If
    Next i
    
    ' Add metadata columns if they don't exist
    AddMetadataColumns wsData, headerRow
    
    ' Add status and metadata
    wsData.Cells(lastRow, GetColumnIndex(wsData, "Status")).Value = STATUS_PENDING
    wsData.Cells(lastRow, GetColumnIndex(wsData, "Submission Date")).Value = Now()
    wsData.Cells(lastRow, GetColumnIndex(wsData, "Submitter")).Value = GetCurrentUser()
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "SaveFormData", Err.Number, Err.Description
End Sub

' Function to add metadata columns if they don't exist
Private Sub AddMetadataColumns(wsData As Worksheet, headerRow As Range)
    On Error Resume Next
    
    Dim lastCol As Long
    lastCol = headerRow.Cells.Count
    
    ' Add Status column if it doesn't exist
    If GetColumnIndex(wsData, "Status") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Status"
    End If
    
    ' Add Submission Date column if it doesn't exist
    If GetColumnIndex(wsData, "Submission Date") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Submission Date"
    End If
    
    ' Add Submitter column if it doesn't exist
    If GetColumnIndex(wsData, "Submitter") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Submitter"
    End If
    
    ' Add Review Comments column if it doesn't exist
    If GetColumnIndex(wsData, "Review Comments") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Review Comments"
    End If
    
    ' Add Reviewer column if it doesn't exist
    If GetColumnIndex(wsData, "Reviewer") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Reviewer"
    End If
    
    ' Add Review Date column if it doesn't exist
    If GetColumnIndex(wsData, "Review Date") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Review Date"
    End If
End Sub

' Function to get column index by header name
Private Function GetColumnIndex(ws As Worksheet, headerName As String) As Long
    On Error Resume Next
    
    Dim headerRow As Range
    Dim cell As Range
    
    Set headerRow = ws.Range("1:1")
    
    For Each cell In headerRow.Cells
        If cell.Value = headerName Then
            GetColumnIndex = cell.Column
            Exit Function
        End If
    Next cell
    
    GetColumnIndex = 0
End Function

' Function to get current user name
Private Function GetCurrentUser() As String
    On Error Resume Next
    
    ' Try to get Windows username
    GetCurrentUser = Environ("USERNAME")
    
    ' If that fails, use the name from Excel
    If GetCurrentUser = "" Then
        GetCurrentUser = Application.UserName
    End If
    
    ' If that also fails, use a default
    If GetCurrentUser = "" Then
        GetCurrentUser = "Unknown User"
    End If
End Function

'------------------------------------------------------------------------------
' EMAIL FUNCTIONS
'------------------------------------------------------------------------------
' Function to send email
Private Function SendEmail(wsInput As Worksheet, entryId As Long, templateType As EmailTemplateType, Optional reviewData As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    Dim outlookApp As Object
    Dim mailItem As Object
    Dim htmlBody As String
    Dim userResponse As VbMsgBoxResult
    Dim recipientEmail As String
    Dim emailSubject As String
    
    ' Try to use Outlook
    Set outlookApp = GetOutlookApp()
    
    ' Get recipient email from settings
    recipientEmail = GetSetting("Recipient Email", "recipient@example.com")
    
    If Not outlookApp Is Nothing Then
        Set mailItem = outlookApp.CreateItem(0)  ' 0 = olMailItem
        
        With mailItem
            .To = recipientEmail
            
            ' Set subject and build HTML body based on template type
            Select Case templateType
                Case etSubmission
                    emailSubject = "New Intake Form Submission - Entry ID: " & entryId
                    htmlBody = BuildSubmissionEmailHTML(wsInput, entryId)
                    
                Case etReview
                    emailSubject = "Intake Form Review - Entry ID: " & entryId & " - " & reviewData("Status")
                    htmlBody = BuildReviewEmailHTML(reviewData("Worksheet"), reviewData("RowIndex"), entryId, _
                                                   reviewData("Status"), reviewData("Comments"), reviewData("Reviewer"))
                    
                Case etReminder
                    emailSubject = "Reminder: Pending Intake Forms Require Review"
                    htmlBody = BuildReminderEmailHTML(reviewData)
                    
                Case etSummary
                    emailSubject = "Weekly Intake Form Summary Report"
                    htmlBody = BuildSummaryEmailHTML(reviewData)
            End Select
            
            .Subject = emailSubject
            .HTMLBody = htmlBody
            
            ' Optional: Add attachments if needed
            If templateType = etSummary And Not IsMissing(reviewData) Then
                If reviewData("IncludeAttachment") Then
                    .Attachments.Add reviewData("AttachmentPath")
                End If
            End If
            
            ' Ask user for confirmation with modern dialog
            userResponse = ShowEmailPreview(.To, .Subject, htmlBody)
            
            If userResponse = vbYes Then
                .Send
                SendEmail = True
            Else
                SendEmail = False
            End If
        End With
        
        Set mailItem = Nothing
    Else
        ' Fallback if Outlook is not available
        ShowModernDialog "Email Error", "Outlook is not available. Please make sure Outlook is installed and running.", "warning"
        SendEmail = False
    End If
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "SendEmail", Err.Number, Err.Description
    SendEmail = False
End Function

' Function to get or create Outlook application object
Private Function GetOutlookApp() As Object
    On Error Resume Next
    Set GetOutlookApp = GetObject(, "Outlook.Application")
    If GetOutlookApp Is Nothing Then
        Set GetOutlookApp = CreateObject("Outlook.Application")
    End If
    On Error GoTo 0
End Function

' Function to show email preview with modern UI
Private Function ShowEmailPreview(recipientEmail As String, subject As String, htmlBody As String) As VbMsgBoxResult
    On Error Resume Next
    
    ' Create a UserForm dynamically for better UI
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Email Preview"
        .Properties("Width") = 600
        .Properties("Height") = 500
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add recipient label
    Dim lblTo As Object
    Set lblTo = frm.Designer.Controls.Add("Forms.Label.1")
    With lblTo
        .Left = 10
        .Top = 10
        .Width = 80
        .Height = 20
        .Caption = "To:"
        .Font.Bold = True
    End With
    
    ' Add recipient text
    Dim txtTo As Object
    Set txtTo = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtTo
        .Left = 100
        .Top = 10
        .Width = 480
        .Height = 20
        .Text = recipientEmail
        .Enabled = False
    End With
    
    ' Add subject label
    Dim lblSubject As Object
    Set lblSubject = frm.Designer.Controls.Add("Forms.Label.1")
    With lblSubject
        .Left = 10
        .Top = 40
        .Width = 80
        .Height = 20
        .Caption = "Subject:"
        .Font.Bold = True
    End With
    
    ' Add subject text
    Dim txtSubject As Object
    Set txtSubject = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtSubject
        .Left = 100
        .Top = 40
        .Width = 480
        .Height = 20
        .Text = subject
        .Enabled = False
    End With
    
    ' Add preview label
    Dim lblPreview As Object
    Set lblPreview = frm.Designer.Controls.Add("Forms.Label.1")
    With lblPreview
        .Left = 10
        .Top = 70
        .Width = 580
        .Height = 20
        .Caption = "Email Preview:"
        .Font.Bold = True
    End With
    
    ' Add WebBrowser control for HTML preview
    Dim wb As Object
    Set wb = frm.Designer.Controls.Add("Forms.WebBrowser.1")
    With wb
        .Left = 10
        .Top = 100
        .Width = 580
        .Height = 350
    End With
    
    ' Add Send button
    Dim btnSend As Object
    Set btnSend = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnSend
        .Left = 400
        .Top = 460
        .Width = 90
        .Height = 30
        .Caption = "Send"
        .Default = True
    End With
    
    ' Add Cancel button
    Dim btnCancel As Object
    Set btnCancel = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnCancel
        .Left = 500
        .Top = 460
        .Width = 90
        .Height = 30
        .Caption = "Cancel"
        .Cancel = True
    End With
    
    ' Add code to handle buttons and load HTML
    Dim formCode As String
    formCode = "Dim Result As VbMsgBoxResult" & vbNewLine & _
               "Private Sub UserForm_Initialize()" & vbNewLine & _
               "  Me.WebBrowser1.Navigate ""about:blank""" & vbNewLine & _
               "  Me.WebBrowser1.Document.Write """ & Replace(htmlBody, """", """""") & """" & vbNewLine & _
               "  Result = vbCancel" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  Result = vbYes" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton2_Click()" & vbNewLine & _
               "  Result = vbNo" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Get the result
    ShowEmailPreview = ExecuteExcel4Macro("GET(" & frm.Name & "!Result)")
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Function

' Function to build HTML email for submission
Private Function BuildSubmissionEmailHTML(ws As Worksheet, entryId As Long) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim i As Integer
    Dim fieldName As String
    Dim fieldValue As String
    Dim companyName As String
    Dim companyLogo As String
    
    ' Get company info from settings
    companyName = GetSetting("Company Name", "Your Company")
    companyLogo = GetSetting("Company Logo URL", "")
    
    ' Build HTML head section
    html = "<!DOCTYPE html><html lang='en'><head><meta charset='UTF-8'>"
    html = html & "<meta name='viewport' content='width=device-width, initial-scale=1.0'>"
    html = html & "<style>"
    html = html & "body{font-family:'Segoe UI',Arial,sans-serif;line-height:1.6;color:#333;max-width:650px;margin:0 auto;padding:20px;background-color:#f5f5f5}"
    html = html & ".email-container{background-color:#fff;border-radius:8px;box-shadow:0 4px 8px rgba(0,0,0,0.1);padding:30px}"
    html = html & ".header{display:flex;align-items:center;margin-bottom:25px}"
    html = html & ".logo{max-height:60px;margin-right:20px}"
    html = html & "h1{color:#006EB6;font-weight:600;margin-top:0;padding-bottom:15px;border-bottom:2px solid #f0f0f0}"
    html = html & "h2{color:#006EB6;font-weight:500;margin-top:30px;margin-bottom:15px}"
    html = html & ".entry-id{background-color:#006EB6;color:#fff;display:inline-block;padding:8px 15px;font-weight:bold;margin-bottom:20px;border-radius:4px}"
    html = html & ".status-banner{padding:15px;margin:20px 0;border-radius:4px;background-color:#E2F4FF;color:#006EB6;font-weight:500}"
    html = html & "table{width:100%;border-collapse:collapse;margin:25px 0;border-radius:4px;overflow:hidden}"
    html = html & "th{background-color:#006EB6;color:#fff;font-weight:500;text-align:left;padding:12px 15px}"
    html = html & "td{padding:12px 15px;border-bottom:1px solid #f0f0f0}"
    html = html & "tr:last-child td{border-bottom:none}"
    html = html & "tr:nth-child(even){background-color:#f9f9f9}"
    html = html & ".category-cell{font-weight:500}"
    html = html & ".status{padding:5px 10px;font-weight:500;display:inline-block;border-radius:4px}"
    html = html & ".status-pending{background-color:#17a2b8;color:#fff}"
    html = html & ".status-approved{background-color:#4CAF50;color:#fff}"
    html = html & ".status-rejected{background-color:#dc3545;color:#fff}"
    html = html & ".button-container{text-align:center;margin-top:30px}"
    html = html & ".button{background-color:#006EB6;color:#fff;padding:12px 25px;text-decoration:none;font-weight:500;display:inline-block;border-radius:4px;transition:background-color 0.3s}"
    html = html & ".button:hover{background-color:#005a93}"
    html = html & ".footer{margin-top:30px;border-top:2px solid #f0f0f0;padding-top:20px;color:#666;font-size:14px}"
    html = html & "</style></head><body><div class='email-container'>"
    
    ' Add header with logo if available
    If companyLogo <> "" Then
        html = html & "<div class='header'>"
        html = html & "<img src='" & companyLogo & "' alt='" & companyName & " Logo' class='logo'>"
        html = html & "<h1>" & companyName & " - New Intake Form Submission</h1>"
        html = html & "</div>"
    Else
        html = html & "<h1>" & companyName & " - New Intake Form Submission</h1>"
    End If
    
    html = html & "<div class='status-banner'>A new intake form has been submitted and is pending review.</div>"
    html = html & "<div class='entry-id'>Entry ID: " & entryId & "</div>"
    html = html & "<p>The following information was submitted:</p>"
    html = html & "<table><tr><th>Category</th><th>Details</th><th>Status</th></tr>"
    
    ' Loop through form fields
    For i = 2 To 15  ' Adjust the range as needed
        If Not IsEmpty(ws.Cells(i, 1)) Then
            fieldName = ws.Cells(i, 1).Value
            fieldValue = ws.Cells(i, 2).Value
            
            ' Escape HTML special characters
            fieldName = Replace(Replace(Replace(fieldName, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            fieldValue = Replace(Replace(Replace(fieldValue, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            
            html = html & "<tr>"
            html = html & "<td class='category-cell'>" & fieldName & "</td>"
            html = html & "<td>" & fieldValue & "</td>"
            html = html & "<td><div class='status status-pending'>Pending Review</div></td>"
            html = html & "</tr>"
        End If
    Next i
    
    html = html & "</table>"
    html = html & "<div class='button-container'>"
    html = html & "<a href='#' class='button'>View Full Details →</a>"
    html = html & "</div>"
    html = html & "<div class='footer'>"
    html = html & "<p>Thank you for using our intake form system. If you have any questions, please contact support.</p>"
    html = html & "<p>© " & Year(Now()) & " " & companyName & ". All rights reserved.</p>"
    html = html & "</div></div></body></html>"
    
    BuildSubmissionEmailHTML = html
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "BuildSubmissionEmailHTML", Err.Number, Err.Description
    BuildSubmissionEmailHTML = ""
End Function

' Function to build HTML email for review notification
Private Function BuildReviewEmailHTML(wsData As Worksheet, rowIndex As Long, entryId As Long, status As String, comments As String, reviewer As String) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim i As Integer
    Dim fieldName As String
    Dim fieldValue As String
    Dim statusClass As String
    Dim companyName As String
    Dim companyLogo As String
    
    ' Get company info from settings
    companyName = GetSetting("Company Name", "Your Company")
    companyLogo = GetSetting("Company Logo URL", "")
    
    ' Determine status class based on status
    Select Case status
        Case STATUS_APPROVED
            statusClass = "status-approved"
        Case STATUS_REJECTED
            statusClass = "status-rejected"
        Case Else
            statusClass = "status-pending"
    End Select
    
    ' Build HTML head section
    html = "<!DOCTYPE html><html lang='en'><head><meta charset='UTF-8'>"
    html = html & "<meta name='viewport' content='width=device-width, initial-scale=1.0'>"
    html = html & "<style>"
    html = html & "body{font-family:'Segoe UI',Arial,sans-serif;line-height:1.6;color:#333;max-width:650px;margin:0 auto;padding:20px;background-color:#f5f5f5}"
    html = html & ".email-container{background-color:#fff;border-radius:8px;box-shadow:0 4px 8px rgba(0,0,0,0.1);padding:30px}"
    html = html & ".header{display:flex;align-items:center;margin-bottom:25px}"
    html = html & ".logo{max-height:60px;margin-right:20px}"
    html = html & "h1{color:#006EB6;font-weight:600;margin-top:0;padding-bottom:15px;border-bottom:2px solid #f0f0f0}"
    html = html & "h2{color:#006EB6;font-weight:500;margin-top:30px;margin-bottom:15px}"
    html = html & ".entry-id{background-color:#006EB6;color:#fff;display:inline-block;padding:8px 15px;font-weight:bold;margin-bottom:20px;border-radius:4px}"
    html = html & ".status-banner{padding:15px;margin:20px 0;border-radius:4px;font-weight:500}"
    html = html & ".status-banner.approved{background-color:#E8F5E9;color:#4CAF50}"
    html = html & ".status-banner.rejected{background-color:#FFEBEE;color:#dc3545}"
    html = html & ".status-banner.pending{background-color:#E2F4FF;color:#006EB6}"
    html = html & ".review-boxes{display:flex;margin:25px 0;gap:20px}"
    html = html & ".review-box{border:1px solid #f0f0f0;border-radius:4px;padding:15px;flex:1}"
    html = html & ".review-box h3{color:#006EB6;margin-top:0}"
    html = html & "table{width:100%;border-collapse:collapse;margin:25px 0;border-radius:4px;overflow:hidden}"
    html = html & "th{background-color:#006EB6;color:#fff;font-weight:500;text-align:left;padding:12px 15px}"
    html = html & "td{padding:12px 15px;border-bottom:1px solid #f0f0f0}"
    html = html & "tr:last-child td{border-bottom:none}"
    html = html & "tr:nth-child(even){background-color:#f9f9f9}"
    html = html & ".category-cell{font-weight:500}"
    html = html & ".status{padding:5px 10px;font-weight:500;display:inline-block;border-radius:4px}"
    html = html & ".status-pending{background-color:#17a2b8;color:#fff}"
    html = html & ".status-approved{background-color:#4CAF50;color:#fff}"
    html = html & ".status-rejected{background-color:#dc3545;color:#fff}"
    html = html & ".button-container{text-align:center;margin-top:30px}"
    html = html & ".button{background-color:#006EB6;color:#fff;padding:12px 25px;text-decoration:none;font-weight:500;display:inline-block;border-radius:4px;transition:background-color 0.3s}"
    html = html & ".button:hover{background-color:#005a93}"
    html = html & ".footer{margin-top:30px;border-top:2px solid #f0f0f0;padding-top:20px;color:#666;font-size:14px}"
    html = html & "</style></head><body><div class='email-container'>"
    
    ' Add header with logo if available
    If companyLogo <> "" Then
        html = html & "<div class='header'>"
        html = html & "<img src='" & companyLogo & "' alt='" & companyName & " Logo' class='logo'>"
        html = html & "<h1>" & companyName & " - Intake Form Review</h1>"
        html = html & "</div>"
    Else
        html = html & "<h1>" & companyName & " - Intake Form Review</h1>"
    End If
    
    ' Status banner
    Select Case status
        Case STATUS_APPROVED
            html = html & "<div class='status-banner approved'>This submission has been approved.</div>"
        Case STATUS_REJECTED
            html = html & "<div class='status-banner rejected'>This submission has been rejected.</div>"
        Case Else
            html = html & "<div class='status-banner pending'>This submission is pending review.</div>"
    End Select
    
    html = html & "<div class='entry-id'>Entry ID: " & entryId & "</div>"
    
    ' Review details
    html = html & "<div class='review-boxes'>"
    html = html & "<div class='review-box'>"
    html = html & "<h3>Review Details</h3>"
    html = html & "<p><strong>Status:</strong> <span class='status " & statusClass & "'>" & status & "</span></p>"
    html = html & "<p><strong>Reviewer:</strong> " & reviewer & "</p>"
    html = html & "<p><strong>Date:</strong> " & Format(wsData.Cells(rowIndex, GetColumnIndex(wsData, "Review Date")).Value, "yyyy-mm-dd") & "</p>"
    html = html & "</div>"
    html = html & "<div class='review-box'>"
    html = html & "<h3>Review Comments</h3>"
    
    If comments <> "" Then
        html = html & "<p>" & Replace(Replace(Replace(comments, "&", "&amp;"), "<", "&lt;"), ">", "&gt;") & "</p>"
    Else
        html = html & "<p>No additional comments provided.</p>"
    End If
    
    html = html & "</div></div>"
    
    ' Submission details
    html = html & "<h2>Submission Details</h2>"
    html = html & "<table><tr><th>Category</th><th>Details</th><th>Status</th></tr>"
    
    ' Loop through form data
    For i = 1 To 10  ' Adjust as needed
        If Not IsEmpty(wsData.Cells(1, i)) And Not IsEmpty(wsData.Cells(rowIndex, i)) Then
            fieldName = wsData.Cells(1, i).Value
            fieldValue = wsData.Cells(rowIndex, i).Value
            
            ' Skip metadata columns
            If fieldName <> "Status" And fieldName <> "Review Comments" And _
               fieldName <> "Reviewer" And fieldName <> "Review Date" Then
                
                ' Escape HTML special characters
                fieldName = Replace(Replace(Replace(fieldName, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
                If IsDate(fieldValue) Then
                    fieldValue = Format(fieldValue, "yyyy-mm-dd")
                Else
                    fieldValue = Replace(Replace(Replace(CStr(fieldValue), "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
                End If
                
                html = html & "<tr>"
                html = html & "<td class='category-cell'>" & fieldName & "</td>"
                html = html & "<td>" & fieldValue & "</td>"
                html = html & "<td><div class='status " & statusClass & "'>" & status & "</div></td>"
                html = html & "</tr>"
            End If
        End If
    Next i
    
    html = html & "</table>"
    html = html & "<div class='button-container'>"
    html = html & "<a href='#' class='button'>View Full Details →</a>"
    html = html & "</div>"
    html = html & "<div class='footer'>"
    html = html & "<p>Thank you for using our intake form system. If you have any questions, please contact support.</p>"
    html = html & "<p>© " & Year(Now()) & " " & companyName & ". All rights reserved.</p>"
    html = html & "</div></div></body></html>"
    
    BuildReviewEmailHTML = html
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "BuildReviewEmailHTML", Err.Number, Err.Description
    BuildReviewEmailHTML = ""
End Function

' Function to build HTML email for reminder notifications
Private Function BuildReminderEmailHTML(reminderData As Variant) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim companyName As String
    Dim pendingCount As Long
    
    ' Get company info from settings
    companyName = GetSetting("Company Name", "Your Company")
    pendingCount = reminderData("PendingCount")
    
    ' Build HTML head section with simplified CSS
    html = "<!DOCTYPE html><html lang='en'><head><meta charset='UTF-8'>"
    html = html & "<meta name='viewport' content='width=device-width, initial-scale=1.0'>"
    html = html & "<style>"
    html = html & "body{font-family:'Segoe UI',Arial,sans-serif;line-height:1.6;color:#333;max-width:650px;margin:0 auto;padding:20px;background-color:#f5f5f5}"
    html = html & ".email-container{background-color:#fff;border-radius:8px;box-shadow:0 4px 8px rgba(0,0,0,0.1);padding:30px}"
    html = html & "h1{color:#006EB6;font-weight:600;margin-top:0;padding-bottom:15px;border-bottom:2px solid #f0f0f0}"
    html = html & ".alert{background-color:#FFF3CD;color:#856404;padding:15px;margin:20px 0;border-radius:4px;font-weight:500}"
    html = html & ".count{font-size:24px;font-weight:bold;color:#006EB6;text-align:center;margin:20px 0}"
    html = html & ".button-container{text-align:center;margin-top:30px}"
    html = html & ".button{background-color:#006EB6;color:#fff;padding:12px 25px;text-decoration:none;font-weight:500;display:inline-block;border-radius:4px}"
    html = html & ".footer{margin-top:30px;border-top:2px solid #f0f0f0;padding-top:20px;color:#666;font-size:14px}"
    html = html & "</style></head><body><div class='email-container'>"
    
    ' Email content
    html = html & "<h1>" & companyName & " - Pending Submissions Reminder</h1>"
    html = html & "<div class='alert'>This is a reminder that there are submissions waiting for your review.</div>"
    html = html & "<p>There are currently:</p>"
    html = html & "<div class='count'>" & pendingCount & " pending submission(s)</div>"
    html = html & "<p>Please review these submissions at your earliest convenience to ensure timely processing.</p>"
    html = html & "<div class='button-container'>"
    html = html & "<a href='#' class='button'>Review Submissions Now</a>"
    html = html & "</div>"
    html = html & "<div class='footer'>"
    html = html & "<p>Thank you for using our intake form system. If you have any questions, please contact support.</p>"
    html = html & "<p>© " & Year(Now()) & " " & companyName & ". All rights reserved.</p>"
    html = html & "</div></div></body></html>"
    
    BuildReminderEmailHTML = html
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "BuildReminderEmailHTML", Err.Number, Err.Description
    BuildReminderEmailHTML = ""
End Function

' Function to build HTML email for summary reports
Private Function BuildSummaryEmailHTML(summaryData As Variant) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim companyName As String
    Dim startDate As Date
    Dim endDate As Date
    Dim totalCount As Long
    Dim approvedCount As Long
    Dim rejectedCount As Long
    Dim pendingCount As Long
    
    ' Get company info and summary data
    companyName = GetSetting("Company Name", "Your Company")
    startDate = summaryData("StartDate")
    endDate = summaryData("EndDate")
    totalCount = summaryData("TotalCount")
    approvedCount = summaryData("ApprovedCount")
    rejectedCount = summaryData("RejectedCount")
    pendingCount = summaryData("PendingCount")
    
    ' Build HTML head section with simplified CSS
    html = "<!DOCTYPE html><html lang='en'><head><meta charset='UTF-8'>"
    html = html & "<meta name='viewport' content='width=device-width, initial-scale=1.0'>"
    html = html & "<style>"
    html = html & "body{font-family:'Segoe UI',Arial,sans-serif;line-height:1.6;color:#333;max-width:650px;margin:0 auto;padding:20px;background-color:#f5f5f5}"
    html = html & ".email-container{background-color:#fff;border-radius:8px;box-shadow:0 4px 8px rgba(0,0,0,0.1);padding:30px}"
    html = html & "h1,h2{color:#006EB6;font-weight:600;margin-top:0}"
    html = html & "h1{padding-bottom:15px;border-bottom:2px solid #f0f0f0}"
    html = html & ".date-range{background-color:#E2F4FF;color:#006EB6;padding:10px;border-radius:4px;font-weight:500;text-align:center;margin:20px 0}"
    html = html & ".stats{display:flex;justify-content:space-between;margin:30px 0;text-align:center}"
    html = html & ".stat-box{flex:1;padding:15px;border-radius:4px;margin:0 5px}"
    html = html & ".stat-box.total{background-color:#E2F4FF;color:#006EB6}"
    html = html & ".stat-box.approved{background-color:#E8F5E9;color:#4CAF50}"
    html = html & ".stat-box.rejected{background-color:#FFEBEE;color:#dc3545}"
    html = html & ".stat-box.pending{background-color:#FFF3CD;color:#856404}"
    html = html & ".stat-number{font-size:24px;font-weight:bold;margin:10px 0}"
    html = html & ".button-container{text-align:center;margin-top:30px}"
    html = html & ".button{background-color:#006EB6;color:#fff;padding:12px 25px;text-decoration:none;font-weight:500;display:inline-block;border-radius:4px}"
    html = html & ".footer{margin-top:30px;border-top:2px solid #f0f0f0;padding-top:20px;color:#666;font-size:14px}"
    html = html & "</style></head><body><div class='email-container'>"
    
    ' Email content
    html = html & "<h1>" & companyName & " - Weekly Intake Form Summary</h1>"
    html = html & "<div class='date-range'>Report Period: " & Format(startDate, "mmm dd, yyyy") & " - " & Format(endDate, "mmm dd, yyyy") & "</div>"
    html = html & "<h2>Summary Statistics</h2>"
    html = html & "<div class='stats'>"
    html = html & "<div class='stat-box total'><div>Total</div><div class='stat-number'>" & totalCount & "</div></div>"
    html = html & "<div class='stat-box approved'><div>Approved</div><div class='stat-number'>" & approvedCount & "</div></div>"
    html = html & "<div class='stat-box rejected'><div>Rejected</div><div class='stat-number'>" & rejectedCount & "</div></div>"
    html = html & "<div class='stat-box pending'><div>Pending</div><div class='stat-number'>" & pendingCount & "</div></div>"
    html = html & "</div>"
    html = html & "<p>This is an automated summary of intake form activity for the past week. Please review the attached report for detailed information.</p>"
    html = html & "<div class='button-container'>"
    html = html & "<a href='#' class='button'>View Full Report</a>"
    html = html & "</div>"
    html = html & "<div class='footer'>"
    html = html & "<p>Thank you for using our intake form system. If you have any questions, please contact support.</p>"
    html = html & "<p>© " & Year(Now()) & " " & companyName & ". All rights reserved.</p>"
    html = html & "</div></div></body></html>"
    
    BuildSummaryEmailHTML = html
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "BuildSummaryEmailHTML", Err.Number, Err.Description
    BuildSummaryEmailHTML = ""
End Function

'------------------------------------------------------------------------------
' UI ENHANCEMENT FUNCTIONS
'------------------------------------------------------------------------------
' Function to show progress dialog
Private Sub ShowProgressDialog(message As String, percentComplete As Integer)
    On Error Resume Next
    
    ' Create a UserForm dynamically for progress indicator
    Dim frm As Object
    
    ' Check if form already exists
    On Error Resume Next
    Set frm = ThisWorkbook.VBProject.VBComponents("frmProgress")
    On Error GoTo 0
    
    If frm Is Nothing Then
        ' Create new form
        Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
        frm.Name = "frmProgress"
        
        ' Set form properties
        With frm
            .Properties("Caption") = "Processing"
            .Properties("Width") = 400
            .Properties("Height") = 100
            .Properties("StartUpPosition") = 1 ' CenterOwner
        End With
        
        ' Add message label
        Dim lblMessage As Object
        Set lblMessage = frm.Designer.Controls.Add("Forms.Label.1")
        With lblMessage
            .Name = "lblMessage"
            .Left = 10
            .Top = 10
            .Width = 380
            .Height = 20
        End With
        
        ' Add progress bar (using a frame with colored background)
        Dim fraProgress As Object
        Set fraProgress = frm.Designer.Controls.Add("Forms.Frame.1")
        With fraProgress
            .Name = "fraProgressBg"
            .Left = 10
            .Top = 40
            .Width = 380
            .Height = 20
            .BorderStyle = 0 ' None
            .BackColor = COLOR_LIGHT
        End With
        
        Dim fraProgressBar As Object
        Set fraProgressBar = frm.Designer.Controls.Add("Forms.Frame.1")
        With fraProgressBar
            .Name = "fraProgressBar"
            .Left = 10
            .Top = 40
            .Width = 0
            .Height = 20
            .BorderStyle = 0 ' None
            .BackColor = COLOR_PRIMARY
        End With
        
        ' Add percentage label
        Dim lblPercent As Object
        Set lblPercent = frm.Designer.Controls.Add("Forms.Label.1")
        With lblPercent
            .Name = "lblPercent"
            .Left = 10
            .Top = 70
            .Width = 380
            .Height = 20
            .TextAlign = 2 ' Center
        End With
        
        ' Add code to initialize the form
        Dim formCode As String
        formCode = "Public Sub UpdateProgress(message As String, percentComplete As Integer)" & vbNewLine & _
                   "  Me.lblMessage.Caption = message" & vbNewLine & _
                   "  Me.fraProgressBar.Width = (percentComplete / 100) * 380" & vbNewLine & _
                   "  Me.lblPercent.Caption = percentComplete & ""%""" & vbNewLine & _
                   "  DoEvents" & vbNewLine & _
                   "End Sub"
        
        frm.CodeModule.AddFromString formCode
    End If
    
    ' Show the form if not already visible
    If Not IsFormLoaded("frmProgress") Then
        ExecuteExcel4Macro "SHOW.DIALOG([frmProgress])"
    End If
    
    ' Update progress
    Application.Run "frmProgress.UpdateProgress", message, percentComplete
End Sub

' Function to hide progress dialog
Private Sub HideProgressDialog()
    On Error Resume Next
    
    ' Check if form exists
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents("frmProgress")
    
    If Not frm Is Nothing Then
        ' Hide the form
        ExecuteExcel4Macro "HIDE.DIALOG([frmProgress])"
    End If
End Sub

' Function to check if a form is loaded
Private Function IsFormLoaded(formName As String) As Boolean
    On Error Resume Next
    
    IsFormLoaded = (ExecuteExcel4Macro("ISREF(" & formName & "!Visible)") <> 0)
End Function

' Function to show animated message
Private Sub ShowAnimatedMessage(message As String, title As String, style As VbMsgBoxStyle)
    On Error Resume Next
    
    ' Create a UserForm dynamically for animated message
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = title
        .Properties("Width") = 400
        .Properties("Height") = 200
        .Properties("StartUpPosition") = 1 ' CenterOwner
    End With
    
    ' Add icon based on style
    Dim imgIcon As Object
    Set imgIcon = frm.Designer.Controls.Add("Forms.Image.1")
    With imgIcon
        .Left = 20
        .Top = 20
        .Width = 32
        .Height = 32
        
        ' Set icon based on style
        Select Case style
            Case vbInformation
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 5)
            Case vbExclamation
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 2)
            Case vbCritical
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 3)
            Case vbQuestion
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 4)
        End Select
    End With
    
    ' Add message label
    Dim lblMessage As Object
    Set lblMessage = frm.Designer.Controls.Add("Forms.Label.1")
    With lblMessage
        .Left = 70
        .Top = 20
        .Width = 310
        .Height = 100
        .Caption = message
        .WordWrap = True
    End With
    
    ' Add OK button
    Dim btnOK As Object
    Set btnOK = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnOK
        .Left = 150
        .Top = 150
        .Width = 100
        .Height = 30
        .Caption = "OK"
        .Default = True
        .Cancel = True
    End With
    
    ' Add code to handle button click and animation
    Dim formCode As String
    formCode = "Private Sub UserForm_Initialize()" & vbNewLine & _
               "  Me.Opacity = 0" & vbNewLine & _
               "  FadeIn" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  FadeOut" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub FadeIn()" & vbNewLine & _
               "  Dim i As Integer" & vbNewLine & _
               "  For i = 0 To 100 Step 5" & vbNewLine & _
               "    Me.Opacity = i / 100" & vbNewLine & _
               "    Sleep 10" & vbNewLine & _
               "  Next i" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub FadeOut()" & vbNewLine & _
               "  Dim i As Integer" & vbNewLine & _
               "  For i = 100 To 0 Step -5" & vbNewLine & _
               "    Me.Opacity = i / 100" & vbNewLine & _
               "    Sleep 10" & vbNewLine & _
               "  Next i" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub Sleep(milliseconds As Long)" & vbNewLine & _
               "  Dim startTime As Double" & vbNewLine & _
               "  startTime = Timer" & vbNewLine & _
               "  Do While Timer < startTime + (milliseconds / 1000)" & vbNewLine & _
               "    DoEvents" & vbNewLine & _
               "  Loop" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Sub

' Function to show error message with details
Private Sub ShowErrorMessage(functionName As String, errorNumber As Long, errorDescription As String)
    On Error Resume Next
    
    ' Log the error
    LogError functionName, errorNumber, errorDescription
    
    ' Create a UserForm dynamically for error message
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Error"
        .Properties("Width") = 500
        .Properties("Height") = 300
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add error icon
    Dim imgIcon As Object
    Set imgIcon = frm.Designer.Controls.Add("Forms.Image.1")
    With imgIcon
        .Left = 20
        .Top = 20
        .Width = 32
        .Height = 32
        .Picture = LoadPicture("C:\Windows\System32\user32.dll", 3)
    End With
    
    ' Add error title
    Dim lblTitle As Object
    Set lblTitle = frm.Designer.Controls.Add("Forms.Label.1")
    With lblTitle
        .Left = 70
        .Top = 20
        .Width = 410
        .Height = 20
        .Caption = "An error occurred in " & functionName
        .Font.Bold = True
        .ForeColor = COLOR_DANGER
    End With
    
    ' Add error message
    Dim lblMessage As Object
    Set lblMessage = frm.Designer.Controls.Add("Forms.Label.1")
    With lblMessage
        .Left = 70
        .Top = 50
        .Width = 410
        .Height = 40
        .Caption = errorDescription
        .WordWrap = True
    End With
    
    ' Add error details frame
    Dim fraDetails As Object
    Set fraDetails = frm.Designer.Controls.Add("Forms.Frame.1")
    With fraDetails
        .Left = 20
        .Top = 100
        .Width = 460
        .Height = 150
        .Caption = "Technical Details"
    End With
    
    ' Add error details
    Dim txtDetails As Object
    Set txtDetails = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtDetails
        .Left = 30
        .Top = 120
        .Width = 440
        .Height = 120
        .MultiLine = True
        .ScrollBars = 2 ' Vertical
        .Text = "Function: " & functionName & vbNewLine & _
                "Error Number: " & errorNumber & vbNewLine & _
                "Description: " & errorDescription & vbNewLine & _
                "Time: " & Now() & vbNewLine & _
                "User: " & GetCurrentUser()
    End With
    
    ' Add OK button
    Dim btnOK As Object
    Set btnOK = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnOK
        .Left = 380
        .Top = 260
        .Width = 100
        .Height = 30
        .Caption = "OK"
        .Default = True
        .Cancel = True
    End With
    
    ' Add code to handle button click
    Dim formCode As String
    formCode = "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Sub

' Function to show modern dialog
Private Sub ShowModernDialog(title As String, message As String, dialogType As String)
    On Error Resume Next
    
    ' Create a UserForm dynamically for modern dialog
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = title
        .Properties("Width") = 400
        .Properties("Height") = 200
        .Properties("StartUpPosition") = 1 ' CenterOwner
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add icon based on dialog type
    Dim imgIcon As Object
    Set imgIcon = frm.Designer.Controls.Add("Forms.Image.1")
    With imgIcon
        .Left = 20
        .Top = 20
        .Width = 32
        .Height = 32
        
        ' Set icon based on dialog type
        Select Case LCase(dialogType)
            Case "info", "information"
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 5)
            Case "warning"
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 2)
            Case "error"
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 3)
            Case "question"
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 4)
        End Select
    End With
    
    ' Add message label
    Dim lblMessage As Object
    Set lblMessage = frm.Designer.Controls.Add("Forms.Label.1")
    With lblMessage
        .Left = 70
        .Top = 20
        .Width = 310
        .Height = 100
        .Caption = message
        .WordWrap = True
    End With
    
    ' Add OK button
    Dim btnOK As Object
    Set btnOK = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnOK
        .Left = 150
        .Top = 150
        .Width = 100
        .Height = 30
        .Caption = "OK"
        .Default = True
        .Cancel = True
    End With
    
    ' Add code to handle button click
    Dim btnCode As String
    btnCode = "Private Sub CommandButton1_Click()" & vbNewLine & _
              "  Me.Hide" & vbNewLine & _
              "End Sub"
    
    frm.CodeModule.AddFromString btnCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Sub

'------------------------------------------------------------------------------
' FORM MANAGEMENT FUNCTIONS
'------------------------------------------------------------------------------
' Subroutine to clear form
Private Sub ClearForm(ws As Worksheet)
    On Error GoTo ErrorHandler
    
    Dim wsDefaults As Worksheet
    Dim i As Integer
    
    ' Try to get DefaultValues worksheet
    On Error Resume Next
    Set wsDefaults = ThisWorkbook.Worksheets(SHEET_DEFAULTS)
    On Error GoTo ErrorHandler
    
    ' Show progress
    ShowProgressDialog "Clearing form...", 0
    
    ' Check if DefaultValues sheet exists
    If wsDefaults Is Nothing Then
        ' No DefaultValues sheet, just clear the form
        Dim clearRange As Range
        Set clearRange = ws.Range("B2:B15")  ' Adjust range as needed
        clearRange.ClearContents
        
        ShowProgressDialog "Form cleared", 100
        Debug.Print "DefaultValues sheet not found. Form cleared."
    Else
        ' DefaultValues sheet exists, load default values
        Dim lastRow As Long
        lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
        
        For i = 2 To lastRow
            If Not IsEmpty(ws.Cells(i, 1)) Then
                ShowProgressDialog "Loading default values...", Int((i - 2) / (lastRow - 2) * 100)
                
                ' Find the corresponding default value by field name
                Dim fieldName As String
                Dim defaultCell As Range
                
                fieldName = ws.Cells(i, 1).Value
                Set defaultCell = FindDefaultCell(wsDefaults, fieldName)
                
                If Not defaultCell Is Nothing Then
                    ' Copy default value to the form
                    ws.Cells(i, 2).Value = defaultCell.Offset(0, 1).Value
                Else
                    ' No default found, clear the cell
                    ws.Cells(i, 2).ClearContents
                End If
            End If
        Next i
        
        ShowProgressDialog "Default values loaded", 100
        Debug.Print "Default values loaded from DefaultValues sheet."
    End If
    
    ' Hide progress dialog
    HideProgressDialog
    
    Exit Sub
    
ErrorHandler:
    HideProgressDialog
    ShowErrorMessage "ClearForm", Err.Number, Err.Description
    
    ' Fall back to simple clearing if there's an error
    On Error Resume Next
    Dim fallbackRange As Range
    Set fallbackRange = ws.Range("B2:B15")
    fallbackRange.ClearContents
End Sub

' Helper function to find a default value cell by field name
Private Function FindDefaultCell(wsDefaults As Worksheet, fieldName As String) As Range
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long
    
    lastRow = wsDefaults.Cells(wsDefaults.Rows.Count, 1).End(xlUp).Row
    
    For i = 1 To lastRow
        If wsDefaults.Cells(i, 1).Value = fieldName Then
            Set FindDefaultCell = wsDefaults.Cells(i, 1)
            Exit Function
        End If
    Next i
    
    ' Field name not found
    Set FindDefaultCell = Nothing
    
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in FindDefaultCell: " & Err.Description
    Set FindDefaultCell = Nothing
End Function

' Subroutine to format data sheet
Private Sub FormatDataSheet(wsData As Worksheet)
    On Error GoTo ErrorHandler
    
    Dim dataRange As Range
    Dim lastRow As Long
    Dim lastCol As Long
    
    ' Find the last row and column with data
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    lastCol = wsData.Cells(1, wsData.Columns.Count).End(xlToLeft).Column
    
    ' Ensure we have headers for the metadata columns
    AddMetadataColumns wsData, wsData.Range("1:1")
    
    ' Set the data range
    Set dataRange = wsData.Range(wsData.Cells(1, 1), wsData.Cells(lastRow, lastCol))
    
    With dataRange
        ' Add borders
        .Borders.LineStyle = xlContinuous
        .Borders.Weight = xlThin
        
        ' Format header row
        .Rows(1).Font.Bold = True
        .Rows(1).Interior.Color = COLOR_PRIMARY
        .Rows(1).Font.Color = vbWhite
        
        ' Autofit columns
        .Columns.AutoFit
        
        ' Add alternating row colors
        Dim i As Long
        For i = 2 To lastRow Step 2
            .Rows(i).Interior.Color = COLOR_LIGHT
        Next i
    End With
    
    ' Get status column index
    Dim statusColIndex As Long
    statusColIndex = GetColumnIndex(wsData, "Status")
    
    If statusColIndex > 0 Then
        ' Get status range
        Dim statusRange As Range
        Set statusRange = wsData.Range(wsData.Cells(2, statusColIndex), wsData.Cells(lastRow, statusColIndex))
        
        ' Clear existing conditional formatting
        statusRange.FormatConditions.Delete
        
        ' Format "Pending Review" as blue
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_PENDING & """")
            .Interior.Color = COLOR_INFO
            .Font.Color = vbBlack
        End With
        
        ' Format "Approved" as green
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_APPROVED & """")
            .Interior.Color = COLOR_SUCCESS
            .Font.Color = vbWhite
        End With
        
        ' Format "Rejected" as red
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_REJECTED & """")
            .Interior.Color = COLOR_DANGER
            .Font.Color = vbWhite
        End With
        
        ' Format "Archived" as gray
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_ARCHIVED & """")
            .Interior.Color = COLOR_DARK
            .Font.Color = vbWhite
        End With
    End If
    
    ' Add data validation for Status column if it exists
    If statusColIndex > 0 Then
        Dim statusValidationRange As Range
        Set statusValidationRange = wsData.Range(wsData.Cells(2, statusColIndex), wsData.Cells(lastRow, statusColIndex))
        
        With statusValidationRange.Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:=STATUS_PENDING & "," & STATUS_APPROVED & "," & STATUS_REJECTED & "," & STATUS_ARCHIVED
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = "Select Status"
            .ErrorTitle = "Invalid Status"
            .InputMessage = "Please select a status from the dropdown list."
            .ErrorMessage = "Please select a valid status from the dropdown list."
            .ShowInput = True
            .ShowError = True
        End With
    End If
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "FormatDataSheet", Err.Number, Err.Description
End Sub

'------------------------------------------------------------------------------
' UTILITY FUNCTIONS
'------------------------------------------------------------------------------
' Function to get setting from Settings sheet
Private Function GetSetting(settingName As String, defaultValue As String) As String
    On Error Resume Next
    
    Dim wsSettings As Worksheet
    Dim findCell As Range
    
    ' Try to get Settings sheet
    Set wsSettings = ThisWorkbook.Worksheets(SHEET_SETTINGS)
    
    If Not wsSettings Is Nothing Then
        ' Find setting by name
        Set findCell = wsSettings.Columns(1).Find(What:=settingName, LookAt:=xlWhole)
        
        If Not findCell Is Nothing Then
            ' Get setting value
            GetSetting = findCell.Offset(0, 1).Value
            Exit Function
        End If
    End If
    
    ' Return default value if setting not found
    GetSetting = defaultValue
End Function

' Function to log activity
Private Sub LogActivity(activityType As String, activityDetails As String)
    On Error Resume Next
    
    Dim wsLog As Worksheet
    Dim lastRow As Long
    
    ' Try to get Log sheet
    On Error Resume Next
    Set wsLog = ThisWorkbook.Worksheets("ActivityLog")
    On Error GoTo 0
    
    ' Create Log sheet if it doesn't exist
    If wsLog Is Nothing Then
        Set wsLog = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsLog.Name = "ActivityLog"
        
        ' Set up log headers
        wsLog.Range("A1").Value = "Timestamp"
        wsLog.Range("B1").Value = "User"
        wsLog.Range("C1").Value = "Activity Type"
        wsLog.Range("D1").Value = "Details"
        wsLog.Range("A1:D1").Font.Bold = True
    End If
    
    ' Find last row
    lastRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    
    ' Add log entry
    wsLog.Cells(lastRow, 1).Value = Now()
    wsLog.Cells(lastRow, 2).Value = GetCurrentUser()
    wsLog.Cells(lastRow, 3).Value = activityType
    wsLog.Cells(lastRow, 4).Value = activityDetails
    
    ' Format log
    wsLog.Columns.AutoFit
End Sub

' Function to log error
Private Sub LogError(functionName As String, errorNumber As Long, errorDescription As String)
    On Error Resume Next
    
    Dim wsLog As Worksheet
    Dim lastRow As Long
    
    ' Try to get Error Log sheet
    On Error Resume Next
    Set wsLog = ThisWorkbook.Worksheets("ErrorLog")
    On Error GoTo 0
    
    ' Create Error Log sheet if it doesn't exist
    If wsLog Is Nothing Then
        Set wsLog = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsLog.Name = "ErrorLog"
        
        ' Set up log headers
        wsLog.Range("A1").Value = "Timestamp"
        wsLog.Range("B1").Value = "User"
        wsLog.Range("C1").Value = "Function"
        wsLog.Range("D1").Value = "Error Number"
        wsLog.Range("E1").Value = "Description"
        wsLog.Range("A1:E1").Font.Bold = True
    End If
    
    ' Find last row
    lastRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    
    ' Add log entry
    wsLog.Cells(lastRow, 1).Value = Now()
    wsLog.Cells(lastRow, 2).Value = GetCurrentUser()
    wsLog.Cells(lastRow, 3).Value = functionName
    wsLog.Cells(lastRow, 4).Value = errorNumber
    wsLog.Cells(lastRow, 5).Value = errorDescription
    
    ' Format log
    wsLog.Columns.AutoFit
End Sub

'------------------------------------------------------------------------------
' DASHBOARD FUNCTIONS
'------------------------------------------------------------------------------
' Function to update dashboard
Private Sub UpdateDashboard()
    On Error GoTo ErrorHandler
    
    Dim wsDashboard As Worksheet
    Dim wsData As Worksheet
    Dim lastRow As Long
    Dim statusColIndex As Long
    Dim dateColIndex As Long
    
    ' Check if Dashboard sheet exists
    On Error Resume Next
    Set wsDashboard = ThisWorkbook.Worksheets(SHEET_DASHBOARD)
    On Error GoTo ErrorHandler
    
    ' Create Dashboard sheet if it doesn't exist
    If wsDashboard Is Nothing Then
        Set wsDashboard = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsDashboard.Name = SHEET_DASHBOARD
        
        ' Set up dashboard layout
        SetupDashboardLayout wsDashboard
    End If
    
    ' Get data sheet
    Set wsData = ThisWorkbook.Worksheets(SHEET_INTAKE_DATA)
    
    ' Find last row with data
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    ' Get column indexes
    statusColIndex = GetColumnIndex(wsData, "Status")
    dateColIndex = GetColumnIndex(wsData, "Submission Date")
    
    ' Clear existing dashboard data
    ClearDashboardData wsDashboard
    
    ' Update dashboard data
    UpdateStatusCounts wsDashboard, wsData, lastRow, statusColIndex
    UpdateTimelineChart wsDashboard, wsData, lastRow, dateColIndex, statusColIndex
    UpdateRecentSubmissions wsDashboard, wsData, lastRow
    
    ' Format dashboard
    FormatDashboard wsDashboard
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "UpdateDashboard", Err.Number, Err.Description
End Sub

'==============================================================================
' MAIN MENU FUNCTION
'==============================================================================
' Function to show main menu
Public Sub ShowMainMenu()
    On Error GoTo ErrorHandler
    
    ' Create a UserForm dynamically
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Intake Form System"
        .Properties("Width") = 400
        .Properties("Height") = 400
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add form header
    Dim lblHeader As Object
    Set lblHeader = frm.Designer.Controls.Add("Forms.Label.1")
    With lblHeader
        .Left = 0
        .Top = 0
        .Width = 400
        .Height = 50
        .Caption = "Intake Form Management System"
        .Font.Size = 14
        .Font.Bold = True
        .ForeColor = vbWhite
        .BackColor = COLOR_PRIMARY
        .TextAlign = 2 ' Center
    End With
    
    ' Add version label
    Dim lblVersion As Object
    Set lblVersion = frm.Designer.Controls.Add("Forms.Label.1")
    With lblVersion
        .Left = 0
        .Top = 50
        .Width = 400
        .Height = 20
        .Caption = "Version 2.0"
        .Font.Size = 8
        .ForeColor = vbWhite
        .BackColor = COLOR_PRIMARY
        .TextAlign = 2 ' Center
    End With
    
    ' Add Submit Form button
    Dim btnSubmit As Object
    Set btnSubmit = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnSubmit
        .Left = 50
        .Top = 100
        .Width = 300
        .Height = 40
        .Caption = "Submit Form"
    End With
    
    ' Add Review Submissions button
    Dim btnReview As Object
    Set btnReview = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnReview
        .Left = 50
        .Top = 160
        .Width = 300
        .Height = 40
        .Caption = "Review Submissions"
    End With
    
    ' Add View Dashboard button
    Dim btnDashboard As Object
    Set btnDashboard = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnDashboard
        .Left = 50
        .Top = 220
        .Width = 300
        .Height = 40
        .Caption = "View Dashboard"
    End With
    
    ' Add Settings button
    Dim btnSettings As Object
    Set btnSettings = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnSettings
        .Left = 50
        .Top = 280
        .Width = 300
        .Height = 40
        .Caption = "Settings"
    End With
    
    ' Add Close button
    Dim btnClose As Object
    Set btnClose = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnClose
        .Left = 150
        .Top = 340
        .Width = 100
        .Height = 30
        .Caption = "Close"
        .Cancel = True
    End With
    
    ' Add code to handle buttons
    Dim formCode As String
    formCode = "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  ' Submit Form" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  Application.Run ""SubmitIntake""" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton2_Click()" & vbNewLine & _
               "  ' Review Submissions" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  Application.Run ""ViewPendingSubmissions""" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton3_Click()" & vbNewLine & _
               "  ' View Dashboard" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  Application.Run ""UpdateDashboard""" & vbNewLine & _
               "  ThisWorkbook.Worksheets(""" & SHEET_DASHBOARD & """).Activate" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton4_Click()" & vbNewLine & _
               "  ' Settings" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  Application.Run ""CreateSettingsSheet""" & vbNewLine & _
               "  ThisWorkbook.Worksheets(""" & SHEET_SETTINGS & """).Activate" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton5_Click()" & vbNewLine & _
               "  ' Close" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "ShowMainMenu", Err.Number, Err.Description
End Sub
