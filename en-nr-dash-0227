Option Explicit

' Constants for statuses
Private Const STATUS_PENDING As String = "Pending Review"
Private Const STATUS_APPROVED As String = "Approved"
Private Const STATUS_REJECTED As String = "Rejected"

' === MAIN FUNCTION: HANDLES FORM SUBMISSION ===
Public Sub SubmitIntake()
    On Error GoTo ErrorHandler

    Dim wsInput As Worksheet, wsData As Worksheet
    Dim entryId As Long, emailSent As Boolean
    
    Set wsInput = ThisWorkbook.Worksheets("IntakeForm")
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    
    If Not ValidateForm(wsInput) Then
        MsgBox "‚ö†Ô∏è Please fill in all required fields before submitting.", vbExclamation, "Form Validation"
        Exit Sub
    End If
    
    entryId = GetNextEntryId(wsData)
    SaveFormData wsInput, wsData, entryId
    emailSent = SendEmail(wsInput, entryId)
    ClearForm wsInput
    FormatDataSheet wsData

    MsgBox "‚úÖ Submission successful!" & IIf(emailSent, " Email notification sent.", " Email could not be sent.") & _
           vbNewLine & "Status: Pending Review.", vbInformation, "Success"
    
    Exit Sub
ErrorHandler:
    MsgBox "üö® An error occurred: " & Err.Description, vbCritical, "Error in SubmitIntake"
End Sub

' === FORM VALIDATION FUNCTION ===
Private Function ValidateForm(ws As Worksheet) As Boolean
    Dim cell As Range
    For Each cell In ws.Range("B2:B10")
        If IsEmpty(cell) Then ValidateForm = False: Exit Function
    Next
    ValidateForm = True
End Function

' === GENERATES NEXT ENTRY ID ===
Private Function GetNextEntryId(wsData As Worksheet) As Long
    Dim lastRow As Long
    lastRow = wsData.Cells(Rows.Count, "A").End(xlUp).Row
    GetNextEntryId = IIf(lastRow = 1, 1, wsData.Cells(lastRow, "A").Value + 1)
End Function

' === SAVE FORM DATA FUNCTION ===
Private Sub SaveFormData(wsInput As Worksheet, wsData As Worksheet, entryId As Long)
    Dim lastRow As Long, i As Integer
    lastRow = wsData.Cells(Rows.Count, "A").End(xlUp).Row + 1
    
    wsData.Cells(lastRow, "A").Value = entryId
    For i = 2 To 10
        wsData.Cells(lastRow, i).Value = wsInput.Cells(i, 2).Value
    Next i
    wsData.Cells(lastRow, 11).Value = STATUS_PENDING
End Sub

' === CLEAR FORM FUNCTION ===
Private Sub ClearForm(ws As Worksheet)
    ws.Range("B2:B10").ClearContents
End Sub

' === FORMAT DATA SHEET FUNCTION ===
Private Sub FormatDataSheet(wsData As Worksheet)
    Dim lastRow As Long
    lastRow = wsData.Cells(Rows.Count, "A").End(xlUp).Row
    
    With wsData.Range("A1:K" & lastRow)
        .Borders.LineStyle = xlContinuous
        .Borders.Weight = xlThin
        .Rows(1).Font.Bold = True
        .Columns.AutoFit
    End With
End Sub

' === SEND EMAIL FUNCTION ===
Private Function SendEmail(wsInput As Worksheet, entryId As Long) As Boolean
    On Error GoTo ErrorHandler
    Dim outlookApp As Object, mailItem As Object, recipientEmail As String
    
    Set outlookApp = GetOutlookApp()
    recipientEmail = GetRecipientEmail()
    
    If Not outlookApp Is Nothing Then
        Set mailItem = outlookApp.CreateItem(0)
        With mailItem
            .To = recipientEmail
            .Subject = "üì© New Intake Submission - Entry ID: " & entryId
            .Body = "A new intake form has been submitted. Entry ID: " & entryId
            .Send
            SendEmail = True
        End With
        Set mailItem = Nothing
    Else
        MsgBox "‚ö†Ô∏è Outlook is not available.", vbExclamation, "Email Error"
        SendEmail = False
    End If
    Exit Function
ErrorHandler:
    SendEmail = False
End Function

' === OUTLOOK INSTANCE FUNCTION ===
Private Function GetOutlookApp() As Object
    On Error Resume Next
    Set GetOutlookApp = GetObject(, "Outlook.Application")
    If GetOutlookApp Is Nothing Then Set GetOutlookApp = CreateObject("Outlook.Application")
    On Error GoTo 0
End Function

' === GET RECIPIENT EMAIL FUNCTION ===
Private Function GetRecipientEmail() As String
    Dim wsSettings As Worksheet, findCell As Range
    Set wsSettings = ThisWorkbook.Worksheets("Settings")
    
    If Not wsSettings Is Nothing Then
        Set findCell = wsSettings.Cells.Find("Recipient Email", LookAt:=xlWhole)
        If Not findCell Is Nothing Then GetRecipientEmail = Trim(findCell.Offset(0, 1).Value)
    End If
    
    If GetRecipientEmail = "" Then GetRecipientEmail = "recipient@example.com"
End Function

' === REVIEW SUBMISSION FUNCTION ===
Public Sub ReviewSubmission()
    On Error GoTo ErrorHandler
    Dim wsData As Worksheet, entryId As Long, rowIndex As Long, statusValue As String, reviewer As String
    
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    entryId = Application.InputBox("Enter the Entry ID to review:", "Review Submission", Type:=1)
    If entryId = 0 Then Exit Sub
    
    rowIndex = FindEntryRow(wsData, entryId)
    If rowIndex = 0 Then
        MsgBox "Entry ID not found.", vbExclamation
        Exit Sub
    End If

    reviewer = Application.InputBox("Enter your name:", "Reviewer Name", Type:=2)
    If reviewer = "" Then Exit Sub

    If MsgBox("Approve this submission?", vbYesNo + vbQuestion) = vbYes Then
        statusValue = STATUS_APPROVED
    Else
        statusValue = STATUS_REJECTED
    End If

    wsData.Cells(rowIndex, 11).Value = statusValue
    wsData.Cells(rowIndex, 12).Value = reviewer
    wsData.Cells(rowIndex, 13).Value = Now()
    
    FormatDataSheet wsData
    MsgBox "Review completed successfully!", vbInformation
    
    Exit Sub
ErrorHandler:
    MsgBox "üö® Error in ReviewSubmission: " & Err.Description, vbCritical
End Sub

' === FIND ENTRY FUNCTION ===
Private Function FindEntryRow(wsData As Worksheet, entryId As Long) As Long
    Dim lastRow As Long, i As Long
    lastRow = wsData.Cells(Rows.Count, "A").End(xlUp).Row
    
    For i = 2 To lastRow
        If wsData.Cells(i, 1).Value = entryId Then
            FindEntryRow = i
            Exit Function
        End If
    Next i
    FindEntryRow = 0
End Function

' === VIEW PENDING SUBMISSIONS ===
Public Sub ViewPendingSubmissions()
    Dim wsData As Worksheet, pendingCount As Long, i As Long, lastRow As Long, msg As String
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    lastRow = wsData.Cells(Rows.Count, "A").End(xlUp).Row
    
    pendingCount = Application.WorksheetFunction.CountIf(wsData.Range("K2:K" & lastRow), STATUS_PENDING)
    If pendingCount = 0 Then
        MsgBox "No pending submissions.", vbInformation
        Exit Sub
    End If
    
    msg = "Pending submissions:" & vbNewLine
    For i = 2 To lastRow
        If wsData.Cells(i, 11).Value = STATUS_PENDING Then msg = msg & "Entry ID: " & wsData.Cells(i, 1).Value & vbNewLine
    Next i
    
    MsgBox msg, vbInformation
End Sub
