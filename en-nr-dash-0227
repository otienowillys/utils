
'==============================================================================
' Intake Form Management System
' Version: 2.0
' Author: v0
' Last Updated: 2/28/2025
'==============================================================================
' A comprehensive system for managing intake forms with advanced features:
' - Modern UI with visual indicators
' - Robust email notifications with HTML templates
' - Advanced validation and error handling
' - Dashboard analytics
' - Export capabilities
' - User authentication
'==============================================================================

Option Explicit

'------------------------------------------------------------------------------
' CONSTANTS AND ENUMERATIONS
'------------------------------------------------------------------------------
' Status constants with color codes
Private Const STATUS_PENDING As String = "Pending Review"
Private Const STATUS_APPROVED As String = "Approved"
Private Const STATUS_REJECTED As String = "Rejected"
Private Const STATUS_ARCHIVED As String = "Archived"

' Color constants for UI elements
Private Const COLOR_PRIMARY As Long = &H006EB6     ' Blue
Private Const COLOR_SUCCESS As Long = &H4CAF50     ' Green
Private Const COLOR_WARNING As Long = &HFFC107     ' Yellow
Private Const COLOR_DANGER As Long = &H0000FF      ' Red
Private Const COLOR_INFO As Long = &HE2A929        ' Light Blue
Private Const COLOR_LIGHT As Long = &HEEEEEE       ' Light Gray
Private Const COLOR_DARK As Long = &H333333        ' Dark Gray

' Sheet names
Private Const SHEET_INTAKE_FORM As String = "IntakeForm"
Private Const SHEET_INTAKE_DATA As String = "IntakeData"
Private Const SHEET_SETTINGS As String = "Settings"
Private Const SHEET_DEFAULTS As String = "DefaultValues"
Private Const SHEET_DASHBOARD As String = "Dashboard"

' Email template types
Private Enum EmailTemplateType
    etSubmission = 1
    etReview = 2
    etReminder = 3
    etSummary = 4
End Enum

' User roles
Private Enum UserRole
    urViewer = 1
    urSubmitter = 2
    urReviewer = 3
    urAdmin = 4
End Enum

'------------------------------------------------------------------------------
' TYPE DEFINITIONS
'------------------------------------------------------------------------------
' Form field type definition
Private Type FormField
    Name As String
    Value As Variant
    Required As Boolean
    FieldType As String
    ValidationRule As String
End Type

' User type definition
Private Type UserInfo
    Username As String
    DisplayName As String
    Email As String
    Role As UserRole
    LastLogin As Date
End Type

' Current user information
Private CurrentUser As UserInfo

'------------------------------------------------------------------------------
' MAIN FORM SUBMISSION FUNCTION
'------------------------------------------------------------------------------
Public Sub SubmitIntake()
    On Error GoTo ErrorHandler
    
    ' Show progress indicator
    ShowProgressDialog "Submitting form...", 0
    
    Dim wsInput As Worksheet
    Dim wsData As Worksheet
    Dim entryId As Long
    Dim emailSent As Boolean
    Dim formFields() As FormField
    Dim validationResult As Boolean
    
    ' Initialize worksheets
    Set wsInput = ThisWorkbook.Worksheets(SHEET_INTAKE_FORM)
    Set wsData = ThisWorkbook.Worksheets(SHEET_INTAKE_DATA)
    
    ' Update progress
    ShowProgressDialog "Validating form...", 20
    
    ' Load and validate form fields
    formFields = LoadFormFields(wsInput)
    validationResult = ValidateFormFields(formFields)
    
    If Not validationResult Then
        HideProgressDialog
        Exit Sub
    End If
    
    ' Update progress
    ShowProgressDialog "Generating entry ID...", 40
    
    ' Get next entry ID
    entryId = GetNextEntryId(wsData)
    
    ' Update progress
    ShowProgressDialog "Saving form data...", 60
    
    ' Save form data
    SaveFormData wsInput, wsData, entryId, formFields
    
    ' Update progress
    ShowProgressDialog "Sending email notification...", 80
    
    ' Send email notification
    emailSent = SendEmail(wsInput, entryId, etSubmission)
    
    ' Update progress
    ShowProgressDialog "Finalizing submission...", 90
    
    ' Clear form and format data sheet
    ClearForm wsInput
    FormatDataSheet wsData
    
    ' Update dashboard
    UpdateDashboard
    
    ' Hide progress dialog
    HideProgressDialog
    
    ' Show success message with animation
    If emailSent Then
        ShowAnimatedMessage "Form submitted successfully and email sent!" & vbNewLine & _
               "The submission is now pending review.", "Success", vbInformation
    Else
        ShowAnimatedMessage "Form submitted successfully, but email could not be sent. The data has been saved." & vbNewLine & _
               "The submission is now pending review.", "Success with Warning", vbInformation
    End If
    
    ' Log the activity
    LogActivity "Form submitted", "Entry ID: " & entryId
    
    Exit Sub
    
ErrorHandler:
    HideProgressDialog
    ShowErrorMessage "SubmitIntake", Err.Number, Err.Description
End Sub

'------------------------------------------------------------------------------
' FORM VALIDATION FUNCTIONS
'------------------------------------------------------------------------------
' Function to load form fields from the worksheet
Private Function LoadFormFields(ws As Worksheet) As FormField()
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long, fieldCount As Long
    Dim fields() As FormField
    
    ' Find the last row with field names
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    ' Count valid fields
    fieldCount = 0
    For i = 2 To lastRow
        If Not IsEmpty(ws.Cells(i, 1)) Then
            fieldCount = fieldCount + 1
        End If
    Next i
    
    ' Resize array to hold all fields
    ReDim fields(1 To fieldCount)
    
    ' Load fields
    fieldCount = 0
    For i = 2 To lastRow
        If Not IsEmpty(ws.Cells(i, 1)) Then
            fieldCount = fieldCount + 1
            
            ' Load field properties
            fields(fieldCount).Name = ws.Cells(i, 1).Value
            fields(fieldCount).Value = ws.Cells(i, 2).Value
            
            ' Check if field is required (indicated by * in name)
            fields(fieldCount).Required = (InStr(fields(fieldCount).Name, "*") > 0)
            
            ' Determine field type based on cell format or validation
            fields(fieldCount).FieldType = DetermineFieldType(ws.Cells(i, 2))
            
            ' Get validation rule if any
            If ws.Cells(i, 2).Validation.Type <> xlValidateNone Then
                fields(fieldCount).ValidationRule = GetValidationRule(ws.Cells(i, 2).Validation)
            End If
        End If
    Next i
    
    LoadFormFields = fields
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "LoadFormFields", Err.Number, Err.Description
    ReDim fields(1 To 1)
    LoadFormFields = fields
End Function

' Function to determine field type based on cell format
Private Function DetermineFieldType(cell As Range) As String
    On Error Resume Next
    
    ' Check for date format
    If cell.NumberFormat Like "*d*m*y*" Or cell.NumberFormat Like "*m*d*y*" Or cell.NumberFormat Like "*y*m*d*" Then
        DetermineFieldType = "Date"
        Exit Function
    End If
    
    ' Check for number format
    If cell.NumberFormat Like "0*" Or cell.NumberFormat Like "#*" Or cell.NumberFormat Like "$*" Then
        DetermineFieldType = "Number"
        Exit Function
    End If
    
    ' Check for dropdown validation
    If cell.Validation.Type = xlValidateList Then
        DetermineFieldType = "Dropdown"
        Exit Function
    End If
    
    ' Default to text
    DetermineFieldType = "Text"
End Function

' Function to get validation rule as string
Private Function GetValidationRule(validation As Validation) As String
    On Error Resume Next
    
    Select Case validation.Type
        Case xlValidateList
            GetValidationRule = "List: " & validation.Formula1
        Case xlValidateDecimal, xlValidateWholeNumber
            GetValidationRule = "Range: " & validation.Formula1 & " to " & validation.Formula2
        Case xlValidateDate
            GetValidationRule = "Date: " & validation.Formula1 & " to " & validation.Formula2
        Case xlValidateTextLength
            GetValidationRule = "Length: " & validation.Formula1 & " to " & validation.Formula2
        Case xlValidateCustom
            GetValidationRule = "Custom: " & validation.Formula1
        Case Else
            GetValidationRule = ""
    End Select
End Function

' Function to validate form fields
Private Function ValidateFormFields(fields() As FormField) As Boolean
    On Error GoTo ErrorHandler
    
    Dim i As Long
    Dim errorMessages As String
    Dim hasErrors As Boolean
    
    hasErrors = False
    errorMessages = "Please correct the following issues:" & vbNewLine & vbNewLine
    
    ' Check each field
    For i = LBound(fields) To UBound(fields)
        ' Check required fields
        If fields(i).Required And (IsEmpty(fields(i).Value) Or Trim(CStr(fields(i).Value)) = "") Then
            errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " is required" & vbNewLine
            hasErrors = True
            Continue For
        End If
        
        ' Skip validation for empty non-required fields
        If IsEmpty(fields(i).Value) Or Trim(CStr(fields(i).Value)) = "" Then
            Continue For
        End If
        
        ' Validate based on field type
        Select Case fields(i).FieldType
            Case "Date"
                If Not IsDate(fields(i).Value) Then
                    errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " must be a valid date" & vbNewLine
                    hasErrors = True
                End If
                
            Case "Number"
                If Not IsNumeric(fields(i).Value) Then
                    errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " must be a number" & vbNewLine
                    hasErrors = True
                End If
                
            Case "Email"
                If Not IsValidEmail(CStr(fields(i).Value)) Then
                    errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " must be a valid email address" & vbNewLine
                    hasErrors = True
                End If
        End Select
        
        ' Apply custom validation rules if any
        If fields(i).ValidationRule <> "" And Not ApplyCustomValidation(fields(i).Value, fields(i).ValidationRule) Then
            errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " does not meet validation requirements" & vbNewLine
            hasErrors = True
        End If
    Next i
    
    ' Show error message if validation failed
    If hasErrors Then
        ShowValidationErrors errorMessages
        ValidateFormFields = False
    Else
        ValidateFormFields = True
    End If
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "ValidateFormFields", Err.Number, Err.Description
    ValidateFormFields = False
End Function

' Function to validate email format
Private Function IsValidEmail(email As String) As Boolean
    On Error Resume Next
    
    Dim regex As Object
    Set regex = CreateObject("VBScript.RegExp")
    
    With regex
        .Pattern = "^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$"
        .Global = False
        .IgnoreCase = True
        IsValidEmail = .Test(email)
    End With
    
    Set regex = Nothing
End Function

' Function to apply custom validation rules
Private Function ApplyCustomValidation(value As Variant, rule As String) As Boolean
    On Error Resume Next
    
    ' Default to true if no rule
    If rule = "" Then
        ApplyCustomValidation = True
        Exit Function
    End If
    
    ' Parse rule type
    Dim ruleType As String
    Dim ruleParams As String
    
    ruleType = Left(rule, InStr(rule, ":") - 1)
    ruleParams = Mid(rule, InStr(rule, ":") + 1)
    
    ' Apply rule based on type
    Select Case ruleType
        Case "List"
            ' Check if value is in list
            ApplyCustomValidation = (InStr(1, ruleParams, CStr(value), vbTextCompare) > 0)
            
        Case "Range"
            ' Check if value is in range
            Dim minVal As Variant, maxVal As Variant
            minVal = Trim(Left(ruleParams, InStr(ruleParams, "to") - 1))
            maxVal = Trim(Mid(ruleParams, InStr(ruleParams, "to") + 2))
            
            If IsNumeric(value) And IsNumeric(minVal) And IsNumeric(maxVal) Then
                ApplyCustomValidation = (CDbl(value) >= CDbl(minVal) And CDbl(value) <= CDbl(maxVal))
            Else
                ApplyCustomValidation = False
            End If
            
        Case "Length"
            ' Check if text length is in range
            Dim minLen As Long, maxLen As Long
            minLen = CLng(Trim(Left(ruleParams, InStr(ruleParams, "to") - 1)))
            maxLen = CLng(Trim(Mid(ruleParams, InStr(ruleParams, "to") + 2)))
            
            ApplyCustomValidation = (Len(CStr(value)) >= minLen And Len(CStr(value)) <= maxLen)
            
        Case "Custom"
            ' Evaluate custom formula
            ' This is risky but allows for complex validation
            On Error Resume Next
            ApplyCustomValidation = Evaluate(Replace(ruleParams, "value", CStr(value)))
            If Err.Number <> 0 Then ApplyCustomValidation = False
            On Error GoTo 0
            
        Case Else
            ApplyCustomValidation = True
    End Select
End Function

' Function to show validation errors with modern UI
Private Sub ShowValidationErrors(errorMessages As String)
    On Error Resume Next
    
    ' Create a UserForm dynamically for better UI
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Validation Errors"
        .Properties("Width") = 400
        .Properties("Height") = 300
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add a label for the error messages
    Dim lbl As Object
    Set lbl = frm.Designer.Controls.Add("Forms.Label.1")
    With lbl
        .Left = 10
        .Top = 10
        .Width = 380
        .Height = 240
        .Caption = errorMessages
        .ForeColor = COLOR_DANGER
        .Font.Bold = True
    End With
    
    ' Add an OK button
    Dim btn As Object
    Set btn = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btn
        .Left = 150
        .Top = 260
        .Width = 100
        .Height = 30
        .Caption = "OK"
        .Default = True
        .Cancel = True
    End With
    
    ' Add code to close the form when the button is clicked
    Dim btnCode As String
    btnCode = "Private Sub CommandButton1_Click()" & vbNewLine & _
              "  Me.Hide" & vbNewLine & _
              "End Sub"
    frm.CodeModule.AddFromString btnCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Sub

'------------------------------------------------------------------------------
' DATA HANDLING FUNCTIONS
'------------------------------------------------------------------------------
' Function to get the next entry ID
Private Function GetNextEntryId(wsData As Worksheet) As Long
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    If lastRow = 1 Then
        GetNextEntryId = 1
    Else
        ' Get the maximum ID value (in case rows were deleted)
        GetNextEntryId = Application.WorksheetFunction.Max(wsData.Range("A2:A" & lastRow)) + 1
    End If
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "GetNextEntryId", Err.Number, Err.Description
    GetNextEntryId = 1
End Function

' Subroutine to save form data
Private Sub SaveFormData(wsInput As Worksheet, wsData As Worksheet, entryId As Long, formFields() As FormField)
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long, j As Long
    Dim headerRow As Range
    
    ' Get the header row
    Set headerRow = wsData.Range("1:1")
    
    ' Find the last row
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row + 1
    
    ' Save Entry ID
    wsData.Cells(lastRow, "A").Value = entryId
    
    ' Save form data
    For i = LBound(formFields) To UBound(formFields)
        ' Find the column with matching header
        For j = 2 To headerRow.Cells.Count
            If headerRow.Cells(1, j).Value = formFields(i).Name Then
                wsData.Cells(lastRow, j).Value = formFields(i).Value
                Exit For
            End If
        Next j
        
        ' If header not found, add it
        If j > headerRow.Cells.Count Then
            wsData.Cells(1, j).Value = formFields(i).Name
            wsData.Cells(lastRow, j).Value = formFields(i).Value
        End If
    Next i
    
    ' Add metadata columns if they don't exist
    AddMetadataColumns wsData, headerRow
    
    ' Add status and metadata
    wsData.Cells(lastRow, GetColumnIndex(wsData, "Status")).Value = STATUS_PENDING
    wsData.Cells(lastRow, GetColumnIndex(wsData, "Submission Date")).Value = Now()
    wsData.Cells(lastRow, GetColumnIndex(wsData, "Submitter")).Value = GetCurrentUser()
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "SaveFormData", Err.Number, Err.Description
End Sub

' Function to add metadata columns if they don't exist
Private Sub AddMetadataColumns(wsData As Worksheet, headerRow As Range)
    On Error Resume Next
    
    Dim lastCol As Long
    lastCol = headerRow.Cells.Count
    
    ' Add Status column if it doesn't exist
    If GetColumnIndex(wsData, "Status") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Status"
    End If
    
    ' Add Submission Date column if it doesn't exist
    If GetColumnIndex(wsData, "Submission Date") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Submission Date"
    End If
    
    ' Add Submitter column if it doesn't exist
    If GetColumnIndex(wsData, "Submitter") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Submitter"
    End If
    
    ' Add Review Comments column if it doesn't exist
    If GetColumnIndex(wsData, "Review Comments") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Review Comments"
    End If
    
    ' Add Reviewer column if it doesn't exist
    If GetColumnIndex(wsData, "Reviewer") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Reviewer"
    End If
    
    ' Add Review Date column if it doesn't exist
    If GetColumnIndex(wsData, "Review Date") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Review Date"
    End If
End Sub

' Function to get column index by header name
Private Function GetColumnIndex(ws As Worksheet, headerName As String) As Long
    On Error Resume Next
    
    Dim headerRow As Range
    Dim cell As Range
    
    Set headerRow = ws.Range("1:1")
    
    For Each cell In headerRow.Cells
        If cell.Value = headerName Then
            GetColumnIndex = cell.Column
            Exit Function
        End If
    Next cell
    
    GetColumnIndex = 0
End Function

' Function to get current user name
Private Function GetCurrentUser() As String
    On Error Resume Next
    
    ' Try to get Windows username
    GetCurrentUser = Environ("USERNAME")
    
    ' If that fails, use the name from Excel
    If GetCurrentUser = "" Then
        GetCurrentUser = Application.UserName
    End If
    
    ' If that also fails, use a default
    If GetCurrentUser = "" Then
        GetCurrentUser = "Unknown User"
    End If
End Function

'------------------------------------------------------------------------------
' EMAIL FUNCTIONS
'------------------------------------------------------------------------------
' Function to send email
Private Function SendEmail(wsInput As Worksheet, entryId As Long, templateType As EmailTemplateType, Optional reviewData As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    Dim outlookApp As Object
    Dim mailItem As Object
    Dim htmlBody As String
    Dim userResponse As VbMsgBoxResult
    Dim recipientEmail As String
    Dim emailSubject As String
    
    ' Try to use Outlook
    Set outlookApp = GetOutlookApp()
    
    ' Get recipient email from settings
    recipientEmail = GetSetting("Recipient Email", "recipient@example.com")
    
    If Not outlookApp Is Nothing Then
        Set mailItem = outlookApp.CreateItem(0)  ' 0 = olMailItem
        
        With mailItem
            .To = recipientEmail
            
            ' Set subject and build HTML body based on template type
            Select Case templateType
                Case etSubmission
                    emailSubject = "New Intake Form Submission - Entry ID: " & entryId
                    htmlBody = BuildSubmissionEmailHTML(wsInput, entryId)
                    
                Case etReview
                    emailSubject = "Intake Form Review - Entry ID: " & entryId & " - " & reviewData("Status")
                    htmlBody = BuildReviewEmailHTML(reviewData("Worksheet"), reviewData("RowIndex"), entryId, _
                                                   reviewData("Status"), reviewData("Comments"), reviewData("Reviewer"))
                    
                Case etReminder
                    emailSubject = "Reminder: Pending Intake Forms Require Review"
                    htmlBody = BuildReminderEmailHTML(reviewData)
                    
                Case etSummary
                    emailSubject = "Weekly Intake Form Summary Report"
                    htmlBody = BuildSummaryEmailHTML(reviewData)
            End Select
            
            .Subject = emailSubject
            .HTMLBody = htmlBody
            
            ' Optional: Add attachments if needed
            If templateType = etSummary And Not IsMissing(reviewData) Then
                If reviewData("IncludeAttachment") Then
                    .Attachments.Add reviewData("AttachmentPath")
                End If
            End If
            
            ' Ask user for confirmation with modern dialog
            userResponse = ShowEmailPreview(.To, .Subject, htmlBody)
            
            If userResponse = vbYes Then
                .Send
                SendEmail = True
            Else
                SendEmail = False
            End If
        End With
        
        Set mailItem = Nothing
    Else
        ' Fallback if Outlook is not available
        ShowModernDialog "Email Error", "Outlook is not available. Please make sure Outlook is installed and running.", "warning"
        SendEmail = False
    End If
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "SendEmail", Err.Number, Err.Description
    SendEmail = False
End Function

' Function to get or create Outlook application object
Private Function GetOutlookApp() As Object
    On Error Resume Next
    Set GetOutlookApp = GetObject(, "Outlook.Application")
    If GetOutlookApp Is Nothing Then
        Set GetOutlookApp = CreateObject("Outlook.Application")
    End If
    On Error GoTo 0
End Function

' Function to show email preview with modern UI
Private Function ShowEmailPreview(recipientEmail As String, subject As String, htmlBody As String) As VbMsgBoxResult
    On Error Resume Next
    
    ' Create a UserForm dynamically for better UI
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Email Preview"
        .Properties("Width") = 600
        .Properties("Height") = 500
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add recipient label
    Dim lblTo As Object
    Set lblTo = frm.Designer.Controls.Add("Forms.Label.1")
    With lblTo
        .Left = 10
        .Top = 10
        .Width = 80
        .Height = 20
        .Caption = "To:"
        .Font.Bold = True
    End With
    
    ' Add recipient text
    Dim txtTo As Object
    Set txtTo = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtTo
        .Left = 100
        .Top = 10
        .Width = 480
        .Height = 20
        .Text = recipientEmail
        .Enabled = False
    End With
    
    ' Add subject label
    Dim lblSubject As Object
    Set lblSubject = frm.Designer.Controls.Add("Forms.Label.1")
    With lblSubject
        .Left = 10
        .Top = 40
        .Width = 80
        .Height = 20
        .Caption = "Subject:"
        .Font.Bold = True
    End With
    
    ' Add subject text
    Dim txtSubject As Object
    Set txtSubject = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtSubject
        .Left = 100
        .Top = 40
        .Width = 480
        .Height = 20
        .Text = subject
        .Enabled = False
    End With
    
    ' Add preview label
    Dim lblPreview As Object
    Set lblPreview = frm.Designer.Controls.Add("Forms.Label.1")
    With lblPreview
        .Left = 10
        .Top = 70
        .Width = 580
        .Height = 20
        .Caption = "Email Preview:"
        .Font.Bold = True
    End With
    
    ' Add WebBrowser control for HTML preview
    Dim wb As Object
    Set wb = frm.Designer.Controls.Add("Forms.WebBrowser.1")
    With wb
        .Left = 10
        .Top = 100
        .Width = 580
        .Height = 350
    End With
    
    ' Add Send button
    Dim btnSend As Object
    Set btnSend = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnSend
        .Left = 400
        .Top = 460
        .Width = 90
        .Height = 30
        .Caption = "Send"
        .Default = True
    End With
    
    ' Add Cancel button
    Dim btnCancel As Object
    Set btnCancel = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnCancel
        .Left = 500
        .Top = 460
        .Width = 90
        .Height = 30
        .Caption = "Cancel"
        .Cancel = True
    End With
    
    ' Add code to handle buttons and load HTML
    Dim formCode As String
    formCode = "Dim Result As VbMsgBoxResult" & vbNewLine & _
               "Private Sub UserForm_Initialize()" & vbNewLine & _
               "  Me.WebBrowser1.Navigate ""about:blank""" & vbNewLine & _
               "  Me.WebBrowser1.Document.Write """ & Replace(htmlBody, """", """""") & """" & vbNewLine & _
               "  Result = vbCancel" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  Result = vbYes" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton2_Click()" & vbNewLine & _
               "  Result = vbNo" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Get the result
    ShowEmailPreview = ExecuteExcel4Macro("GET(" & frm.Name & "!Result)")
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Function

' Function to build HTML email for submission
Private Function BuildSubmissionEmailHTML(ws As Worksheet, entryId As Long) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim i As Integer
    Dim fieldName As String
    Dim fieldValue As String
    Dim companyName As String
    Dim companyLogo As String
    
    ' Get company info from settings
    companyName = GetSetting("Company Name", "Your Company")
    companyLogo = GetSetting("Company Logo URL", "")
    
    ' Start building HTML with modern design
    html = "<!DOCTYPE html>" & vbNewLine & _
           "<html lang='en'>" & vbNewLine & _
           "<head>" & vbNewLine & _
           "  <meta charset='UTF-8'>" & vbNewLine & _
           "  <meta name='viewport' content='width=device-width, initial-scale=1.0'>" & vbNewLine & _
           "  <style>" & vbNewLine & _
           "    body { font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; color: #333333; max-width: 650px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; }" & vbNewLine & _
           "    .email-container { background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); padding: 30px; }" & vbNewLine & _
           "    .header { display: flex; align-items: center; margin-bottom: 25px; }" & vbNewLine & _
           "    .logo { max-height: 60px; margin-right: 20px; }" & vbNewLine & _
           "    h1 { color: #006EB6; font-weight: 600; margin-top: 0; padding-bottom: 15px; border-bottom: 2px solid #f0f0f0; }" & vbNewLine & _
           "    h2 { color: #006EB6; font-weight: 500; margin-top: 30px; margin-bottom: 15px; }" & vbNewLine & _
           "    .entry-id { background-color: #006EB6; color: #ffffff; display: inline-block; padding: 8px 15px; font-weight: bold; margin-bottom: 20px; border-radius: 4px; }" & vbNewLine & _
           "    .status-banner { padding: 15px; margin: 20px 0; border-radius: 4px; background-color: #E2F4FF; color: #006EB6; font-weight: 500; }" & vbNewLine & _
           "    table { width: 100%; border-collapse: collapse; margin: 25px 0; border-radius: 4px; overflow: hidden; }" & vbNewLine & _
           "    th { background-color: #006EB6; color: #ffffff; font-weight: 500; text-align: left; padding: 12px 15px; }" & vbNewLine & _
           "    td { padding: 12px 15px; border-bottom: 1px solid #f0f0f0; }" & vbNewLine & _
           "    tr:last-child td { border-bottom: none; }" & vbNewLine & _
           "    tr:nth-child(even) { background-color: #f9f9f9; }" & vbNewLine & _
           "    .category-cell { font-weight: 500; }" & vbNewLine & _
           "    .status { padding: 5px 10px; font-weight: 500; display: inline-block; border-radius: 4px; }" & vbNewLine & _
           "    .status-pending { background-color: #17a2b8; color: #ffffff; }" & vbNewLine & _
           "    .status-approved { background-color: #4CAF50; color: #ffffff; }" & vbNewLine & _
           "    .status-rejected { background-color: #dc3545; color: #ffffff; }" & vbNewLine & _
           "    .button-container { text-align: center; margin-top: 30px; }" & vbNewLine & _
           "    .button { background-color: #006EB6; color: #ffffff; padding: 12px 25px; text-decoration: none; font-weight: 500; display: inline-block; border-radius: 4px; transition: background-color 0.3s; }" & vbNewLine & _
           "    .button:hover { background-color: #005a93; }" & vbNewLine & _
           "    .footer { margin-top: 30px; border-top: 2px solid #f0f0f0; padding-top: 20px; color: #666666; font-size: 14px; }" & vbNewLine & _
           "  </style>" & vbNewLine & _
           "</head>" & vbNewLine & _
           "<body>" & vbNewLine & _
           "  <div class='email-container'>" & vbNewLine
    
    ' Add header with logo if available
    If companyLogo <> "" Then
        html = html & "    <div class='header'>" & vbNewLine & _
               "      <img src='" & companyLogo & "' alt='" & companyName & " Logo' class='logo'>" & vbNewLine & _
               "      <h1>" & companyName & " - New Intake Form Submission</h1>" & vbNewLine & _
               "    </div>" & vbNewLine
    Else
        html = html & "    <h1>" & companyName & " - New Intake Form Submission</h1>" & vbNewLine
    End If
    
    html = html & "    <div class='status-banner'>A new intake form has been submitted and is pending review.</div>" & vbNewLine & _
           "    <div class='entry-id'>Entry ID: " & entryId & "</div>" & vbNewLine & _
           "    <p>The following information was submitted:</p>" & vbNewLine & _
           "    <table>" & vbNewLine & _
           "      <tr><th>Category</th><th>Details</th><th>Status</th></tr>" & vbNewLine
    
    ' Loop through form fields (assuming they're in columns A and B, starting from row 2)
    For i = 2 To 15  ' Adjust the range as needed
        If Not IsEmpty(ws.Cells(i, 1)) Then
            fieldName = ws.Cells(i, 1).Value
            fieldValue = ws.Cells(i, 2).Value
            
            ' Escape HTML special characters
            fieldName = Replace(Replace(Replace(fieldName, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            fieldValue = Replace(Replace(Replace(fieldValue, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            
            html = html & "      <tr>" & vbNewLine & _
                   "        <td class='category-cell'>" & fieldName & "</td>" & vbNewLine & _
                   "        <td>" & fieldValue & "</td>" & vbNewLine & _
                   "        <td><div class='status status-pending'>Pending Review</div></td>" & vbNewLine & _
                   "      </tr>" & vbNewLine
        End If
    Next i
    
    html = html & "    </table>" & vbNewLine & _
           "    <div class='button-container'>" & vbNewLine & _
           "      <a href='#' class='button'>View Full Details →</a>" & vbNewLine & _
           "    </div>" & vbNewLine & _
           "    <div class='footer'>" & vbNewLine & _
           "      <p>Thank you for using our intake form system. If you have any questions, please contact support.</p>" & vbNewLine & _
           "      <p>© " & Year(Now()) & " " & companyName & ". All rights reserved.</p>" & vbNewLine & _
           "    </div>" & vbNewLine & _
           "  </div>" & vbNewLine & _
           "</body>" & vbNewLine & _
           "</html>"
    
    BuildSubmissionEmailHTML = html
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "BuildSubmissionEmailHTML", Err.Number, Err.Description
    BuildSubmissionEmailHTML = ""
End Function

' Function to build HTML email for review notification
Private Function BuildReviewEmailHTML(wsData As Worksheet, rowIndex As Long, entryId As Long, status As String, comments As String, reviewer As String) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim i As Integer
    Dim fieldName As String
    Dim fieldValue As String
    Dim statusClass As String
    Dim companyName As String
    Dim companyLogo As String
    
    ' Get company info from settings
    companyName = GetSetting("Company Name", "Your Company")
    companyLogo = GetSetting("Company Logo URL", "")
    
    ' Determine status class based on status
    Select Case status
        Case STATUS_APPROVED
            statusClass = "status-approved"
        Case STATUS_REJECTED
            statusClass = "status-rejected"
        Case Else
            statusClass = "status-pending"
    End Select
    
    ' Start building HTML with modern design
    html = "<!DOCTYPE html>" & vbNewLine & _
           "<html lang='en'>" & vbNewLine & _
           "<head>" & vbNewLine & _
           "  <meta charset='UTF-8'>" & vbNewLine & _
           "  <meta name='viewport' content='width=device-width, initial-scale=1.0'>" & vbNewLine & _
           "  <style>" & vbNewLine & _
           "    body { font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; color: #333333; max-width: 650px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; }" & vbNewLine & _
           "    .email-container { background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); padding: 30px; }" & vbNewLine & _
           "    .header { display: flex; align-items: center; margin-bottom: 25px; }" & vbNewLine & _
           "    .logo { max-height: 60px; margin-right: 20px; }" & vbNewLine & _
           "    h1 { color: #006EB6; font-weight: 600; margin-top: 0; padding-bottom: 15px; border-bottom: 2px solid #f0f0f0; }" & vbNewLine & _
           "    h2 { color: #006EB6; font-weight: 500; margin-top: 30px; margin-bottom: 15px; }" & vbNewLine & _
           "    .entry-id { background-color: #006EB6; color: #ffffff; display: inline-block; padding: 8px 15px; font-weight: bold; margin-bottom: 20px; border-radius: 4px; }" & vbNewLine & _
           "    .status-banner { padding: 15px; margin: 20px 0; border-radius: 4px; font-weight: 500; }" & vbNewLine & _
           "    .status-banner.approved { background-color: #E8F5E9; color: #4CAF50; }" & vbNewLine & _
           "    .status-banner.rejected { background-color: #FFEBEE; color: #dc3545; }" & vbNewLine & _
           "    .status-banner.pending { background-color: #E2F4FF; color: #006EB6; }" & vbNewLine & _
           "    .review-boxes { display: flex; margin: 25px 0; gap: 20px; }" & vbNewLine & _
           "    .review-box { border: 1px solid #f0f0f0; border-radius: 4px; padding: 15px; flex: 1; }" & vbNewLine & _
           "    .review-box h3 { color: #006EB6; margin-top: 0; }" & vbNewLine & _
           "    table { width: 100%; border-collapse: collapse; margin: 25px 0; border-radius: 4px; overflow: hidden; }" & vbNewLine & _
           "    th { background-color: #006EB6; color: #ffffff; font-weight: 500; text-align: left; padding: 12px 15px; }" & vbNewLine & _
           "    td { padding: 12px 15px; border-bottom: 1px solid #f0f0f0; }" & vbNewLine & _
           "    tr:last-child td { border-bottom: none; }" & vbNewLine & _
           "    tr:nth-child(even) { background-color: #f9f9f9; }" & vbNewLine & _
           "    .category-cell { font-weight: 500; }" & vbNewLine & _
           "    .status { padding: 5px 10px; font-weight: 500; display: inline-block; border-radius: 4px; }" & vbNewLine & _
           "    .status-pending { background-color: #17a2b8; color: #ffffff; }" & vbNewLine & _
           "    .status-approved { background-color: #4CAF50; color: #ffffff; }" & vbNewLine & _
           "    .status-rejected { background-color: #dc3545; color: #ffffff; }" & vbNewLine & _
           "    .button-container { text-align: center; margin-top: 30px; }" & vbNewLine & _
           "    .button { background-color: #006EB6; color: #ffffff; padding: 12px 25px; text-decoration: none; font-weight: 500; display: inline-block; border-radius: 4px; transition: background-color 0.3s; }" & vbNewLine & _
           "    .button:hover { background-color: #005a93; }" & vbNewLine & _
           "    .footer { margin-top: 30px; border-top: 2px solid #f0f0f0; padding-top: 20px; color: #666666; font-size: 14px; }" & vbNewLine & _
           "  </style>" & vbNewLine & _
           "</head>" & vbNewLine & _
           "<body>" & vbNewLine & _
           "  <div class='email-container'>" & vbNewLine
    
    ' Add header with logo if available
    If companyLogo <> "" Then
        html = html & "    <div class='header'>" & vbNewLine & _
               "      <img src='" & companyLogo & "' alt='" & companyName & " Logo' class='logo'>" & vbNewLine & _
               "      <h1>" & companyName & " - Intake Form Review</h1>" & vbNewLine & _
               "    </div>" & vbNewLine
    Else
        html = html & "    <h1>" & companyName & " - Intake Form Review</h1>" & vbNewLine
    End If
    
    ' Status banner
    Select Case status
        Case STATUS_APPROVED
            html = html & "    <div class='status-banner approved'>This submission has been approved.</div>" & vbNewLine
        Case STATUS_REJECTED
            html = html & "    <div class='status-banner rejected'>This submission has been rejected.</div>" & vbNewLine
        Case Else
            html = html & "    <div class='status-banner pending'>This submission is pending review.</div>" & vbNewLine
    End Select
    
    html = html & "    <div class='entry-id'>Entry ID: " & entryId & "</div>" & vbNewLine
    
    ' Review details
    html = html & "    <div class='review-boxes'>" & vbNewLine & _
           "      <div class='review-box'>" & vbNewLine & _
           "        <h3>Review Details</h3>" & vbNewLine & _
           "        <p><strong>Status:</strong> <span class='status " & statusClass & "'>" & status & "</span></p>" & vbNewLine & _
           "        <p><strong>Reviewer:</strong> " & reviewer & "</p>" & vbNewLine & _
           "        <p><strong>Date:</strong> " & Format(wsData.Cells(rowIndex, GetColumnIndex(wsData, "Review Date")).Value, "yyyy-mm-dd") & "</p>" & vbNewLine & _
           "      </div>" & vbNewLine & _
           "      <div class='review-box'>" & vbNewLine & _
           "        <h3>Review Comments</h3>" & vbNewLine
    
    If comments <> "" Then
        html = html & "        <p>" & Replace(Replace(Replace(comments, "&", "&amp;"), "<", "&lt;"), ">", "&gt;") & "</p>" & vbNewLine
    Else
        html = html & "        <p>No additional comments provided.</p>" & vbNewLine
    End If
    
    html = html & "      </div>" & vbNewLine & _
           "    </div>" & vbNewLine
    
    ' Submission details
    html = html & "    <h2>Submission Details</h2>" & vbNewLine & _
           "    <table>" & vbNewLine & _
           "      <tr><th>Category</th><th>Details</th><th>Status</th></tr>" & vbNewLine
    
    ' Loop through form data
    For i = 1 To 10  ' Adjust as needed
        If Not IsEmpty(wsData.Cells(1, i)) And Not IsEmpty(wsData.Cells(rowIndex, i)) Then
            fieldName = wsData.Cells(1, i).Value
            fieldValue = wsData.Cells(rowIndex, i).Value
            
            ' Skip metadata columns
            If fieldName <> "Status" And fieldName <> "Review Comments" And _
               fieldName <> "Reviewer" And fieldName <> "Review Date" Then
                
                ' Escape HTML special characters
                fieldName = Replace(Replace(Replace(fieldName, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
                If IsDate(fieldValue) Then
                    fieldValue = Format(fieldValue, "yyyy-mm-dd")
                Else
                    fieldValue = Replace(Replace(Replace(CStr(fieldValue), "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
                End If
                
                html = html & "      <tr>" & vbNewLine & _
                       "        <td class='category-cell'>" & fieldName & "</td>" & vbNewLine & _
                       "        <td>" & fieldValue & "</td>" & vbNewLine & _
                       "        <td><div class='status " & statusClass & "'>" & status & "</div></td>" & vbNewLine & _
                       "      </tr>" & vbNewLine
            End If
        End If
    Next i
    
    html = html & "    </table>" & vbNewLine & _
           "    <div class='button-container'>" & vbNewLine & _
           "      <a href='#' class='button'>View Full Details →</a>" & vbNewLine & _
           "    </div>" & vbNewLine & _
           "    <div class='footer'>" & vbNewLine & _
           "      <p>Thank you for using our intake form system. If you have any questions, please contact support.</p>" & vbNewLine & _
           "      <p>© " & Year(Now()) & " " & companyName & ". All rights reserved.</p>" & vbNewLine & _
           "    </div>" & vbNewLine & _
           "  </div>" & vbNewLine & _
           "</body>" & vbNewLine & _
           "</html>"
    
    BuildReviewEmailHTML = html
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "BuildReviewEmailHTML", Err.Number, Err.Description
    BuildReviewEmailHTML = ""
End Function

'------------------------------------------------------------------------------
' UI ENHANCEMENT FUNCTIONS
'------------------------------------------------------------------------------
' Function to show progress dialog
Private Sub ShowProgressDialog(message As String, percentComplete As Integer)
    On Error Resume Next
    
    ' Create a UserForm dynamically for progress indicator
    Dim frm As Object
    
    ' Check if form already exists
    On Error Resume Next
    Set frm = ThisWorkbook.VBProject.VBComponents("frmProgress")
    On Error GoTo 0
    
    If frm Is Nothing Then
        ' Create new form
        Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
        frm.Name = "frmProgress"
        
        ' Set form properties
        With frm
            .Properties("Caption") = "Processing"
            .Properties("Width") = 400
            .Properties("Height") = 100
            .Properties("StartUpPosition") = 1 ' CenterOwner
        End With
        
        ' Add message label
        Dim lblMessage As Object
        Set lblMessage = frm.Designer.Controls.Add("Forms.Label.1")
        With lblMessage
            .Name = "lblMessage"
            .Left = 10
            .Top = 10
            .Width = 380
            .Height = 20
        End With
        
        ' Add progress bar (using a frame with colored background)
        Dim fraProgress As Object
        Set fraProgress = frm.Designer.Controls.Add("Forms.Frame.1")
        With fraProgress
            .Name = "fraProgressBg"
            .Left = 10
            .Top = 40
            .Width = 380
            .Height = 20
            .BorderStyle = 0 ' None
            .BackColor = COLOR_LIGHT
        End With
        
        Dim fraProgressBar As Object
        Set fraProgressBar = frm.Designer.Controls.Add("Forms.Frame.1")
        With fraProgressBar
            .Name = "fraProgressBar"
            .Left = 10
            .Top = 40
            .Width = 0
            .Height = 20
            .BorderStyle = 0 ' None
            .BackColor = COLOR_PRIMARY
        End With
        
        ' Add percentage label
        Dim lblPercent As Object
        Set lblPercent = frm.Designer.Controls.Add("Forms.Label.1")
        With lblPercent
            .Name = "lblPercent"
            .Left = 10
            .Top = 70
            .Width = 380
            .Height = 20
            .TextAlign = 2 ' Center
        End With
        
        ' Add code to initialize the form
        Dim formCode As String
        formCode = "Public Sub UpdateProgress(message As String, percentComplete As Integer)" & vbNewLine & _
                   "  Me.lblMessage.Caption = message" & vbNewLine & _
                   "  Me.fraProgressBar.Width = (percentComplete / 100) * 380" & vbNewLine & _
                   "  Me.lblPercent.Caption = percentComplete & ""%""" & vbNewLine & _
                   "  DoEvents" & vbNewLine & _
                   "End Sub"
        
        frm.CodeModule.AddFromString formCode
    End If
    
    ' Show the form if not already visible
    If Not IsFormLoaded("frmProgress") Then
        ExecuteExcel4Macro "SHOW.DIALOG([frmProgress])"
    End If
    
    ' Update progress
    Application.Run "frmProgress.UpdateProgress", message, percentComplete
End Sub

' Function to hide progress dialog
Private Sub HideProgressDialog()
    On Error Resume Next
    
    ' Check if form exists
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents("frmProgress")
    
    If Not frm Is Nothing Then
        ' Hide the form
        ExecuteExcel4Macro "HIDE.DIALOG([frmProgress])"
    End If
End Sub

' Function to check if a form is loaded
Private Function IsFormLoaded(formName As String) As Boolean
    On Error Resume Next
    
    IsFormLoaded = (ExecuteExcel4Macro("ISREF(" & formName & "!Visible)") <> 0)
End Function

' Function to show animated message
Private Sub ShowAnimatedMessage(message As String, title As String, style As VbMsgBoxStyle)
    On Error Resume Next
    
    ' Create a UserForm dynamically for animated message
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = title
        .Properties("Width") = 400
        .Properties("Height") = 200
        .Properties("StartUpPosition") = 1 ' CenterOwner
    End With
    
    ' Add icon based on style
    Dim imgIcon As Object
    Set imgIcon = frm.Designer.Controls.Add("Forms.Image.1")
    With imgIcon
        .Left = 20
        .Top = 20
        .Width = 32
        .Height = 32
        
        ' Set icon based on style
        Select Case style
            Case vbInformation
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 5)
            Case vbExclamation
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 2)
            Case vbCritical
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 3)
            Case vbQuestion
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 4)
        End Select
    End With
    
    ' Add message label
    Dim lblMessage As Object
    Set lblMessage = frm.Designer.Controls.Add("Forms.Label.1")
    With lblMessage
        .Left = 70
        .Top = 20
        .Width = 310
        .Height = 100
        .Caption = message
        .WordWrap = True
    End With
    
    ' Add OK button
    Dim btnOK As Object
    Set btnOK = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnOK
        .Left = 150
        .Top = 150
        .Width = 100
        .Height = 30
        .Caption = "OK"
        .Default = True
        .Cancel = True
    End With
    
    ' Add code to handle button click and animation
    Dim formCode As String
    formCode = "Private Sub UserForm_Initialize()" & vbNewLine & _
               "  Me.Opacity = 0" & vbNewLine & _
               "  FadeIn" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  FadeOut" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub FadeIn()" & vbNewLine & _
               "  Dim i As Integer" & vbNewLine & _
               "  For i = 0 To 100 Step 5" & vbNewLine & _
               "    Me.Opacity = i / 100" & vbNewLine & _
               "    Sleep 10" & vbNewLine & _
               "  Next i" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub FadeOut()" & vbNewLine & _
               "  Dim i As Integer" & vbNewLine & _
               "  For i = 100 To 0 Step -5" & vbNewLine & _
               "    Me.Opacity = i / 100" & vbNewLine & _
               "    Sleep 10" & vbNewLine & _
               "  Next i" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub Sleep(milliseconds As Long)" & vbNewLine & _
               "  Dim startTime As Double" & vbNewLine & _
               "  startTime = Timer" & vbNewLine & _
               "  Do While Timer < startTime + (milliseconds / 1000)" & vbNewLine & _
               "    DoEvents" & vbNewLine & _
               "  Loop" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Sub

' Function to show error message with details
Private Sub ShowErrorMessage(functionName As String, errorNumber As Long, errorDescription As String)
    On Error Resume Next
    
    ' Log the error
    LogError functionName, errorNumber, errorDescription
    
    ' Create a UserForm dynamically for error message
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Error"
        .Properties("Width") = 500
        .Properties("Height") = 300
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add error icon
    Dim imgIcon As Object
    Set imgIcon = frm.Designer.Controls.Add("Forms.Image.1")
    With imgIcon
        .Left = 20
        .Top = 20
        .Width = 32
        .Height = 32
        .Picture = LoadPicture("C:\Windows\System32\user32.dll", 3)
    End With
    
    ' Add error title
    Dim lblTitle As Object
    Set lblTitle = frm.Designer.Controls.Add("Forms.Label.1")
    With lblTitle
        .Left = 70
        .Top = 20
        .Width = 410
        .Height = 20
        .Caption = "An error occurred in " & functionName
        .Font.Bold = True
        .ForeColor = COLOR_DANGER
    End With
    
    ' Add error message
    Dim lblMessage As Object
    Set lblMessage = frm.Designer.Controls.Add("Forms.Label.1")
    With lblMessage
        .Left = 70
        .Top = 50
        .Width = 410
        .Height = 40
        .Caption = errorDescription
        .WordWrap = True
    End With
    
    ' Add error details frame
    Dim fraDetails As Object
    Set fraDetails = frm.Designer.Controls.Add("Forms.Frame.1")
    With fraDetails
        .Left = 20
        .Top = 100
        .Width = 460
        .Height = 150
        .Caption = "Technical Details"
    End With
    
    ' Add error details
    Dim txtDetails As Object
    Set txtDetails = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtDetails
        .Left = 30
        .Top = 120
        .Width = 440
        .Height = 120
        .MultiLine = True
        .ScrollBars = 2 ' Vertical
        .Text = "Function: " & functionName & vbNewLine & _
                "Error Number: " & errorNumber & vbNewLine & _
                "Description: " & errorDescription & vbNewLine & _
                "Time: " & Now() & vbNewLine & _
                "User: " & GetCurrentUser()
    End With
    
    ' Add OK button
    Dim btnOK As Object
    Set btnOK = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnOK
        .Left = 380
        .Top = 260
        .Width = 100
        .Height = 30
        .Caption = "OK"
        .Default = True
        .Cancel = True
    End With
    
    ' Add code to handle button click
    Dim formCode As String
    formCode = "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Sub

' Function to show modern dialog
Private Sub ShowModernDialog(title As String, message As String, dialogType As String)
    On Error Resume Next
    
    ' Create a UserForm dynamically for modern dialog
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = title
        .Properties("Width") = 400
        .Properties("Height") = 200
        .Properties("StartUpPosition") = 1 ' CenterOwner
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add icon based on dialog type
    Dim imgIcon As Object
    Set imgIcon = frm.Designer.Controls.Add("Forms.Image.1")
    With imgIcon
        .Left = 20
        .Top = 20
        .Width = 32
        .Height = 32
        
        ' Set icon based on dialog type
        Select Case LCase(dialogType)
            Case "info", "information"
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 5)
            Case "warning"
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 2)
            Case "error"
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 3)
            Case "question"
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 4)
        End Select
    End With
    
    ' Add message label
    Dim lblMessage As Object
    Set lblMessage = frm.Designer.Controls.Add("Forms.Label.1")
    With lblMessage
        .Left = 70
        .Top = 20
        .Width = 310
        .Height = 100
        .Caption = message
        .WordWrap = True
    End With
    
    ' Add OK button
    Dim btnOK As Object
    Set btnOK = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnOK
        .Left = 150
        .Top = 150
        .Width = 100
        .Height = 30
        .Caption = "OK"
        .Default = True
        .Cancel = True
    End With
    
    ' Add code to handle button click
    Dim btnCode As String
    btnCode = "Private Sub CommandButton1_Click()" & vbNewLine & _
              "  Me.Hide" & vbNewLine & _
              "End Sub"
    
    frm.CodeModule.AddFromString btnCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Sub

'------------------------------------------------------------------------------
' FORM MANAGEMENT FUNCTIONS
'------------------------------------------------------------------------------
' Subroutine to clear form
Private Sub ClearForm(ws As Worksheet)
    On Error GoTo ErrorHandler
    
    Dim wsDefaults As Worksheet
    Dim i As Integer
    
    ' Try to get DefaultValues worksheet
    On Error Resume Next
    Set wsDefaults = ThisWorkbook.Worksheets(SHEET_DEFAULTS)
    On Error GoTo ErrorHandler
    
    ' Show progress
    ShowProgressDialog "Clearing form...", 0
    
    ' Check if DefaultValues sheet exists
    If wsDefaults Is Nothing Then
        ' No DefaultValues sheet, just clear the form
        Dim clearRange As Range
        Set clearRange = ws.Range("B2:B15")  ' Adjust range as needed
        clearRange.ClearContents
        
        ShowProgressDialog "Form cleared", 100
        Debug.Print "DefaultValues sheet not found. Form cleared."
    Else
        ' DefaultValues sheet exists, load default values
        Dim lastRow As Long
        lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
        
        For i = 2 To lastRow
            If Not IsEmpty(ws.Cells(i, 1)) Then
                ShowProgressDialog "Loading default values...", Int((i - 2) / (lastRow - 2) * 100)
                
                ' Find the corresponding default value by field name
                Dim fieldName As String
                Dim defaultCell As Range
                
                fieldName = ws.Cells(i, 1).Value
                Set defaultCell = FindDefaultCell(wsDefaults, fieldName)
                
                If Not defaultCell Is Nothing Then
                    ' Copy default value to the form
                    ws.Cells(i, 2).Value = defaultCell.Offset(0, 1).Value
                Else
                    ' No default found, clear the cell
                    ws.Cells(i, 2).ClearContents
                End If
            End If
        Next i
        
        ShowProgressDialog "Default values loaded", 100
        Debug.Print "Default values loaded from DefaultValues sheet."
    End If
    
    ' Hide progress dialog
    HideProgressDialog
    
    Exit Sub
    
ErrorHandler:
    HideProgressDialog
    ShowErrorMessage "ClearForm", Err.Number, Err.Description
    
    ' Fall back to simple clearing if there's an error
    On Error Resume Next
    Dim fallbackRange As Range
    Set fallbackRange = ws.Range("B2:B15")
    fallbackRange.ClearContents
End Sub

' Helper function to find a default value cell by field name
Private Function FindDefaultCell(wsDefaults As Worksheet, fieldName As String) As Range
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long
    
    lastRow = wsDefaults.Cells(wsDefaults.Rows.Count, 1).End(xlUp).Row
    
    For i = 1 To lastRow
        If wsDefaults.Cells(i, 1).Value = fieldName Then
            Set FindDefaultCell = wsDefaults.Cells(i, 1)
            Exit Function
        End If
    Next i
    
    ' Field name not found
    Set FindDefaultCell = Nothing
    
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in FindDefaultCell: " & Err.Description
    Set FindDefaultCell = Nothing
End Function

' Subroutine to format data sheet
Private Sub FormatDataSheet(wsData As Worksheet)
    On Error GoTo ErrorHandler
    
    Dim dataRange As Range
    Dim lastRow As Long
    Dim lastCol As Long
    
    ' Find the last row and column with data
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    lastCol = wsData.Cells(1, wsData.Columns.Count).End(xlToLeft).Column
    
    ' Ensure we have headers for the metadata columns
    AddMetadataColumns wsData, wsData.Range("1:1")
    
    ' Set the data range
    Set dataRange = wsData.Range(wsData.Cells(1, 1), wsData.Cells(lastRow, lastCol))
    
    With dataRange
        ' Add borders
        .Borders.LineStyle = xlContinuous
        .Borders.Weight = xlThin
        
        ' Format header row
        .Rows(1).Font.Bold = True
        .Rows(1).Interior.Color = COLOR_PRIMARY
        .Rows(1).Font.Color = vbWhite
        
        ' Autofit columns
        .Columns.AutoFit
        
        ' Add alternating row colors
        Dim i As Long
        For i = 2 To lastRow Step 2
            .Rows(i).Interior.Color = COLOR_LIGHT
        Next i
    End With
    
    ' Get status column index
    Dim statusColIndex As Long
    statusColIndex = GetColumnIndex(wsData, "Status")
    
    If statusColIndex > 0 Then
        ' Get status range
        Dim statusRange As Range
        Set statusRange = wsData.Range(wsData.Cells(2, statusColIndex), wsData.Cells(lastRow, statusColIndex))
        
        ' Clear existing conditional formatting
        statusRange.FormatConditions.Delete
        
        ' Format "Pending Review" as blue
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_PENDING & """")
            .Interior.Color = COLOR_INFO
            .Font.Color = vbBlack
        End With
        
        ' Format "Approved" as green
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_APPROVED & """")
            .Interior.Color = COLOR_SUCCESS
            .Font.Color = vbWhite
        End With
        
        ' Format "Rejected" as red
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_REJECTED & """")
            .Interior.Color = COLOR_DANGER
            .Font.Color = vbWhite
        End With
        
        ' Format "Archived" as gray
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_ARCHIVED & """")
            .Interior.Color = COLOR_DARK
            .Font.Color = vbWhite
        End With
    End If
    
    ' Add data validation for Status column if it exists
    If statusColIndex > 0 Then
        Dim statusValidationRange As Range
        Set statusValidationRange = wsData.Range(wsData.Cells(2, statusColIndex), wsData.Cells(lastRow, statusColIndex))
        
        With statusValidationRange.Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:=STATUS_PENDING & "," & STATUS_APPROVED & "," & STATUS_REJECTED & "," & STATUS_ARCHIVED
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = "Select Status"
            .ErrorTitle = "Invalid Status"
            .InputMessage = "Please select a status from the dropdown list."
            .ErrorMessage = "Please select a valid status from the dropdown list."
            .ShowInput = True
            .ShowError = True
        End With
    End If
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "FormatDataSheet", Err.Number, Err.Description
End Sub

'------------------------------------------------------------------------------
' REVIEW FUNCTIONS
'------------------------------------------------------------------------------
' Function to review submissions
Public Sub ReviewSubmission()
    On Error GoTo ErrorHandler
    
    Dim wsData As Worksheet
    Dim entryId As Long
    Dim rowIndex As Long
    Dim statusValue As String
    Dim comments As String
    Dim reviewer As String
    Dim emailSent As Boolean
    Dim reviewData As Object
    
    Set wsData = ThisWorkbook.Worksheets(SHEET_INTAKE_DATA)
    
    ' Get entry ID to review
    entryId = Application.InputBox("Enter the Entry ID to review:", "Review Submission", Type:=1)
    If entryId = 0 Then
        ' User canceled
        Exit Sub
    End If
    
    ' Find the row with the entry ID
    rowIndex = FindEntryRow(wsData, entryId)
    If rowIndex = 0 Then
        ShowModernDialog "Entry Not Found", "Entry ID " & entryId & " not found.", "warning"
        Exit Sub
    End If
    
    ' Get current status
    statusValue = wsData.Cells(rowIndex, GetColumnIndex(wsData, "Status")).Value
    If statusValue <> STATUS_PENDING Then
        ' Entry has already been reviewed
        If MsgBox("This entry has already been reviewed as '" & statusValue & "'." & vbNewLine & _
                 "Do you want to review it again?", vbYesNo + vbQuestion) = vbNo Then
            Exit Sub
        End If
    End If
    
    ' Show review form
    Dim reviewResult As Variant
    reviewResult = ShowReviewForm(wsData, rowIndex, entryId)
    
    ' Check if review was canceled
    If Not IsArray(reviewResult) Then
        Exit Sub
    End If
    
    ' Extract review data
    statusValue = reviewResult(0)
    comments = reviewResult(1)
    reviewer = reviewResult(2)
    
    ' Update the data
    wsData.Cells(rowIndex, GetColumnIndex(wsData, "Status")).Value = statusValue
    wsData.Cells(rowIndex, GetColumnIndex(wsData, "Review Comments")).Value = comments
    wsData.Cells(rowIndex, GetColumnIndex(wsData, "Reviewer")).Value = reviewer
    wsData.Cells(rowIndex, GetColumnIndex(wsData, "Review Date")).Value = Now()
    
    ' Create review data dictionary for email
    Set reviewData = CreateObject("Scripting.Dictionary")
    reviewData.Add "Worksheet", wsData
    reviewData.Add "RowIndex", rowIndex
    reviewData.Add "Status", statusValue
    reviewData.Add "Comments", comments
    reviewData.Add "Reviewer", reviewer
    
    ' Send notification email
    emailSent = SendEmail(Nothing, entryId, etReview, reviewData)
    
    ' Format data sheet
    FormatDataSheet wsData
    
    ' Update dashboard
    UpdateDashboard
    
    ' Show confirmation
    If emailSent Then
        ShowAnimatedMessage "Review completed successfully and notification email sent!", "Review Complete", vbInformation
    Else
        ShowAnimatedMessage "Review completed successfully, but notification email could not be sent.", "Review Complete with Warning", vbInformation
    End If
    
    ' Log the activity
    LogActivity "Form reviewed", "Entry ID: " & entryId & ", Status: " & statusValue
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "ReviewSubmission", Err.Number, Err.Description
End Sub

' Function to show review form
Private Function ShowReviewForm(wsData As Worksheet, rowIndex As Long, entryId As Long) As Variant
    On Error GoTo ErrorHandler
    
    ' Create a UserForm dynamically for review
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Review Submission - Entry ID: " & entryId
        .Properties("Width") = 600
        .Properties("Height") = 500
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add form header
    Dim lblHeader As Object
    Set lblHeader = frm.Designer.Controls.Add("Forms.Label.1")
    With lblHeader
        .Left = 10
        .Top = 10
        .Width = 580
        .Height = 30
        .Caption = "Review Submission - Entry ID: " & entryId
        .Font.Size = 14
        .Font.Bold = True
        .ForeColor = COLOR_PRIMARY
    End With
    
    ' Add submission details frame
    Dim fraDetails As Object
    Set fraDetails = frm.Designer.Controls.Add("Forms.Frame.1")
    With fraDetails
        .Left = 10
        .Top = 50
        .Width = 580
        .Height = 200
        .Caption = "Submission Details"
    End With
    
    ' Add submission details listview
    Dim lvwDetails As Object
    Set lvwDetails = frm.Designer.Controls.Add("Forms.ListView.1")
    With lvwDetails
        .Left = 20
        .Top = 70
        .Width = 560
        .Height = 170
        .View = 3 ' Report view
    End With
    
    ' Add review options frame
    Dim fraReview As Object
    Set fraReview = frm.Designer.Controls.Add("Forms.Frame.1")
    With fraReview
        .Left = 10
        .Top = 260
        .Width = 580
        .Height = 180
        .Caption = "Review"
    End With
    
    ' Add reviewer label
    Dim lblReviewer As Object
    Set lblReviewer = frm.Designer.Controls.Add("Forms.Label.1")
    With lblReviewer
        .Left = 20
        .Top = 280
        .Width = 100
        .Height = 20
        .Caption = "Reviewer:"
    End With
    
    ' Add reviewer textbox
    Dim txtReviewer As Object
    Set txtReviewer = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtReviewer
        .Left = 130
        .Top = 280
        .Width = 450
        .Height = 20
        .Text = GetCurrentUser()
    End With
    
    ' Add status label
    Dim lblStatus As Object
    Set lblStatus = frm.Designer.Controls.Add("Forms.Label.1")
    With lblStatus
        .Left = 20
        .Top = 310
        .Width = 100
        .Height = 20
        .Caption = "Status:"
    End With
    
    ' Add status option buttons
    Dim optApprove As Object
    Set optApprove = frm.Designer.Controls.Add("Forms.OptionButton.1")
    With optApprove
        .Left = 130
        .Top = 310
        .Width = 100
        .Height = 20
        .Caption = "Approve"
        .Value = True
    End With
    
    Dim optReject As Object
    Set optReject = frm.Designer.Controls.Add("Forms.OptionButton.1")
    With optReject
        .Left = 240
        .Top = 310
        .Width = 100
        .Height = 20
        .Caption = "Reject"
    End With
    
    ' Add comments label
    Dim lblComments As Object
    Set lblComments = frm.Designer.Controls.Add("Forms.Label.1")
    With lblComments
        .Left = 20
        .Top = 340
        .Width = 100
        .Height = 20
        .Caption = "Comments:"
    End With
    
    ' Add comments textbox
    Dim txtComments As Object
    Set txtComments = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtComments
        .Left = 130
        .Top = 340
        .Width = 450
        .Height = 80
        .MultiLine = True
        .ScrollBars = 2 ' Vertical
    End With
    
    ' Add buttons
    Dim btnSubmit As Object
    Set btnSubmit = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnSubmit
        .Left = 400
        .Top = 450
        .Width = 90
        .Height = 30
        .Caption = "Submit"
        .Default = True
    End With
    
    Dim btnCancel As Object
    Set btnCancel = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnCancel
        .Left = 500
        .Top = 450
        .Width = 90
        .Height = 30
        .Caption = "Cancel"
        .Cancel = True
    End With
    
    ' Add code to initialize the form and handle buttons
    Dim formCode As String
    formCode = "Dim Result As Variant" & vbNewLine & _
               "Private Sub UserForm_Initialize()" & vbNewLine & _
               "  ' Initialize ListView columns" & vbNewLine & _
               "  With ListView1" & vbNewLine & _
               "    .ColumnHeaders.Add , , ""Field"", 150" & vbNewLine & _
               "    .ColumnHeaders.Add , , ""Value"", 400" & vbNewLine & _
               "  End With" & vbNewLine & _
               "  " & vbNewLine & _
               "  ' Load submission details" & vbNewLine & _
               "  LoadSubmissionDetails" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub LoadSubmissionDetails()" & vbNewLine & _
               "  Dim ws As Worksheet" & vbNewLine & _
               "  Dim i As Long, lastCol As Long" & vbNewLine & _
               "  Dim item As Object" & vbNewLine & _
               "  " & vbNewLine & _
               "  Set ws = ThisWorkbook.Worksheets(""" & SHEET_INTAKE_DATA & """)" & vbNewLine & _
               "  lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column" & vbNewLine & _
               "  " & vbNewLine & _
               "  For i = 1 To lastCol" & vbNewLine & _
               "    If ws.Cells(1, i).Value <> ""Status"" And ws.Cells(1, i).Value <> ""Review Comments"" And _" & vbNewLine & _
               "       ws.Cells(1, i).Value <> ""Reviewer"" And ws.Cells(1, i).Value <> ""Review Date"" Then" & vbNewLine & _
               "      If Not IsEmpty(ws.Cells(" & rowIndex & ", i).Value) Then" & vbNewLine & _
               "        Set item = ListView1.ListItems.Add(, , ws.Cells(1, i).Value)" & vbNewLine & _
               "        item.SubItems(1) = ws.Cells(" & rowIndex & ", i).Value" & vbNewLine & _
               "      End If" & vbNewLine & _
               "    End If" & vbNewLine & _
               "  Next i" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  ' Validate inputs" & vbNewLine & _
               "  If TextBox1.Text = """" Then" & vbNewLine & _
               "    MsgBox ""Please enter your name."", vbExclamation" & vbNewLine & _
               "    TextBox1.SetFocus" & vbNewLine & _
               "    Exit Sub" & vbNewLine & _
               "  End If" & vbNewLine & _
               "  " & vbNewLine & _
               "  ' Set result" & vbNewLine & _
               "  ReDim Result(0 To 2)" & vbNewLine & _
               "  " & vbNewLine & _
               "  If OptionButton1.Value Then" & vbNewLine & _
               "    Result(0) = """ & STATUS_APPROVED & """" & vbNewLine & _
               "  Else" & vbNewLine & _
               "    Result(0) = """ & STATUS_REJECTED & """" & vbNewLine & _
               "  End If" & vbNewLine & _
               "  " & vbNewLine & _
               "  Result(1) = TextBox2.Text" & vbNewLine & _
               "  Result(2) = TextBox1.Text" & vbNewLine & _
               "  " & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton2_Click()" & vbNewLine & _
               "  Result = Null" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Get the result
    On Error Resume Next
    ShowReviewForm = ExecuteExcel4Macro("GET(" & frm.Name & "!Result)")
    On Error GoTo ErrorHandler
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "ShowReviewForm", Err.Number, Err.Description
    ShowReviewForm = Null
End Function

' Function to find the row index for an entry ID
Private Function FindEntryRow(wsData As Worksheet, entryId As Long) As Long
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    For i = 2 To lastRow
        If wsData.Cells(i, 1).Value = entryId Then
            FindEntryRow = i
            Exit Function
        End If
    Next i
    
    ' Entry not found
    FindEntryRow = 0
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "FindEntryRow", Err.Number, Err.Description
    FindEntryRow = 0
End Function

'------------------------------------------------------------------------------
' DASHBOARD FUNCTIONS
'------------------------------------------------------------------------------
' Function to update dashboard
Private Sub UpdateDashboard()
    On Error GoTo ErrorHandler
    
    Dim wsDashboard As Worksheet
    Dim wsData As Worksheet
    Dim lastRow As Long
    Dim statusColIndex As Long
    Dim dateColIndex As Long
    
    ' Check if Dashboard sheet exists
    On Error Resume Next
    Set wsDashboard = ThisWorkbook.Worksheets(SHEET_DASHBOARD)
    On Error GoTo ErrorHandler
    
    ' Create Dashboard sheet if it doesn't exist
    If wsDashboard Is Nothing Then
        Set wsDashboard = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsDashboard.Name = SHEET_DASHBOARD
        
        ' Set up dashboard layout
        SetupDashboardLayout wsDashboard
    End If
    
    ' Get data sheet
    Set wsData = ThisWorkbook.Worksheets(SHEET_INTAKE_DATA)
    
    ' Find last row with data
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    ' Get column indexes
    statusColIndex = GetColumnIndex(wsData, "Status")
    dateColIndex = GetColumnIndex(wsData, "Submission Date")
    
    ' Clear existing dashboard data
    ClearDashboardData wsDashboard
    
    ' Update dashboard data
    UpdateStatusCounts wsDashboard, wsData, lastRow, statusColIndex
    UpdateTimelineChart wsDashboard, wsData, lastRow, dateColIndex, statusColIndex
    UpdateRecentSubmissions wsDashboard, wsData, lastRow
    
    ' Format dashboard
    FormatDashboard wsDashboard
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "UpdateDashboard", Err.Number, Err.Description
End Sub

' Function to set up dashboard layout
Private Sub SetupDashboardLayout(wsDashboard As Worksheet)
    On Error GoTo ErrorHandler
    
    ' Set up dashboard title
    With wsDashboard.Range("A1:J1").Merge
        .Value = "INTAKE FORM DASHBOARD"
        .Font.Size = 18
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Interior.Color = COLOR_PRIMARY
        .Font.Color = vbWhite
    End With
    
    ' Set up status counts section
    wsDashboard.Range("A3").Value = "STATUS SUMMARY"
    wsDashboard.Range("A3").Font.Bold = True
    wsDashboard.Range("A3").Font.Size = 14
    
    wsDashboard.Range("A4").Value = "Status"
    wsDashboard.Range("B4").Value = "Count"
    wsDashboard.Range("A4:B4").Font.Bold = True
    
    wsDashboard.Range("A5").Value = STATUS_PENDING
    wsDashboard.Range("A6").Value = STATUS_APPROVED
    wsDashboard.Range("A7").Value = STATUS_REJECTED
    wsDashboard.Range("A8").Value = STATUS_ARCHIVED
    wsDashboard.Range("A9").Value = "Total"
    wsDashboard.Range("A9").Font.Bold = True
    
    ' Set up timeline chart section
    wsDashboard.Range("D3").Value = "SUBMISSION TIMELINE"
    wsDashboard.Range("D3").Font.Bold = True
    wsDashboard.Range("D3").Font.Size = 14
    
    ' Set up recent submissions section
    wsDashboard.Range("A11").Value = "RECENT SUBMISSIONS"
    wsDashboard.Range("A11").Font.Bold = True
    wsDashboard.Range("A11").Font.Size = 14
    
    wsDashboard.Range("A12").Value = "Entry ID"
    wsDashboard.Range("B12").Value = "Submission Date"
    wsDashboard.Range("C12").Value = "Status"
    wsDashboard.Range("D12").Value = "Reviewer"
    wsDashboard.Range("E12").Value = "Review Date"
    wsDashboard.Range("A12:E12").Font.Bold = True
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "SetupDashboardLayout", Err.Number, Err.Description
End Sub

' Function to clear dashboard data
Private Sub ClearDashboardData(wsDashboard As Worksheet)
    On Error GoTo ErrorHandler
    
    ' Clear status counts
    wsDashboard.Range("B5:B9").ClearContents
    
    ' Clear timeline chart
    On Error Resume Next
    wsDashboard.ChartObjects("TimelineChart").Delete
    On Error GoTo ErrorHandler
    
    ' Clear recent submissions
    Dim lastRow As Long
    lastRow = wsDashboard.Cells(wsDashboard.Rows.Count, "A").End(xlUp).Row
    
    If lastRow > 12 Then
        wsDashboard.Range("A13:E" & lastRow).ClearContents
    End If
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "ClearDashboardData", Err.Number, Err.Description
End Sub

' Function to update status counts
Private Sub UpdateStatusCounts(wsDashboard As Worksheet, wsData As Worksheet, lastRow As Long, statusColIndex As Long)
    On Error GoTo ErrorHandler
    
    Dim pendingCount As Long
    Dim approvedCount As Long
    Dim rejectedCount As Long
    Dim archivedCount As Long
    Dim totalCount As Long
    Dim i As Long
    
    ' Count submissions by status
    For i = 2 To lastRow
        Select Case wsData.Cells(i, statusColIndex).Value
            Case STATUS_PENDING
                pendingCount = pendingCount + 1
            Case STATUS_APPROVED
                approvedCount = approvedCount + 1
            Case STATUS_REJECTED
                rejectedCount = rejectedCount + 1
            Case STATUS_ARCHIVED
                archivedCount = archivedCount + 1
        End Select
    Next i
    
    totalCount = pendingCount + approvedCount + rejectedCount + archivedCount
    
    ' Update dashboard
    wsDashboard.Range("B5").Value = pendingCount
    wsDashboard.Range("B6").Value = approvedCount
    wsDashboard.Range("B7").Value = rejectedCount
    wsDashboard.Range("B8").Value = archivedCount
    wsDashboard.Range("B9").Value = totalCount
    
    ' Format cells based on status
    With wsDashboard.Range("A5:B5")
        .Interior.### Enhanced Intake Form System in VBA

I've redesigned the VBA code to be more stunning, sleek, and outstanding. The enhanced version includes improved UI elements, better error handling, optimized performance, and additional features.

```vb type="code"
'==============================================================================
' Intake Form Management System
' Version: 2.0
' Author: v0
' Last Updated: 2/28/2025
'==============================================================================
' A comprehensive system for managing intake forms with advanced features:
' - Modern UI with visual indicators
' - Robust email notifications with HTML templates
' - Advanced validation and error handling
' - Dashboard analytics
' - Export capabilities
' - User authentication
'==============================================================================

Option Explicit

'------------------------------------------------------------------------------
' CONSTANTS AND ENUMERATIONS
'------------------------------------------------------------------------------
' Status constants with color codes
Private Const STATUS_PENDING As String = "Pending Review"
Private Const STATUS_APPROVED As String = "Approved"
Private Const STATUS_REJECTED As String = "Rejected"
Private Const STATUS_ARCHIVED As String = "Archived"

' Color constants for UI elements
Private Const COLOR_PRIMARY As Long = &H006EB6     ' Blue
Private Const COLOR_SUCCESS As Long = &H4CAF50     ' Green
Private Const COLOR_WARNING As Long = &HFFC107     ' Yellow
Private Const COLOR_DANGER As Long = &H0000FF      ' Red
Private Const COLOR_INFO As Long = &HE2A929        ' Light Blue
Private Const COLOR_LIGHT As Long = &HEEEEEE       ' Light Gray
Private Const COLOR_DARK As Long = &H333333        ' Dark Gray

' Sheet names
Private Const SHEET_INTAKE_FORM As String = "IntakeForm"
Private Const SHEET_INTAKE_DATA As String = "IntakeData"
Private Const SHEET_SETTINGS As String = "Settings"
Private Const SHEET_DEFAULTS As String = "DefaultValues"
Private Const SHEET_DASHBOARD As String = "Dashboard"

' Email template types
Private Enum EmailTemplateType
    etSubmission = 1
    etReview = 2
    etReminder = 3
    etSummary = 4
End Enum

' User roles
Private Enum UserRole
    urViewer = 1
    urSubmitter = 2
    urReviewer = 3
    urAdmin = 4
End Enum

'------------------------------------------------------------------------------
' TYPE DEFINITIONS
'------------------------------------------------------------------------------
' Form field type definition
Private Type FormField
    Name As String
    Value As Variant
    Required As Boolean
    FieldType As String
    ValidationRule As String
End Type

' User type definition
Private Type UserInfo
    Username As String
    DisplayName As String
    Email As String
    Role As UserRole
    LastLogin As Date
End Type

' Current user information
Private CurrentUser As UserInfo

'------------------------------------------------------------------------------
' MAIN FORM SUBMISSION FUNCTION
'------------------------------------------------------------------------------
Public Sub SubmitIntake()
    On Error GoTo ErrorHandler
    
    ' Show progress indicator
    ShowProgressDialog "Submitting form...", 0
    
    Dim wsInput As Worksheet
    Dim wsData As Worksheet
    Dim entryId As Long
    Dim emailSent As Boolean
    Dim formFields() As FormField
    Dim validationResult As Boolean
    
    ' Initialize worksheets
    Set wsInput = ThisWorkbook.Worksheets(SHEET_INTAKE_FORM)
    Set wsData = ThisWorkbook.Worksheets(SHEET_INTAKE_DATA)
    
    ' Update progress
    ShowProgressDialog "Validating form...", 20
    
    ' Load and validate form fields
    formFields = LoadFormFields(wsInput)
    validationResult = ValidateFormFields(formFields)
    
    If Not validationResult Then
        HideProgressDialog
        Exit Sub
    End If
    
    ' Update progress
    ShowProgressDialog "Generating entry ID...", 40
    
    ' Get next entry ID
    entryId = GetNextEntryId(wsData)
    
    ' Update progress
    ShowProgressDialog "Saving form data...", 60
    
    ' Save form data
    SaveFormData wsInput, wsData, entryId, formFields
    
    ' Update progress
    ShowProgressDialog "Sending email notification...", 80
    
    ' Send email notification
    emailSent = SendEmail(wsInput, entryId, etSubmission)
    
    ' Update progress
    ShowProgressDialog "Finalizing submission...", 90
    
    ' Clear form and format data sheet
    ClearForm wsInput
    FormatDataSheet wsData
    
    ' Update dashboard
    UpdateDashboard
    
    ' Hide progress dialog
    HideProgressDialog
    
    ' Show success message with animation
    If emailSent Then
        ShowAnimatedMessage "Form submitted successfully and email sent!" & vbNewLine & _
               "The submission is now pending review.", "Success", vbInformation
    Else
        ShowAnimatedMessage "Form submitted successfully, but email could not be sent. The data has been saved." & vbNewLine & _
               "The submission is now pending review.", "Success with Warning", vbInformation
    End If
    
    ' Log the activity
    LogActivity "Form submitted", "Entry ID: " & entryId
    
    Exit Sub
    
ErrorHandler:
    HideProgressDialog
    ShowErrorMessage "SubmitIntake", Err.Number, Err.Description
End Sub

'------------------------------------------------------------------------------
' FORM VALIDATION FUNCTIONS
'------------------------------------------------------------------------------
' Function to load form fields from the worksheet
Private Function LoadFormFields(ws As Worksheet) As FormField()
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long, fieldCount As Long
    Dim fields() As FormField
    
    ' Find the last row with field names
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    ' Count valid fields
    fieldCount = 0
    For i = 2 To lastRow
        If Not IsEmpty(ws.Cells(i, 1)) Then
            fieldCount = fieldCount + 1
        End If
    Next i
    
    ' Resize array to hold all fields
    ReDim fields(1 To fieldCount)
    
    ' Load fields
    fieldCount = 0
    For i = 2 To lastRow
        If Not IsEmpty(ws.Cells(i, 1)) Then
            fieldCount = fieldCount + 1
            
            ' Load field properties
            fields(fieldCount).Name = ws.Cells(i, 1).Value
            fields(fieldCount).Value = ws.Cells(i, 2).Value
            
            ' Check if field is required (indicated by * in name)
            fields(fieldCount).Required = (InStr(fields(fieldCount).Name, "*") > 0)
            
            ' Determine field type based on cell format or validation
            fields(fieldCount).FieldType = DetermineFieldType(ws.Cells(i, 2))
            
            ' Get validation rule if any
            If ws.Cells(i, 2).Validation.Type <> xlValidateNone Then
                fields(fieldCount).ValidationRule = GetValidationRule(ws.Cells(i, 2).Validation)
            End If
        End If
    Next i
    
    LoadFormFields = fields
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "LoadFormFields", Err.Number, Err.Description
    ReDim fields(1 To 1)
    LoadFormFields = fields
End Function

' Function to determine field type based on cell format
Private Function DetermineFieldType(cell As Range) As String
    On Error Resume Next
    
    ' Check for date format
    If cell.NumberFormat Like "*d*m*y*" Or cell.NumberFormat Like "*m*d*y*" Or cell.NumberFormat Like "*y*m*d*" Then
        DetermineFieldType = "Date"
        Exit Function
    End If
    
    ' Check for number format
    If cell.NumberFormat Like "0*" Or cell.NumberFormat Like "#*" Or cell.NumberFormat Like "$*" Then
        DetermineFieldType = "Number"
        Exit Function
    End If
    
    ' Check for dropdown validation
    If cell.Validation.Type = xlValidateList Then
        DetermineFieldType = "Dropdown"
        Exit Function
    End If
    
    ' Default to text
    DetermineFieldType = "Text"
End Function

' Function to get validation rule as string
Private Function GetValidationRule(validation As Validation) As String
    On Error Resume Next
    
    Select Case validation.Type
        Case xlValidateList
            GetValidationRule = "List: " & validation.Formula1
        Case xlValidateDecimal, xlValidateWholeNumber
            GetValidationRule = "Range: " & validation.Formula1 & " to " & validation.Formula2
        Case xlValidateDate
            GetValidationRule = "Date: " & validation.Formula1 & " to " & validation.Formula2
        Case xlValidateTextLength
            GetValidationRule = "Length: " & validation.Formula1 & " to " & validation.Formula2
        Case xlValidateCustom
            GetValidationRule = "Custom: " & validation.Formula1
        Case Else
            GetValidationRule = ""
    End Select
End Function

' Function to validate form fields
Private Function ValidateFormFields(fields() As FormField) As Boolean
    On Error GoTo ErrorHandler
    
    Dim i As Long
    Dim errorMessages As String
    Dim hasErrors As Boolean
    
    hasErrors = False
    errorMessages = "Please correct the following issues:" & vbNewLine & vbNewLine
    
    ' Check each field
    For i = LBound(fields) To UBound(fields)
        ' Check required fields
        If fields(i).Required And (IsEmpty(fields(i).Value) Or Trim(CStr(fields(i).Value)) = "") Then
            errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " is required" & vbNewLine
            hasErrors = True
            Continue For
        End If
        
        ' Skip validation for empty non-required fields
        If IsEmpty(fields(i).Value) Or Trim(CStr(fields(i).Value)) = "" Then
            Continue For
        End If
        
        ' Validate based on field type
        Select Case fields(i).FieldType
            Case "Date"
                If Not IsDate(fields(i).Value) Then
                    errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " must be a valid date" & vbNewLine
                    hasErrors = True
                End If
                
            Case "Number"
                If Not IsNumeric(fields(i).Value) Then
                    errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " must be a number" & vbNewLine
                    hasErrors = True
                End If
                
            Case "Email"
                If Not IsValidEmail(CStr(fields(i).Value)) Then
                    errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " must be a valid email address" & vbNewLine
                    hasErrors = True
                End If
        End Select
        
        ' Apply custom validation rules if any
        If fields(i).ValidationRule <> "" And Not ApplyCustomValidation(fields(i).Value, fields(i).ValidationRule) Then
            errorMessages = errorMessages & "- " & Replace(fields(i).Name, "*", "") & " does not meet validation requirements" & vbNewLine
            hasErrors = True
        End If
    Next i
    
    ' Show error message if validation failed
    If hasErrors Then
        ShowValidationErrors errorMessages
        ValidateFormFields = False
    Else
        ValidateFormFields = True
    End If
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "ValidateFormFields", Err.Number, Err.Description
    ValidateFormFields = False
End Function

' Function to validate email format
Private Function IsValidEmail(email As String) As Boolean
    On Error Resume Next
    
    Dim regex As Object
    Set regex = CreateObject("VBScript.RegExp")
    
    With regex
        .Pattern = "^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$"
        .Global = False
        .IgnoreCase = True
        IsValidEmail = .Test(email)
    End With
    
    Set regex = Nothing
End Function

' Function to apply custom validation rules
Private Function ApplyCustomValidation(value As Variant, rule As String) As Boolean
    On Error Resume Next
    
    ' Default to true if no rule
    If rule = "" Then
        ApplyCustomValidation = True
        Exit Function
    End If
    
    ' Parse rule type
    Dim ruleType As String
    Dim ruleParams As String
    
    ruleType = Left(rule, InStr(rule, ":") - 1)
    ruleParams = Mid(rule, InStr(rule, ":") + 1)
    
    ' Apply rule based on type
    Select Case ruleType
        Case "List"
            ' Check if value is in list
            ApplyCustomValidation = (InStr(1, ruleParams, CStr(value), vbTextCompare) > 0)
            
        Case "Range"
            ' Check if value is in range
            Dim minVal As Variant, maxVal As Variant
            minVal = Trim(Left(ruleParams, InStr(ruleParams, "to") - 1))
            maxVal = Trim(Mid(ruleParams, InStr(ruleParams, "to") + 2))
            
            If IsNumeric(value) And IsNumeric(minVal) And IsNumeric(maxVal) Then
                ApplyCustomValidation = (CDbl(value) >= CDbl(minVal) And CDbl(value) <= CDbl(maxVal))
            Else
                ApplyCustomValidation = False
            End If
            
        Case "Length"
            ' Check if text length is in range
            Dim minLen As Long, maxLen As Long
            minLen = CLng(Trim(Left(ruleParams, InStr(ruleParams, "to") - 1)))
            maxLen = CLng(Trim(Mid(ruleParams, InStr(ruleParams, "to") + 2)))
            
            ApplyCustomValidation = (Len(CStr(value)) >= minLen And Len(CStr(value)) <= maxLen)
            
        Case "Custom"
            ' Evaluate custom formula
            ' This is risky but allows for complex validation
            On Error Resume Next
            ApplyCustomValidation = Evaluate(Replace(ruleParams, "value", CStr(value)))
            If Err.Number <> 0 Then ApplyCustomValidation = False
            On Error GoTo 0
            
        Case Else
            ApplyCustomValidation = True
    End Select
End Function

' Function to show validation errors with modern UI
Private Sub ShowValidationErrors(errorMessages As String)
    On Error Resume Next
    
    ' Create a UserForm dynamically for better UI
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Validation Errors"
        .Properties("Width") = 400
        .Properties("Height") = 300
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add a label for the error messages
    Dim lbl As Object
    Set lbl = frm.Designer.Controls.Add("Forms.Label.1")
    With lbl
        .Left = 10
        .Top = 10
        .Width = 380
        .Height = 240
        .Caption = errorMessages
        .ForeColor = COLOR_DANGER
        .Font.Bold = True
    End With
    
    ' Add an OK button
    Dim btn As Object
    Set btn = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btn
        .Left = 150
        .Top = 260
        .Width = 100
        .Height = 30
        .Caption = "OK"
        .Default = True
        .Cancel = True
    End With
    
    ' Add code to close the form when the button is clicked
    Dim btnCode As String
    btnCode = "Private Sub CommandButton1_Click()" & vbNewLine & _
              "  Me.Hide" & vbNewLine & _
              "End Sub"
    frm.CodeModule.AddFromString btnCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Sub

'------------------------------------------------------------------------------
' DATA HANDLING FUNCTIONS
'------------------------------------------------------------------------------
' Function to get the next entry ID
Private Function GetNextEntryId(wsData As Worksheet) As Long
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    If lastRow = 1 Then
        GetNextEntryId = 1
    Else
        ' Get the maximum ID value (in case rows were deleted)
        GetNextEntryId = Application.WorksheetFunction.Max(wsData.Range("A2:A" & lastRow)) + 1
    End If
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "GetNextEntryId", Err.Number, Err.Description
    GetNextEntryId = 1
End Function

' Subroutine to save form data
Private Sub SaveFormData(wsInput As Worksheet, wsData As Worksheet, entryId As Long, formFields() As FormField)
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long, j As Long
    Dim headerRow As Range
    
    ' Get the header row
    Set headerRow = wsData.Range("1:1")
    
    ' Find the last row
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row + 1
    
    ' Save Entry ID
    wsData.Cells(lastRow, "A").Value = entryId
    
    ' Save form data
    For i = LBound(formFields) To UBound(formFields)
        ' Find the column with matching header
        For j = 2 To headerRow.Cells.Count
            If headerRow.Cells(1, j).Value = formFields(i).Name Then
                wsData.Cells(lastRow, j).Value = formFields(i).Value
                Exit For
            End If
        Next j
        
        ' If header not found, add it
        If j > headerRow.Cells.Count Then
            wsData.Cells(1, j).Value = formFields(i).Name
            wsData.Cells(lastRow, j).Value = formFields(i).Value
        End If
    Next i
    
    ' Add metadata columns if they don't exist
    AddMetadataColumns wsData, headerRow
    
    ' Add status and metadata
    wsData.Cells(lastRow, GetColumnIndex(wsData, "Status")).Value = STATUS_PENDING
    wsData.Cells(lastRow, GetColumnIndex(wsData, "Submission Date")).Value = Now()
    wsData.Cells(lastRow, GetColumnIndex(wsData, "Submitter")).Value = GetCurrentUser()
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "SaveFormData", Err.Number, Err.Description
End Sub

' Function to add metadata columns if they don't exist
Private Sub AddMetadataColumns(wsData As Worksheet, headerRow As Range)
    On Error Resume Next
    
    Dim lastCol As Long
    lastCol = headerRow.Cells.Count
    
    ' Add Status column if it doesn't exist
    If GetColumnIndex(wsData, "Status") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Status"
    End If
    
    ' Add Submission Date column if it doesn't exist
    If GetColumnIndex(wsData, "Submission Date") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Submission Date"
    End If
    
    ' Add Submitter column if it doesn't exist
    If GetColumnIndex(wsData, "Submitter") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Submitter"
    End If
    
    ' Add Review Comments column if it doesn't exist
    If GetColumnIndex(wsData, "Review Comments") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Review Comments"
    End If
    
    ' Add Reviewer column if it doesn't exist
    If GetColumnIndex(wsData, "Reviewer") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Reviewer"
    End If
    
    ' Add Review Date column if it doesn't exist
    If GetColumnIndex(wsData, "Review Date") = 0 Then
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Review Date"
    End If
End Sub

' Function to get column index by header name
Private Function GetColumnIndex(ws As Worksheet, headerName As String) As Long
    On Error Resume Next
    
    Dim headerRow As Range
    Dim cell As Range
    
    Set headerRow = ws.Range("1:1")
    
    For Each cell In headerRow.Cells
        If cell.Value = headerName Then
            GetColumnIndex = cell.Column
            Exit Function
        End If
    Next cell
    
    GetColumnIndex = 0
End Function

' Function to get current user name
Private Function GetCurrentUser() As String
    On Error Resume Next
    
    ' Try to get Windows username
    GetCurrentUser = Environ("USERNAME")
    
    ' If that fails, use the name from Excel
    If GetCurrentUser = "" Then
        GetCurrentUser = Application.UserName
    End If
    
    ' If that also fails, use a default
    If GetCurrentUser = "" Then
        GetCurrentUser = "Unknown User"
    End If
End Function

'------------------------------------------------------------------------------
' EMAIL FUNCTIONS
'------------------------------------------------------------------------------
' Function to send email
Private Function SendEmail(wsInput As Worksheet, entryId As Long, templateType As EmailTemplateType, Optional reviewData As Variant) As Boolean
    On Error GoTo ErrorHandler
    
    Dim outlookApp As Object
    Dim mailItem As Object
    Dim htmlBody As String
    Dim userResponse As VbMsgBoxResult
    Dim recipientEmail As String
    Dim emailSubject As String
    
    ' Try to use Outlook
    Set outlookApp = GetOutlookApp()
    
    ' Get recipient email from settings
    recipientEmail = GetSetting("Recipient Email", "recipient@example.com")
    
    If Not outlookApp Is Nothing Then
        Set mailItem = outlookApp.CreateItem(0)  ' 0 = olMailItem
        
        With mailItem
            .To = recipientEmail
            
            ' Set subject and build HTML body based on template type
            Select Case templateType
                Case etSubmission
                    emailSubject = "New Intake Form Submission - Entry ID: " & entryId
                    htmlBody = BuildSubmissionEmailHTML(wsInput, entryId)
                    
                Case etReview
                    emailSubject = "Intake Form Review - Entry ID: " & entryId & " - " & reviewData("Status")
                    htmlBody = BuildReviewEmailHTML(reviewData("Worksheet"), reviewData("RowIndex"), entryId, _
                                                   reviewData("Status"), reviewData("Comments"), reviewData("Reviewer"))
                    
                Case etReminder
                    emailSubject = "Reminder: Pending Intake Forms Require Review"
                    htmlBody = BuildReminderEmailHTML(reviewData)
                    
                Case etSummary
                    emailSubject = "Weekly Intake Form Summary Report"
                    htmlBody = BuildSummaryEmailHTML(reviewData)
            End Select
            
            .Subject = emailSubject
            .HTMLBody = htmlBody
            
            ' Optional: Add attachments if needed
            If templateType = etSummary And Not IsMissing(reviewData) Then
                If reviewData("IncludeAttachment") Then
                    .Attachments.Add reviewData("AttachmentPath")
                End If
            End If
            
            ' Ask user for confirmation with modern dialog
            userResponse = ShowEmailPreview(.To, .Subject, htmlBody)
            
            If userResponse = vbYes Then
                .Send
                SendEmail = True
            Else
                SendEmail = False
            End If
        End With
        
        Set mailItem = Nothing
    Else
        ' Fallback if Outlook is not available
        ShowModernDialog "Email Error", "Outlook is not available. Please make sure Outlook is installed and running.", "warning"
        SendEmail = False
    End If
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "SendEmail", Err.Number, Err.Description
    SendEmail = False
End Function

' Function to get or create Outlook application object
Private Function GetOutlookApp() As Object
    On Error Resume Next
    Set GetOutlookApp = GetObject(, "Outlook.Application")
    If GetOutlookApp Is Nothing Then
        Set GetOutlookApp = CreateObject("Outlook.Application")
    End If
    On Error GoTo 0
End Function

' Function to show email preview with modern UI
Private Function ShowEmailPreview(recipientEmail As String, subject As String, htmlBody As String) As VbMsgBoxResult
    On Error Resume Next
    
    ' Create a UserForm dynamically for better UI
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Email Preview"
        .Properties("Width") = 600
        .Properties("Height") = 500
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add recipient label
    Dim lblTo As Object
    Set lblTo = frm.Designer.Controls.Add("Forms.Label.1")
    With lblTo
        .Left = 10
        .Top = 10
        .Width = 80
        .Height = 20
        .Caption = "To:"
        .Font.Bold = True
    End With
    
    ' Add recipient text
    Dim txtTo As Object
    Set txtTo = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtTo
        .Left = 100
        .Top = 10
        .Width = 480
        .Height = 20
        .Text = recipientEmail
        .Enabled = False
    End With
    
    ' Add subject label
    Dim lblSubject As Object
    Set lblSubject = frm.Designer.Controls.Add("Forms.Label.1")
    With lblSubject
        .Left = 10
        .Top = 40
        .Width = 80
        .Height = 20
        .Caption = "Subject:"
        .Font.Bold = True
    End With
    
    ' Add subject text
    Dim txtSubject As Object
    Set txtSubject = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtSubject
        .Left = 100
        .Top = 40
        .Width = 480
        .Height = 20
        .Text = subject
        .Enabled = False
    End With
    
    ' Add preview label
    Dim lblPreview As Object
    Set lblPreview = frm.Designer.Controls.Add("Forms.Label.1")
    With lblPreview
        .Left = 10
        .Top = 70
        .Width = 580
        .Height = 20
        .Caption = "Email Preview:"
        .Font.Bold = True
    End With
    
    ' Add WebBrowser control for HTML preview
    Dim wb As Object
    Set wb = frm.Designer.Controls.Add("Forms.WebBrowser.1")
    With wb
        .Left = 10
        .Top = 100
        .Width = 580
        .Height = 350
    End With
    
    ' Add Send button
    Dim btnSend As Object
    Set btnSend = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnSend
        .Left = 400
        .Top = 460
        .Width = 90
        .Height = 30
        .Caption = "Send"
        .Default = True
    End With
    
    ' Add Cancel button
    Dim btnCancel As Object
    Set btnCancel = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnCancel
        .Left = 500
        .Top = 460
        .Width = 90
        .Height = 30
        .Caption = "Cancel"
        .Cancel = True
    End With
    
    ' Add code to handle buttons and load HTML
    Dim formCode As String
    formCode = "Dim Result As VbMsgBoxResult" & vbNewLine & _
               "Private Sub UserForm_Initialize()" & vbNewLine & _
               "  Me.WebBrowser1.Navigate ""about:blank""" & vbNewLine & _
               "  Me.WebBrowser1.Document.Write """ & Replace(htmlBody, """", """""") & """" & vbNewLine & _
               "  Result = vbCancel" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  Result = vbYes" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton2_Click()" & vbNewLine & _
               "  Result = vbNo" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Get the result
    ShowEmailPreview = ExecuteExcel4Macro("GET(" & frm.Name & "!Result)")
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Function

' Function to build HTML email for submission
Private Function BuildSubmissionEmailHTML(ws As Worksheet, entryId As Long) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim i As Integer
    Dim fieldName As String
    Dim fieldValue As String
    Dim companyName As String
    Dim companyLogo As String
    
    ' Get company info from settings
    companyName = GetSetting("Company Name", "Your Company")
    companyLogo = GetSetting("Company Logo URL", "")
    
    ' Start building HTML with modern design
    html = "<!DOCTYPE html>" & vbNewLine & _
           "<html lang='en'>" & vbNewLine & _
           "<head>" & vbNewLine & _
           "  <meta charset='UTF-8'>" & vbNewLine & _
           "  <meta name='viewport' content='width=device-width, initial-scale=1.0'>" & vbNewLine & _
           "  <style>" & vbNewLine & _
           "    body { font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; color: #333333; max-width: 650px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; }" & vbNewLine & _
           "    .email-container { background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); padding: 30px; }" & vbNewLine & _
           "    .header { display: flex; align-items: center; margin-bottom: 25px; }" & vbNewLine & _
           "    .logo { max-height: 60px; margin-right: 20px; }" & vbNewLine & _
           "    h1 { color: #006EB6; font-weight: 600; margin-top: 0; padding-bottom: 15px; border-bottom: 2px solid #f0f0f0; }" & vbNewLine & _
           "    h2 { color: #006EB6; font-weight: 500; margin-top: 30px; margin-bottom: 15px; }" & vbNewLine & _
           "    .entry-id { background-color: #006EB6; color: #ffffff; display: inline-block; padding: 8px 15px; font-weight: bold; margin-bottom: 20px; border-radius: 4px; }" & vbNewLine & _
           "    .status-banner { padding: 15px; margin: 20px 0; border-radius: 4px; background-color: #E2F4FF; color: #006EB6; font-weight: 500; }" & vbNewLine & _
           "    table { width: 100%; border-collapse: collapse; margin: 25px 0; border-radius: 4px; overflow: hidden; }" & vbNewLine & _
           "    th { background-color: #006EB6; color: #ffffff; font-weight: 500; text-align: left; padding: 12px 15px; }" & vbNewLine & _
           "    td { padding: 12px 15px; border-bottom: 1px solid #f0f0f0; }" & vbNewLine & _
           "    tr:last-child td { border-bottom: none; }" & vbNewLine & _
           "    tr:nth-child(even) { background-color: #f9f9f9; }" & vbNewLine & _
           "    .category-cell { font-weight: 500; }" & vbNewLine & _
           "    .status { padding: 5px 10px; font-weight: 500; display: inline-block; border-radius: 4px; }" & vbNewLine & _
           "    .status-pending { background-color: #17a2b8; color: #ffffff; }" & vbNewLine & _
           "    .status-approved { background-color: #4CAF50; color: #ffffff; }" & vbNewLine & _
           "    .status-rejected { background-color: #dc3545; color: #ffffff; }" & vbNewLine & _
           "    .button-container { text-align: center; margin-top: 30px; }" & vbNewLine & _
           "    .button { background-color: #006EB6; color: #ffffff; padding: 12px 25px; text-decoration: none; font-weight: 500; display: inline-block; border-radius: 4px; transition: background-color 0.3s; }" & vbNewLine & _
           "    .button:hover { background-color: #005a93; }" & vbNewLine & _
           "    .footer { margin-top: 30px; border-top: 2px solid #f0f0f0; padding-top: 20px; color: #666666; font-size: 14px; }" & vbNewLine & _
           "  </style>" & vbNewLine & _
           "</head>" & vbNewLine & _
           "<body>" & vbNewLine & _
           "  <div class='email-container'>" & vbNewLine
    
    ' Add header with logo if available
    If companyLogo <> "" Then
        html = html & "    <div class='header'>" & vbNewLine & _
               "      <img src='" & companyLogo & "' alt='" & companyName & " Logo' class='logo'>" & vbNewLine & _
               "      <h1>" & companyName & " - New Intake Form Submission</h1>" & vbNewLine & _
               "    </div>" & vbNewLine
    Else
        html = html & "    <h1>" & companyName & " - New Intake Form Submission</h1>" & vbNewLine
    End If
    
    html = html & "    <div class='status-banner'>A new intake form has been submitted and is pending review.</div>" & vbNewLine & _
           "    <div class='entry-id'>Entry ID: " & entryId & "</div>" & vbNewLine & _
           "    <p>The following information was submitted:</p>" & vbNewLine & _
           "    <table>" & vbNewLine & _
           "      <tr><th>Category</th><th>Details</th><th>Status</th></tr>" & vbNewLine
    
    ' Loop through form fields (assuming they're in columns A and B, starting from row 2)
    For i = 2 To 15  ' Adjust the range as needed
        If Not IsEmpty(ws.Cells(i, 1)) Then
            fieldName = ws.Cells(i, 1).Value
            fieldValue = ws.Cells(i, 2).Value
            
            ' Escape HTML special characters
            fieldName = Replace(Replace(Replace(fieldName, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            fieldValue = Replace(Replace(Replace(fieldValue, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            
            html = html & "      <tr>" & vbNewLine & _
                   "        <td class='category-cell'>" & fieldName & "</td>" & vbNewLine & _
                   "        <td>" & fieldValue & "</td>" & vbNewLine & _
                   "        <td><div class='status status-pending'>Pending Review</div></td>" & vbNewLine & _
                   "      </tr>" & vbNewLine
        End If
    Next i
    
    html = html & "    </table>" & vbNewLine & _
           "    <div class='button-container'>" & vbNewLine & _
           "      <a href='#' class='button'>View Full Details →</a>" & vbNewLine & _
           "    </div>" & vbNewLine & _
           "    <div class='footer'>" & vbNewLine & _
           "      <p>Thank you for using our intake form system. If you have any questions, please contact support.</p>" & vbNewLine & _
           "      <p>© " & Year(Now()) & " " & companyName & ". All rights reserved.</p>" & vbNewLine & _
           "    </div>" & vbNewLine & _
           "  </div>" & vbNewLine & _
           "</body>" & vbNewLine & _
           "</html>"
    
    BuildSubmissionEmailHTML = html
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "BuildSubmissionEmailHTML", Err.Number, Err.Description
    BuildSubmissionEmailHTML = ""
End Function

' Function to build HTML email for review notification
Private Function BuildReviewEmailHTML(wsData As Worksheet, rowIndex As Long, entryId As Long, status As String, comments As String, reviewer As String) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim i As Integer
    Dim fieldName As String
    Dim fieldValue As String
    Dim statusClass As String
    Dim companyName As String
    Dim companyLogo As String
    
    ' Get company info from settings
    companyName = GetSetting("Company Name", "Your Company")
    companyLogo = GetSetting("Company Logo URL", "")
    
    ' Determine status class based on status
    Select Case status
        Case STATUS_APPROVED
            statusClass = "status-approved"
        Case STATUS_REJECTED
            statusClass = "status-rejected"
        Case Else
            statusClass = "status-pending"
    End Select
    
    ' Start building HTML with modern design
    html = "<!DOCTYPE html>" & vbNewLine & _
           "<html lang='en'>" & vbNewLine & _
           "<head>" & vbNewLine & _
           "  <meta charset='UTF-8'>" & vbNewLine & _
           "  <meta name='viewport' content='width=device-width, initial-scale=1.0'>" & vbNewLine & _
           "  <style>" & vbNewLine & _
           "    body { font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; color: #333333; max-width: 650px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; }" & vbNewLine & _
           "    .email-container { background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); padding: 30px; }" & vbNewLine & _
           "    .header { display: flex; align-items: center; margin-bottom: 25px; }" & vbNewLine & _
           "    .logo { max-height: 60px; margin-right: 20px; }" & vbNewLine & _
           "    h1 { color: #006EB6; font-weight: 600; margin-top: 0; padding-bottom: 15px; border-bottom: 2px solid #f0f0f0; }" & vbNewLine & _
           "    h2 { color: #006EB6; font-weight: 500; margin-top: 30px; margin-bottom: 15px; }" & vbNewLine & _
           "    .entry-id { background-color: #006EB6; color: #ffffff; display: inline-block; padding: 8px 15px; font-weight: bold; margin-bottom: 20px; border-radius: 4px; }" & vbNewLine & _
           "    .status-banner { padding: 15px; margin: 20px 0; border-radius: 4px; font-weight: 500; }" & vbNewLine & _
           "    .status-banner.approved { background-color: #E8F5E9; color: #4CAF50; }" & vbNewLine & _
           "    .status-banner.rejected { background-color: #FFEBEE; color: #dc3545; }" & vbNewLine & _
           "    .status-banner.pending { background-color: #E2F4FF; color: #006EB6; }" & vbNewLine & _
           "    .review-boxes { display: flex; margin: 25px 0; gap: 20px; }" & vbNewLine & _
           "    .review-box { border: 1px solid #f0f0f0; border-radius: 4px; padding: 15px; flex: 1; }" & vbNewLine & _
           "    .review-box h3 { color: #006EB6; margin-top: 0; }" & vbNewLine & _
           "    table { width: 100%; border-collapse: collapse; margin: 25px 0; border-radius: 4px; overflow: hidden; }" & vbNewLine & _
           "    th { background-color: #006EB6; color: #ffffff; font-weight: 500; text-align: left; padding: 12px 15px; }" & vbNewLine & _
           "    td { padding: 12px 15px; border-bottom: 1px solid #f0f0f0; }" & vbNewLine & _
           "    tr:last-child td { border-bottom: none; }" & vbNewLine & _
           "    tr:nth-child(even) { background-color: #f9f9f9; }" & vbNewLine & _
           "    .category-cell { font-weight: 500; }" & vbNewLine & _
           "    .status { padding: 5px 10px; font-weight: 500; display: inline-block; border-radius: 4px; }" & vbNewLine & _
           "    .status-pending { background-color: #17a2b8; color: #ffffff; }" & vbNewLine & _
           "    .status-approved { background-color: #4CAF50; color: #ffffff; }" & vbNewLine & _
           "    .status-rejected { background-color: #dc3545; color: #ffffff; }" & vbNewLine & _
           "    .button-container { text-align: center; margin-top: 30px; }" & vbNewLine & _
           "    .button { background-color: #006EB6; color: #ffffff; padding: 12px 25px; text-decoration: none; font-weight: 500; display: inline-block; border-radius: 4px; transition: background-color 0.3s; }" & vbNewLine & _
           "    .button:hover { background-color: #005a93; }" & vbNewLine & _
           "    .footer { margin-top: 30px; border-top: 2px solid #f0f0f0; padding-top: 20px; color: #666666; font-size: 14px; }" & vbNewLine & _
           "  </style>" & vbNewLine & _
           "</head>" & vbNewLine & _
           "<body>" & vbNewLine & _
           "  <div class='email-container'>" & vbNewLine
    
    ' Add header with logo if available
    If companyLogo <> "" Then
        html = html & "    <div class='header'>" & vbNewLine & _
               "      <img src='" & companyLogo & "' alt='" & companyName & " Logo' class='logo'>" & vbNewLine & _
               "      <h1>" & companyName & " - Intake Form Review</h1>" & vbNewLine & _
               "    </div>" & vbNewLine
    Else
        html = html & "    <h1>" & companyName & " - Intake Form Review</h1>" & vbNewLine
    End If
    
    ' Status banner
    Select Case status
        Case STATUS_APPROVED
            html = html & "    <div class='status-banner approved'>This submission has been approved.</div>" & vbNewLine
        Case STATUS_REJECTED
            html = html & "    <div class='status-banner rejected'>This submission has been rejected.</div>" & vbNewLine
        Case Else
            html = html & "    <div class='status-banner pending'>This submission is pending review.</div>" & vbNewLine
    End Select
    
    html = html & "    <div class='entry-id'>Entry ID: " & entryId & "</div>" & vbNewLine
    
    ' Review details
    html = html & "    <div class='review-boxes'>" & vbNewLine & _
           "      <div class='review-box'>" & vbNewLine & _
           "        <h3>Review Details</h3>" & vbNewLine & _
           "        <p><strong>Status:</strong> <span class='status " & statusClass & "'>" & status & "</span></p>" & vbNewLine & _
           "        <p><strong>Reviewer:</strong> " & reviewer & "</p>" & vbNewLine & _
           "        <p><strong>Date:</strong> " & Format(wsData.Cells(rowIndex, GetColumnIndex(wsData, "Review Date")).Value, "yyyy-mm-dd") & "</p>" & vbNewLine & _
           "      </div>" & vbNewLine & _
           "      <div class='review-box'>" & vbNewLine & _
           "        <h3>Review Comments</h3>" & vbNewLine
    
    If comments <> "" Then
        html = html & "        <p>" & Replace(Replace(Replace(comments, "&", "&amp;"), "<", "&lt;"), ">", "&gt;") & "</p>" & vbNewLine
    Else
        html = html & "        <p>No additional comments provided.</p>" & vbNewLine
    End If
    
    html = html & "      </div>" & vbNewLine & _
           "    </div>" & vbNewLine
    
    ' Submission details
    html = html & "    <h2>Submission Details</h2>" & vbNewLine & _
           "    <table>" & vbNewLine & _
           "      <tr><th>Category</th><th>Details</th><th>Status</th></tr>" & vbNewLine
    
    ' Loop through form data
    For i = 1 To 10  ' Adjust as needed
        If Not IsEmpty(wsData.Cells(1, i)) And Not IsEmpty(wsData.Cells(rowIndex, i)) Then
            fieldName = wsData.Cells(1, i).Value
            fieldValue = wsData.Cells(rowIndex, i).Value
            
            ' Skip metadata columns
            If fieldName <> "Status" And fieldName <> "Review Comments" And _
               fieldName <> "Reviewer" And fieldName <> "Review Date" Then
                
                ' Escape HTML special characters
                fieldName = Replace(Replace(Replace(fieldName, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
                If IsDate(fieldValue) Then
                    fieldValue = Format(fieldValue, "yyyy-mm-dd")
                Else
                    fieldValue = Replace(Replace(Replace(CStr(fieldValue), "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
                End If
                
                html = html & "      <tr>" & vbNewLine & _
                       "        <td class='category-cell'>" & fieldName & "</td>" & vbNewLine & _
                       "        <td>" & fieldValue & "</td>" & vbNewLine & _
                       "        <td><div class='status " & statusClass & "'>" & status & "</div></td>" & vbNewLine & _
                       "      </tr>" & vbNewLine
            End If
        End If
    Next i
    
    html = html & "    </table>" & vbNewLine & _
           "    <div class='button-container'>" & vbNewLine & _
           "      <a href='#' class='button'>View Full Details →</a>" & vbNewLine & _
           "    </div>" & vbNewLine & _
           "    <div class='footer'>" & vbNewLine & _
           "      <p>Thank you for using our intake form system. If you have any questions, please contact support.</p>" & vbNewLine & _
           "      <p>© " & Year(Now()) & " " & companyName & ". All rights reserved.</p>" & vbNewLine & _
           "    </div>" & vbNewLine & _
           "  </div>" & vbNewLine & _
           "</body>" & vbNewLine & _
           "</html>"
    
    BuildReviewEmailHTML = html
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "BuildReviewEmailHTML", Err.Number, Err.Description
    BuildReviewEmailHTML = ""
End Function

'------------------------------------------------------------------------------
' UI ENHANCEMENT FUNCTIONS
'------------------------------------------------------------------------------
' Function to show progress dialog
Private Sub ShowProgressDialog(message As String, percentComplete As Integer)
    On Error Resume Next
    
    ' Create a UserForm dynamically for progress indicator
    Dim frm As Object
    
    ' Check if form already exists
    On Error Resume Next
    Set frm = ThisWorkbook.VBProject.VBComponents("frmProgress")
    On Error GoTo 0
    
    If frm Is Nothing Then
        ' Create new form
        Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
        frm.Name = "frmProgress"
        
        ' Set form properties
        With frm
            .Properties("Caption") = "Processing"
            .Properties("Width") = 400
            .Properties("Height") = 100
            .Properties("StartUpPosition") = 1 ' CenterOwner
        End With
        
        ' Add message label
        Dim lblMessage As Object
        Set lblMessage = frm.Designer.Controls.Add("Forms.Label.1")
        With lblMessage
            .Name = "lblMessage"
            .Left = 10
            .Top = 10
            .Width = 380
            .Height = 20
        End With
        
        ' Add progress bar (using a frame with colored background)
        Dim fraProgress As Object
        Set fraProgress = frm.Designer.Controls.Add("Forms.Frame.1")
        With fraProgress
            .Name = "fraProgressBg"
            .Left = 10
            .Top = 40
            .Width = 380
            .Height = 20
            .BorderStyle = 0 ' None
            .BackColor = COLOR_LIGHT
        End With
        
        Dim fraProgressBar As Object
        Set fraProgressBar = frm.Designer.Controls.Add("Forms.Frame.1")
        With fraProgressBar
            .Name = "fraProgressBar"
            .Left = 10
            .Top = 40
            .Width = 0
            .Height = 20
            .BorderStyle = 0 ' None
            .BackColor = COLOR_PRIMARY
        End With
        
        ' Add percentage label
        Dim lblPercent As Object
        Set lblPercent = frm.Designer.Controls.Add("Forms.Label.1")
        With lblPercent
            .Name = "lblPercent"
            .Left = 10
            .Top = 70
            .Width = 380
            .Height = 20
            .TextAlign = 2 ' Center
        End With
        
        ' Add code to initialize the form
        Dim formCode As String
        formCode = "Public Sub UpdateProgress(message As String, percentComplete As Integer)" & vbNewLine & _
                   "  Me.lblMessage.Caption = message" & vbNewLine & _
                   "  Me.fraProgressBar.Width = (percentComplete / 100) * 380" & vbNewLine & _
                   "  Me.lblPercent.Caption = percentComplete & ""%""" & vbNewLine & _
                   "  DoEvents" & vbNewLine & _
                   "End Sub"
        
        frm.CodeModule.AddFromString formCode
    End If
    
    ' Show the form if not already visible
    If Not IsFormLoaded("frmProgress") Then
        ExecuteExcel4Macro "SHOW.DIALOG([frmProgress])"
    End If
    
    ' Update progress
    Application.Run "frmProgress.UpdateProgress", message, percentComplete
End Sub

' Function to hide progress dialog
Private Sub HideProgressDialog()
    On Error Resume Next
    
    ' Check if form exists
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents("frmProgress")
    
    If Not frm Is Nothing Then
        ' Hide the form
        ExecuteExcel4Macro "HIDE.DIALOG([frmProgress])"
    End If
End Sub

' Function to check if a form is loaded
Private Function IsFormLoaded(formName As String) As Boolean
    On Error Resume Next
    
    IsFormLoaded = (ExecuteExcel4Macro("ISREF(" & formName & "!Visible)") <> 0)
End Function

' Function to show animated message
Private Sub ShowAnimatedMessage(message As String, title As String, style As VbMsgBoxStyle)
    On Error Resume Next
    
    ' Create a UserForm dynamically for animated message
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = title
        .Properties("Width") = 400
        .Properties("Height") = 200
        .Properties("StartUpPosition") = 1 ' CenterOwner
    End With
    
    ' Add icon based on style
    Dim imgIcon As Object
    Set imgIcon = frm.Designer.Controls.Add("Forms.Image.1")
    With imgIcon
        .Left = 20
        .Top = 20
        .Width = 32
        .Height = 32
        
        ' Set icon based on style
        Select Case style
            Case vbInformation
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 5)
            Case vbExclamation
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 2)
            Case vbCritical
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 3)
            Case vbQuestion
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 4)
        End Select
    End With
    
    ' Add message label
    Dim lblMessage As Object
    Set lblMessage = frm.Designer.Controls.Add("Forms.Label.1")
    With lblMessage
        .Left = 70
        .Top = 20
        .Width = 310
        .Height = 100
        .Caption = message
        .WordWrap = True
    End With
    
    ' Add OK button
    Dim btnOK As Object
    Set btnOK = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnOK
        .Left = 150
        .Top = 150
        .Width = 100
        .Height = 30
        .Caption = "OK"
        .Default = True
        .Cancel = True
    End With
    
    ' Add code to handle button click and animation
    Dim formCode As String
    formCode = "Private Sub UserForm_Initialize()" & vbNewLine & _
               "  Me.Opacity = 0" & vbNewLine & _
               "  FadeIn" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  FadeOut" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub FadeIn()" & vbNewLine & _
               "  Dim i As Integer" & vbNewLine & _
               "  For i = 0 To 100 Step 5" & vbNewLine & _
               "    Me.Opacity = i / 100" & vbNewLine & _
               "    Sleep 10" & vbNewLine & _
               "  Next i" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub FadeOut()" & vbNewLine & _
               "  Dim i As Integer" & vbNewLine & _
               "  For i = 100 To 0 Step -5" & vbNewLine & _
               "    Me.Opacity = i / 100" & vbNewLine & _
               "    Sleep 10" & vbNewLine & _
               "  Next i" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub Sleep(milliseconds As Long)" & vbNewLine & _
               "  Dim startTime As Double" & vbNewLine & _
               "  startTime = Timer" & vbNewLine & _
               "  Do While Timer < startTime + (milliseconds / 1000)" & vbNewLine & _
               "    DoEvents" & vbNewLine & _
               "  Loop" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Sub

' Function to show error message with details
Private Sub ShowErrorMessage(functionName As String, errorNumber As Long, errorDescription As String)
    On Error Resume Next
    
    ' Log the error
    LogError functionName, errorNumber, errorDescription
    
    ' Create a UserForm dynamically for error message
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Error"
        .Properties("Width") = 500
        .Properties("Height") = 300
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add error icon
    Dim imgIcon As Object
    Set imgIcon = frm.Designer.Controls.Add("Forms.Image.1")
    With imgIcon
        .Left = 20
        .Top = 20
        .Width = 32
        .Height = 32
        .Picture = LoadPicture("C:\Windows\System32\user32.dll", 3)
    End With
    
    ' Add error title
    Dim lblTitle As Object
    Set lblTitle = frm.Designer.Controls.Add("Forms.Label.1")
    With lblTitle
        .Left = 70
        .Top = 20
        .Width = 410
        .Height = 20
        .Caption = "An error occurred in " & functionName
        .Font.Bold = True
        .ForeColor = COLOR_DANGER
    End With
    
    ' Add error message
    Dim lblMessage As Object
    Set lblMessage = frm.Designer.Controls.Add("Forms.Label.1")
    With lblMessage
        .Left = 70
        .Top = 50
        .Width = 410
        .Height = 40
        .Caption = errorDescription
        .WordWrap = True
    End With
    
    ' Add error details frame
    Dim fraDetails As Object
    Set fraDetails = frm.Designer.Controls.Add("Forms.Frame.1")
    With fraDetails
        .Left = 20
        .Top = 100
        .Width = 460
        .Height = 150
        .Caption = "Technical Details"
    End With
    
    ' Add error details
    Dim txtDetails As Object
    Set txtDetails = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtDetails
        .Left = 30
        .Top = 120
        .Width = 440
        .Height = 120
        .MultiLine = True
        .ScrollBars = 2 ' Vertical
        .Text = "Function: " & functionName & vbNewLine & _
                "Error Number: " & errorNumber & vbNewLine & _
                "Description: " & errorDescription & vbNewLine & _
                "Time: " & Now() & vbNewLine & _
                "User: " & GetCurrentUser()
    End With
    
    ' Add OK button
    Dim btnOK As Object
    Set btnOK = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnOK
        .Left = 380
        .Top = 260
        .Width = 100
        .Height = 30
        .Caption = "OK"
        .Default = True
        .Cancel = True
    End With
    
    ' Add code to handle button click
    Dim formCode As String
    formCode = "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Sub

' Function to show modern dialog
Private Sub ShowModernDialog(title As String, message As String, dialogType As String)
    On Error Resume Next
    
    ' Create a UserForm dynamically for modern dialog
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = title
        .Properties("Width") = 400
        .Properties("Height") = 200
        .Properties("StartUpPosition") = 1 ' CenterOwner
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add icon based on dialog type
    Dim imgIcon As Object
    Set imgIcon = frm.Designer.Controls.Add("Forms.Image.1")
    With imgIcon
        .Left = 20
        .Top = 20
        .Width = 32
        .Height = 32
        
        ' Set icon based on dialog type
        Select Case LCase(dialogType)
            Case "info", "information"
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 5)
            Case "warning"
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 2)
            Case "error"
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 3)
            Case "question"
                .Picture = LoadPicture("C:\Windows\System32\user32.dll", 4)
        End Select
    End With
    
    ' Add message label
    Dim lblMessage As Object
    Set lblMessage = frm.Designer.Controls.Add("Forms.Label.1")
    With lblMessage
        .Left = 70
        .Top = 20
        .Width = 310
        .Height = 100
        .Caption = message
        .WordWrap = True
    End With
    
    ' Add OK button
    Dim btnOK As Object
    Set btnOK = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnOK
        .Left = 150
        .Top = 150
        .Width = 100
        .Height = 30
        .Caption = "OK"
        .Default = True
        .Cancel = True
    End With
    
    ' Add code to handle button click
    Dim btnCode As String
    btnCode = "Private Sub CommandButton1_Click()" & vbNewLine & _
              "  Me.Hide" & vbNewLine & _
              "End Sub"
    
    frm.CodeModule.AddFromString btnCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
End Sub

'------------------------------------------------------------------------------
' FORM MANAGEMENT FUNCTIONS
'------------------------------------------------------------------------------
' Subroutine to clear form
Private Sub ClearForm(ws As Worksheet)
    On Error GoTo ErrorHandler
    
    Dim wsDefaults As Worksheet
    Dim i As Integer
    
    ' Try to get DefaultValues worksheet
    On Error Resume Next
    Set wsDefaults = ThisWorkbook.Worksheets(SHEET_DEFAULTS)
    On Error GoTo ErrorHandler
    
    ' Show progress
    ShowProgressDialog "Clearing form...", 0
    
    ' Check if DefaultValues sheet exists
    If wsDefaults Is Nothing Then
        ' No DefaultValues sheet, just clear the form
        Dim clearRange As Range
        Set clearRange = ws.Range("B2:B15")  ' Adjust range as needed
        clearRange.ClearContents
        
        ShowProgressDialog "Form cleared", 100
        Debug.Print "DefaultValues sheet not found. Form cleared."
    Else
        ' DefaultValues sheet exists, load default values
        Dim lastRow As Long
        lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
        
        For i = 2 To lastRow
            If Not IsEmpty(ws.Cells(i, 1)) Then
                ShowProgressDialog "Loading default values...", Int((i - 2) / (lastRow - 2) * 100)
                
                ' Find the corresponding default value by field name
                Dim fieldName As String
                Dim defaultCell As Range
                
                fieldName = ws.Cells(i, 1).Value
                Set defaultCell = FindDefaultCell(wsDefaults, fieldName)
                
                If Not defaultCell Is Nothing Then
                    ' Copy default value to the form
                    ws.Cells(i, 2).Value = defaultCell.Offset(0, 1).Value
                Else
                    ' No default found, clear the cell
                    ws.Cells(i, 2).ClearContents
                End If
            End If
        Next i
        
        ShowProgressDialog "Default values loaded", 100
        Debug.Print "Default values loaded from DefaultValues sheet."
    End If
    
    ' Hide progress dialog
    HideProgressDialog
    
    Exit Sub
    
ErrorHandler:
    HideProgressDialog
    ShowErrorMessage "ClearForm", Err.Number, Err.Description
    
    ' Fall back to simple clearing if there's an error
    On Error Resume Next
    Dim fallbackRange As Range
    Set fallbackRange = ws.Range("B2:B15")
    fallbackRange.ClearContents
End Sub

' Helper function to find a default value cell by field name
Private Function FindDefaultCell(wsDefaults As Worksheet, fieldName As String) As Range
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long
    
    lastRow = wsDefaults.Cells(wsDefaults.Rows.Count, 1).End(xlUp).Row
    
    For i = 1 To lastRow
        If wsDefaults.Cells(i, 1).Value = fieldName Then
            Set FindDefaultCell = wsDefaults.Cells(i, 1)
            Exit Function
        End If
    Next i
    
    ' Field name not found
    Set FindDefaultCell = Nothing
    
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in FindDefaultCell: " & Err.Description
    Set FindDefaultCell = Nothing
End Function

' Subroutine to format data sheet
Private Sub FormatDataSheet(wsData As Worksheet)
    On Error GoTo ErrorHandler
    
    Dim dataRange As Range
    Dim lastRow As Long
    Dim lastCol As Long
    
    ' Find the last row and column with data
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    lastCol = wsData.Cells(1, wsData.Columns.Count).End(xlToLeft).Column
    
    ' Ensure we have headers for the metadata columns
    AddMetadataColumns wsData, wsData.Range("1:1")
    
    ' Set the data range
    Set dataRange = wsData.Range(wsData.Cells(1, 1), wsData.Cells(lastRow, lastCol))
    
    With dataRange
        ' Add borders
        .Borders.LineStyle = xlContinuous
        .Borders.Weight = xlThin
        
        ' Format header row
        .Rows(1).Font.Bold = True
        .Rows(1).Interior.Color = COLOR_PRIMARY
        .Rows(1).Font.Color = vbWhite
        
        ' Autofit columns
        .Columns.AutoFit
        
        ' Add alternating row colors
        Dim i As Long
        For i = 2 To lastRow Step 2
            .Rows(i).Interior.Color = COLOR_LIGHT
        Next i
    End With
    
    ' Get status column index
    Dim statusColIndex As Long
    statusColIndex = GetColumnIndex(wsData, "Status")
    
    If statusColIndex > 0 Then
        ' Get status range
        Dim statusRange As Range
        Set statusRange = wsData.Range(wsData.Cells(2, statusColIndex), wsData.Cells(lastRow, statusColIndex))
        
        ' Clear existing conditional formatting
        statusRange.FormatConditions.Delete
        
        ' Format "Pending Review" as blue
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_PENDING & """")
            .Interior.Color = COLOR_INFO
            .Font.Color = vbBlack
        End With
        
        ' Format "Approved" as green
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_APPROVED & """")
            .Interior.Color = COLOR_SUCCESS
            .Font.Color = vbWhite
        End With
        
        ' Format "Rejected" as red
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_REJECTED & """")
            .Interior.Color = COLOR_DANGER
            .Font.Color = vbWhite
        End With
        
        ' Format "Archived" as gray
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_ARCHIVED & """")
            .Interior.Color = COLOR_DARK
            .Font.Color = vbWhite
        End With
    End If
    
    ' Add data validation for Status column if it exists
    If statusColIndex > 0 Then
        Dim statusValidationRange As Range
        Set statusValidationRange = wsData.Range(wsData.Cells(2, statusColIndex), wsData.Cells(lastRow, statusColIndex))
        
        With statusValidationRange.Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:=STATUS_PENDING & "," & STATUS_APPROVED & "," & STATUS_REJECTED & "," & STATUS_ARCHIVED
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = "Select Status"
            .ErrorTitle = "Invalid Status"
            .InputMessage = "Please select a status from the dropdown list."
            .ErrorMessage = "Please select a valid status from the dropdown list."
            .ShowInput = True
            .ShowError = True
        End With
    End If
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "FormatDataSheet", Err.Number, Err.Description
End Sub

'------------------------------------------------------------------------------
' REVIEW FUNCTIONS
'------------------------------------------------------------------------------
' Function to review submissions
Public Sub ReviewSubmission()
    On Error GoTo ErrorHandler
    
    Dim wsData As Worksheet
    Dim entryId As Long
    Dim rowIndex As Long
    Dim statusValue As String
    Dim comments As String
    Dim reviewer As String
    Dim emailSent As Boolean
    Dim reviewData As Object
    
    Set wsData = ThisWorkbook.Worksheets(SHEET_INTAKE_DATA)
    
    ' Get entry ID to review
    entryId = Application.InputBox("Enter the Entry ID to review:", "Review Submission", Type:=1)
    If entryId = 0 Then
        ' User canceled
        Exit Sub
    End If
    
    ' Find the row with the entry ID
    rowIndex = FindEntryRow(wsData, entryId)
    If rowIndex = 0 Then
        ShowModernDialog "Entry Not Found", "Entry ID " & entryId & " not found.", "warning"
        Exit Sub
    End If
    
    ' Get current status
    statusValue = wsData.Cells(rowIndex, GetColumnIndex(wsData, "Status")).Value
    If statusValue <> STATUS_PENDING Then
        ' Entry has already been reviewed
        If MsgBox("This entry has already been reviewed as '" & statusValue & "'." & vbNewLine & _
                 "Do you want to review it again?", vbYesNo + vbQuestion) = vbNo Then
            Exit Sub
        End If
    End If
    
    ' Show review form
    Dim reviewResult As Variant
    reviewResult = ShowReviewForm(wsData, rowIndex, entryId)
    
    ' Check if review was canceled
    If Not IsArray(reviewResult) Then
        Exit Sub
    End If
    
    ' Extract review data
    statusValue = reviewResult(0)
    comments = reviewResult(1)
    reviewer = reviewResult(2)
    
    ' Update the data
    wsData.Cells(rowIndex, GetColumnIndex(wsData, "Status")).Value = statusValue
    wsData.Cells(rowIndex, GetColumnIndex(wsData, "Review Comments")).Value = comments
    wsData.Cells(rowIndex, GetColumnIndex(wsData, "Reviewer")).Value = reviewer
    wsData.Cells(rowIndex, GetColumnIndex(wsData, "Review Date")).Value = Now()
    
    ' Create review data dictionary for email
    Set reviewData = CreateObject("Scripting.Dictionary")
    reviewData.Add "Worksheet", wsData
    reviewData.Add "RowIndex", rowIndex
    reviewData.Add "Status", statusValue
    reviewData.Add "Comments", comments
    reviewData.Add "Reviewer", reviewer
    
    ' Send notification email
    emailSent = SendEmail(Nothing, entryId, etReview, reviewData)
    
    ' Format data sheet
    FormatDataSheet wsData
    
    ' Update dashboard
    UpdateDashboard
    
    ' Show confirmation
    If emailSent Then
        ShowAnimatedMessage "Review completed successfully and notification email sent!", "Review Complete", vbInformation
    Else
        ShowAnimatedMessage "Review completed successfully, but notification email could not be sent.", "Review Complete with Warning", vbInformation
    End If
    
    ' Log the activity
    LogActivity "Form reviewed", "Entry ID: " & entryId & ", Status: " & statusValue
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "ReviewSubmission", Err.Number, Err.Description
End Sub

' Function to show review form
Private Function ShowReviewForm(wsData As Worksheet, rowIndex As Long, entryId As Long) As Variant
    On Error GoTo ErrorHandler
    
    ' Create a UserForm dynamically for review
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Review Submission - Entry ID: " & entryId
        .Properties("Width") = 600
        .Properties("Height") = 500
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add form header
    Dim lblHeader As Object
    Set lblHeader = frm.Designer.Controls.Add("Forms.Label.1")
    With lblHeader
        .Left = 10
        .Top = 10
        .Width = 580
        .Height = 30
        .Caption = "Review Submission - Entry ID: " & entryId
        .Font.Size = 14
        .Font.Bold = True
        .ForeColor = COLOR_PRIMARY
    End With
    
    ' Add submission details frame
    Dim fraDetails As Object
    Set fraDetails = frm.Designer.Controls.Add("Forms.Frame.1")
    With fraDetails
        .Left = 10
        .Top = 50
        .Width = 580
        .Height = 200
        .Caption = "Submission Details"
    End With
    
    ' Add submission details listview
    Dim lvwDetails As Object
    Set lvwDetails = frm.Designer.Controls.Add("Forms.ListView.1")
    With lvwDetails
        .Left = 20
        .Top = 70
        .Width = 560
        .Height = 170
        .View = 3 ' Report view
    End With
    
    ' Add review options frame
    Dim fraReview As Object
    Set fraReview = frm.Designer.Controls.Add("Forms.Frame.1")
    With fraReview
        .Left = 10
        .Top = 260
        .Width = 580
        .Height = 180
        .Caption = "Review"
    End With
    
    ' Add reviewer label
    Dim lblReviewer As Object
    Set lblReviewer = frm.Designer.Controls.Add("Forms.Label.1")
    With lblReviewer
        .Left = 20
        .Top = 280
        .Width = 100
        .Height = 20
        .Caption = "Reviewer:"
    End With
    
    ' Add reviewer textbox
    Dim txtReviewer As Object
    Set txtReviewer = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtReviewer
        .Left = 130
        .Top = 280
        .Width = 450
        .Height = 20
        .Text = GetCurrentUser()
    End With
    
    ' Add status label
    Dim lblStatus As Object
    Set lblStatus = frm.Designer.Controls.Add("Forms.Label.1")
    With lblStatus
        .Left = 20
        .Top = 310
        .Width = 100
        .Height = 20
        .Caption = "Status:"
    End With
    
    ' Add status option buttons
    Dim optApprove As Object
    Set optApprove = frm.Designer.Controls.Add("Forms.OptionButton.1")
    With optApprove
        .Left = 130
        .Top = 310
        .Width = 100
        .Height = 20
        .Caption = "Approve"
        .Value = True
    End With
    
    Dim optReject As Object
    Set optReject = frm.Designer.Controls.Add("Forms.OptionButton.1")
    With optReject
        .Left = 240
        .Top = 310
        .Width = 100
        .Height = 20
        .Caption = "Reject"
    End With
    
    ' Add comments label
    Dim lblComments As Object
    Set lblComments = frm.Designer.Controls.Add("Forms.Label.1")
    With lblComments
        .Left = 20
        .Top = 340
        .Width = 100
        .Height = 20
        .Caption = "Comments:"
    End With
    
    ' Add comments textbox
    Dim txtComments As Object
    Set txtComments = frm.Designer.Controls.Add("Forms.TextBox.1")
    With txtComments
        .Left = 130
        .Top = 340
        .Width = 450
        .Height = 80
        .MultiLine = True
        .ScrollBars = 2 ' Vertical
    End With
    
    ' Add buttons
    Dim btnSubmit As Object
    Set btnSubmit = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnSubmit
        .Left = 400
        .Top = 450
        .Width = 90
        .Height = 30
        .Caption = "Submit"
        .Default = True
    End With
    
    Dim btnCancel As Object
    Set btnCancel = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnCancel
        .Left = 500
        .Top = 450
        .Width = 90
        .Height = 30
        .Caption = "Cancel"
        .Cancel = True
    End With
    
    ' Add code to initialize the form and handle buttons
    Dim formCode As String
    formCode = "Dim Result As Variant" & vbNewLine & _
               "Private Sub UserForm_Initialize()" & vbNewLine & _
               "  ' Initialize ListView columns" & vbNewLine & _
               "  With ListView1" & vbNewLine & _
               "    .ColumnHeaders.Add , , ""Field"", 150" & vbNewLine & _
               "    .ColumnHeaders.Add , , ""Value"", 400" & vbNewLine & _
               "  End With" & vbNewLine & _
               "  " & vbNewLine & _
               "  ' Load submission details" & vbNewLine & _
               "  LoadSubmissionDetails" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub LoadSubmissionDetails()" & vbNewLine & _
               "  Dim ws As Worksheet" & vbNewLine & _
               "  Dim i As Long, lastCol As Long" & vbNewLine & _
               "  Dim item As Object" & vbNewLine & _
               "  " & vbNewLine & _
               "  Set ws = ThisWorkbook.Worksheets(""" & SHEET_INTAKE_DATA & """)" & vbNewLine & _
               "  lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column" & vbNewLine & _
               "  " & vbNewLine & _
               "  For i = 1 To lastCol" & vbNewLine & _
               "    If ws.Cells(1, i).Value <> ""Status"" And ws.Cells(1, i).Value <> ""Review Comments"" And _" & vbNewLine & _
               "       ws.Cells(1, i).Value <> ""Reviewer"" And ws.Cells(1, i).Value <> ""Review Date"" Then" & vbNewLine & _
               "      If Not IsEmpty(ws.Cells(" & rowIndex & ", i).Value) Then" & vbNewLine & _
               "        Set item = ListView1.ListItems.Add(, , ws.Cells(1, i).Value)" & vbNewLine & _
               "        item.SubItems(1) = ws.Cells(" & rowIndex & ", i).Value" & vbNewLine & _
               "      End If" & vbNewLine & _
               "    End If" & vbNewLine & _
               "  Next i" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  ' Validate inputs" & vbNewLine & _
               "  If TextBox1.Text = """" Then" & vbNewLine & _
               "    MsgBox ""Please enter your name."", vbExclamation" & vbNewLine & _
               "    TextBox1.SetFocus" & vbNewLine & _
               "    Exit Sub" & vbNewLine & _
               "  End If" & vbNewLine & _
               "  " & vbNewLine & _
               "  ' Set result" & vbNewLine & _
               "  ReDim Result(0 To 2)" & vbNewLine & _
               "  " & vbNewLine & _
               "  If OptionButton1.Value Then" & vbNewLine & _
               "    Result(0) = """ & STATUS_APPROVED & """" & vbNewLine & _
               "  Else" & vbNewLine & _
               "    Result(0) = """ & STATUS_REJECTED & """" & vbNewLine & _
               "  End If" & vbNewLine & _
               "  " & vbNewLine & _
               "  Result(1) = TextBox2.Text" & vbNewLine & _
               "  Result(2) = TextBox1.Text" & vbNewLine & _
               "  " & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton2_Click()" & vbNewLine & _
               "  Result = Null" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Get the result
    On Error Resume Next
    ShowReviewForm = ExecuteExcel4Macro("GET(" & frm.Name & "!Result)")
    On Error GoTo ErrorHandler
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "ShowReviewForm", Err.Number, Err.Description
    ShowReviewForm = Null
End Function

' Function to find the row index for an entry ID
Private Function FindEntryRow(wsData As Worksheet, entryId As Long) As Long
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    Dim i As Long
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    For i = 2 To lastRow
        If wsData.Cells(i, 1).Value = entryId Then
            FindEntryRow = i
            Exit Function
        End If
    Next i
    
    ' Entry not found
    FindEntryRow = 0
    
    Exit Function
    
ErrorHandler:
    ShowErrorMessage "FindEntryRow", Err.Number, Err.Description
    FindEntryRow = 0
End Function

'------------------------------------------------------------------------------
' DASHBOARD FUNCTIONS
'------------------------------------------------------------------------------
' Function to update dashboard
Private Sub UpdateDashboard()
    On Error GoTo ErrorHandler
    
    Dim wsDashboard As Worksheet
    Dim wsData As Worksheet
    Dim lastRow As Long
    Dim statusColIndex As Long
    Dim dateColIndex As Long
    
    ' Check if Dashboard sheet exists
    On Error Resume Next
    Set wsDashboard = ThisWorkbook.Worksheets(SHEET_DASHBOARD)
    On Error GoTo ErrorHandler
    
    ' Create Dashboard sheet if it doesn't exist
    If wsDashboard Is Nothing Then
        Set wsDashboard = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsDashboard.Name = SHEET_DASHBOARD
        
        ' Set up dashboard layout
        SetupDashboardLayout wsDashboard
    End If
    
    ' Get data sheet
    Set wsData = ThisWorkbook.Worksheets(SHEET_INTAKE_DATA)
    
    ' Find last row with data
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    ' Get column indexes
    statusColIndex = GetColumnIndex(wsData, "Status")
    dateColIndex = GetColumnIndex(wsData, "Submission Date")
    
    ' Clear existing dashboard data
    ClearDashboardData wsDashboard
    
    ' Update dashboard data
    UpdateStatusCounts wsDashboard, wsData, lastRow, statusColIndex
    UpdateTimelineChart wsDashboard, wsData, lastRow, dateColIndex, statusColIndex
    UpdateRecentSubmissions wsDashboard, wsData, lastRow
    
    ' Format dashboard
    FormatDashboard wsDashboard
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "UpdateDashboard", Err.Number, Err.Description
End Sub

' Function to set up dashboard layout
Private Sub SetupDashboardLayout(wsDashboard As Worksheet)
    On Error GoTo ErrorHandler
    
    ' Set up dashboard title
    With wsDashboard.Range("A1:J1").Merge
        .Value = "INTAKE FORM DASHBOARD"
        .Font.Size = 18
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Interior.Color = COLOR_PRIMARY
        .Font.Color = vbWhite
    End With
    
    ' Set up status counts section
    wsDashboard.Range("A3").Value = "STATUS SUMMARY"
    wsDashboard.Range("A3").Font.Bold = True
    wsDashboard.Range("A3").Font.Size = 14
    
    wsDashboard.Range("A4").Value = "Status"
    wsDashboard.Range("B4").Value = "Count"
    wsDashboard.Range("A4:B4").Font.Bold = True
    
    wsDashboard.Range("A5").Value = STATUS_PENDING
    wsDashboard.Range("A6").Value = STATUS_APPROVED
    wsDashboard.Range("A7").Value = STATUS_REJECTED
    wsDashboard.Range("A8").Value = STATUS_ARCHIVED
    wsDashboard.Range("A9").Value = "Total"
    wsDashboard.Range("A9").Font.Bold = True
    
    ' Set up timeline chart section
    wsDashboard.Range("D3").Value = "SUBMISSION TIMELINE"
    wsDashboard.Range("D3").Font.Bold = True
    wsDashboard.Range("D3").Font.Size = 14
    
    ' Set up recent submissions section
    wsDashboard.Range("A11").Value = "RECENT SUBMISSIONS"
    wsDashboard.Range("A11").Font.Bold = True
    wsDashboard.Range("A11").Font.Size = 14
    
    wsDashboard.Range("A12").Value = "Entry ID"
    wsDashboard.Range("B12").Value = "Submission Date"
    wsDashboard.Range("C12").Value = "Status"
    wsDashboard.Range("D12").Value = "Reviewer"
    wsDashboard.Range("E12").Value = "Review Date"
    wsDashboard.Range("A12:E12").Font.Bold = True
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "SetupDashboardLayout", Err.Number, Err.Description
End Sub

' Function to clear dashboard data
Private Sub ClearDashboardData(wsDashboard As Worksheet)
    On Error GoTo ErrorHandler
    
    ' Clear status counts
    wsDashboard.Range("B5:B9").ClearContents
    
    ' Clear timeline chart
    On Error Resume Next
    wsDashboard.ChartObjects("TimelineChart").Delete
    On Error GoTo ErrorHandler
    
    ' Clear recent submissions
    Dim lastRow As Long
    lastRow = wsDashboard.Cells(wsDashboard.Rows.Count, "A").End(xlUp).Row
    
    If lastRow > 12 Then
        wsDashboard.Range("A13:E" & lastRow).ClearContents
    End If
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "ClearDashboardData", Err.Number, Err.Description
End Sub

' Function to update status counts
Private Sub UpdateStatusCounts(wsDashboard As Worksheet, wsData As Worksheet, lastRow As Long, statusColIndex As Long)
    On Error GoTo ErrorHandler
    
    Dim pendingCount As Long
    Dim approvedCount As Long
    Dim rejectedCount As Long
    Dim archivedCount As Long
    Dim totalCount As Long
    Dim i As Long
    
    ' Count submissions by status
    For i = 2 To lastRow
        Select Case wsData.Cells(i, statusColIndex).Value
            Case STATUS_PENDING
                pendingCount = pendingCount + 1
            Case STATUS_APPROVED
                approvedCount = approvedCount + 1
            Case STATUS_REJECTED
                rejectedCount = rejectedCount + 1
            Case STATUS_ARCHIVED
                archivedCount = archivedCount + 1
        End Select
    Next i
    
    totalCount = pendingCount + approvedCount + rejectedCount + archivedCount
    
    ' Update dashboard
    wsDashboard.Range("B5").Value = pendingCount
    wsDashboard.Range("B6").Value = approvedCount
    wsDashboard.Range("B7").Value = rejectedCount
    wsDashboard.Range("B8").Value = archivedCount
    wsDashboard.Range("B9").Value = totalCount
    
    ' Format cells based on status
    With wsDashboard.Range("A5:B5")
        .Interior.Color = COLOR_INFO
        .Font.Color = vbBlack
    End With
    
    With wsDashboard.Range("A6:B6")
        .Interior.Color = COLOR_SUCCESS
        .Font.Color = vbWhite
    End With
    
    With wsDashboard.Range("A7:B7")
        .Interior.Color = COLOR_DANGER
        .Font.Color = vbWhite
    End With
    
    With wsDashboard.Range("A8:B8")
        .Interior.Color = COLOR_DARK
        .Font.Color = vbWhite
    End With
    
    With wsDashboard.Range("A9:B9")
        .Interior.Color = COLOR_PRIMARY
        .Font.Color = vbWhite
    End With
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "UpdateStatusCounts", Err.Number, Err.Description
End Sub

' Function to update timeline chart
Private Sub UpdateTimelineChart(wsDashboard As Worksheet, wsData As Worksheet, lastRow As Long, dateColIndex As Long, statusColIndex As Long)
    On Error GoTo ErrorHandler
    
    ' Create a temporary data range for the chart
    Dim tempRange As Range
    Set tempRange = wsDashboard.Range("J1:L100")
    tempRange.ClearContents
    
    ' Set up headers
    tempRange.Cells(1, 1).Value = "Date"
    tempRange.Cells(1, 2).Value = "Status"
    tempRange.Cells(1, 3).Value = "Count"
    
    ' Group submissions by date and status
    Dim dict As Object
    Set dict = CreateObject("Scripting.Dictionary")
    
    Dim i As Long
    Dim dateKey As String
    Dim statusKey As String
    Dim combinedKey As String
    
    For i = 2 To lastRow
        If Not IsEmpty(wsData.Cells(i, dateColIndex).Value) Then
            dateKey = Format(wsData.Cells(i, dateColIndex).Value, "yyyy-mm-dd")
            statusKey = wsData.Cells(i, statusColIndex).Value
            combinedKey = dateKey & "|" & statusKey
            
            If dict.Exists(combinedKey) Then
                dict(combinedKey) = dict(combinedKey) + 1
            Else
                dict.Add combinedKey, 1
            End If
        End If
    Next i
    
    ' Write data to temporary range
    Dim row As Long
    row = 2
    
    Dim key As Variant
    For Each key In dict.Keys
        Dim parts As Variant
        parts = Split(key, "|")
        
        tempRange.Cells(row, 1).Value = CDate(parts(0))
        tempRange.Cells(row, 2).Value = parts(1)
        tempRange.Cells(row, 3).Value = dict(key)
        
        row = row + 1
    Next key
    
    ' Create chart
    Dim chartObj As ChartObject
    Dim chart As Chart
    
    ' Delete existing chart if any
    On Error Resume Next
    wsDashboard.ChartObjects("TimelineChart").Delete
    On Error GoTo ErrorHandler
    
    ' Create new chart
    Set chartObj = wsDashboard.ChartObjects.Add(Left:=300, Top:=50, Width:=400, Height:=250)
    chartObj.Name = "TimelineChart"
    Set chart = chartObj.Chart
    
    ' Set up chart
    With chart
        .SetSourceData Source:=tempRange.Resize(row - 1, 3)
        .ChartType = xlColumnClustered
        
        ' Set title
        .HasTitle = True
        .ChartTitle.Text = "Submissions by Date and Status"
        
        ' Set axes
        .Axes(xlCategory).HasTitle = True
        .Axes(xlCategory).AxisTitle.Text = "Date"
        .Axes(xlValue).HasTitle = True
        .Axes(xlValue).AxisTitle.Text = "Count"
        
        ' Set legend
        .HasLegend = True
        .Legend.Position = xlLegendPositionBottom
        
        ' Format series
        Dim series As Series
        For Each series In .SeriesCollection
            Select Case series.Name
                Case STATUS_PENDING
                    series.Format.Fill.ForeColor.RGB = COLOR_INFO
                Case STATUS_APPROVED
                    series.Format.Fill.ForeColor.RGB = COLOR_SUCCESS
                Case STATUS_REJECTED
                    series.Format.Fill.ForeColor.RGB = COLOR_DANGER
                Case STATUS_ARCHIVED
                    series.Format.Fill.ForeColor.RGB = COLOR_DARK
            End Select
        Next series
    End With
    
    ' Clear temporary range
    tempRange.ClearContents
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "UpdateTimelineChart", Err.Number, Err.Description
End Sub

' Function to update recent submissions
Private Sub UpdateRecentSubmissions(wsDashboard As Worksheet, wsData As Worksheet, lastRow As Long)
    On Error GoTo ErrorHandler
    
    Dim i As Long
    Dim dashRow As Long
    Dim entryIdColIndex As Long
    Dim dateColIndex As Long
    Dim statusColIndex As Long
    Dim reviewerColIndex As Long
    Dim reviewDateColIndex As Long
    
    ' Get column indexes
    entryIdColIndex = 1 ' Assuming Entry ID is in column A
    dateColIndex = GetColumnIndex(wsData, "Submission Date")
    statusColIndex = GetColumnIndex(wsData, "Status")
    reviewerColIndex = GetColumnIndex(wsData, "Reviewer")
    reviewDateColIndex = GetColumnIndex(wsData, "Review Date")
    
    ' Start at row 13 in dashboard
    dashRow = 13
    
    ' Get the 10 most recent submissions (or all if less than 10)
    Dim recentCount As Long
    recentCount = Application.WorksheetFunction.Min(10, lastRow - 1)
    
    ' Sort data by submission date (newest first)
    Dim sortRange As Range
    Set sortRange = wsData.Range("A2:A" & lastRow)
    
    wsData.Sort.SortFields.Clear
    wsData.Sort.SortFields.Add Key:=wsData.Cells(1, dateColIndex), SortOn:=xlSortOnValues, Order:=xlDescending
    
    With wsData.Sort
        .SetRange wsData.Range("A1:" & wsData.Cells(1, wsData.Columns.Count).End(xlToLeft).Address)
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    ' Copy recent submissions to dashboard
    For i = 2 To 2 + recentCount - 1
        ' Entry ID
        wsDashboard.Cells(dashRow, 1).Value = wsData.Cells(i, entryIdColIndex).Value
        
        ' Submission Date
        If dateColIndex > 0 And Not IsEmpty(wsData.Cells(i, dateColIndex).Value) Then
            wsDashboard.Cells(dashRow, 2).Value = wsData.Cells(i, dateColIndex).Value
        End If
        
        ' Status
        If statusColIndex > 0 And Not IsEmpty(wsData.Cells(i, statusColIndex).Value) Then
            wsDashboard.Cells(dashRow, 3).Value = wsData.Cells(i, statusColIndex).Value
        End If
        
        ' Reviewer
        If reviewerColIndex > 0 And Not IsEmpty(wsData.Cells(i, reviewerColIndex).Value) Then
            wsDashboard.Cells(dashRow, 4).Value = wsData.Cells(i, reviewerColIndex).Value
        End If
        
        ' Review Date
        If reviewDateColIndex > 0 And Not IsEmpty(wsData.Cells(i, reviewDateColIndex).Value) Then
            wsDashboard.Cells(dashRow, 5).Value = wsData.Cells(i, reviewDateColIndex).Value
        End If
        
        dashRow = dashRow + 1
    Next i
    
    ' Format recent submissions
    Dim formatRange As Range
    Set formatRange = wsDashboard.Range("A12:E" & dashRow - 1)
    
    With formatRange
        .Borders.LineStyle = xlContinuous
        .Borders.Weight = xlThin
        
        ' Format header row
        .Rows(1).Font.Bold = True
        .Rows(1).Interior.Color = COLOR_PRIMARY
        .Rows(1).Font.Color = vbWhite
        
        ' Add alternating row colors
        Dim j As Long
        For j = 2 To .Rows.Count Step 2
            .Rows(j).Interior.Color = COLOR_LIGHT
        Next j
        
        ' Autofit columns
        .Columns.AutoFit
    End With
    
    ' Add conditional formatting for status column
    Dim statusRange As Range
    Set statusRange = wsDashboard.Range("C13:C" & dashRow - 1)
    
    ' Clear existing conditional formatting
    statusRange.FormatConditions.Delete
    
    ' Format "Pending Review" as blue
    With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_PENDING & """")
        .Interior.Color = COLOR_INFO
        .Font.Color = vbBlack
    End With
    
    ' Format "Approved" as green
    With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_APPROVED & """")
        .Interior.Color = COLOR_SUCCESS
        .Font.Color = vbWhite
    End With
    
    ' Format "Rejected" as red
    With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_REJECTED & """")
        .Interior.Color = COLOR_DANGER
        .Font.Color = vbWhite
    End With
    
    ' Format "Archived" as gray
    With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_ARCHIVED & """")
        .Interior.Color = COLOR_DARK
        .Font.Color = vbWhite
    End With
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "UpdateRecentSubmissions", Err.Number, Err.Description
End Sub

' Function to format dashboard
Private Sub FormatDashboard(wsDashboard As Worksheet)
    On Error GoTo ErrorHandler
    
    ' Format columns
    wsDashboard.Columns.AutoFit
    
    ' Add borders
    wsDashboard.UsedRange.Borders.LineStyle = xlContinuous
    wsDashboard.UsedRange.Borders.Weight = xlThin
    
    ' Add refresh button
    Dim btnRefresh As Button
    
    ' Delete existing button if any
    On Error Resume Next
    wsDashboard.Buttons("btnRefreshDashboard").Delete
    On Error GoTo ErrorHandler
    
    ' Add new button
    Set btnRefresh = wsDashboard.Buttons.Add(10, 30, 100, 30)
    With btnRefresh
        .Name = "btnRefreshDashboard"
        .Caption = "Refresh Dashboard"
        .OnAction = "UpdateDashboard"
    End With
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "FormatDashboard", Err.Number, Err.Description
End Sub

'------------------------------------------------------------------------------
' UTILITY FUNCTIONS
'------------------------------------------------------------------------------
' Function to get setting from Settings sheet
Private Function GetSetting(settingName As String, defaultValue As String) As String
    On Error Resume Next
    
    Dim wsSettings As Worksheet
    Dim findCell As Range
    
    ' Try to get Settings sheet
    Set wsSettings = ThisWorkbook.Worksheets(SHEET_SETTINGS)
    
    If Not wsSettings Is Nothing Then
        ' Find setting by name
        Set findCell = wsSettings.Columns(1).Find(What:=settingName, LookAt:=xlWhole)
        
        If Not findCell Is Nothing Then
            ' Get setting value
            GetSetting = findCell.Offset(0, 1).Value
            Exit Function
        End If
    End If
    
    ' Return default value if setting not found
    GetSetting = defaultValue
End Function

' Function to log activity
Private Sub LogActivity(activityType As String, activityDetails As String)
    On Error Resume Next
    
    Dim wsLog As Worksheet
    Dim lastRow As Long
    
    ' Try to get Log sheet
    On Error Resume Next
    Set wsLog = ThisWorkbook.Worksheets("ActivityLog")
    On Error GoTo 0
    
    ' Create Log sheet if it doesn't exist
    If wsLog Is Nothing Then
        Set wsLog = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsLog.Name = "ActivityLog"
        
        ' Set up log headers
        wsLog.Range("A1").Value = "Timestamp"
        wsLog.Range("B1").Value = "User"
        wsLog.Range("C1").Value = "Activity Type"
        wsLog.Range("D1").Value = "Details"
        wsLog.Range("A1:D1").Font.Bold = True
    End If
    
    ' Find last row
    lastRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    
    ' Add log entry
    wsLog.Cells(lastRow, 1).Value = Now()
    wsLog.Cells(lastRow, 2).Value = GetCurrentUser()
    wsLog.Cells(lastRow, 3).Value = activityType
    wsLog.Cells(lastRow, 4).Value = activityDetails
    
    ' Format log
    wsLog.Columns.AutoFit
End Sub

' Function to log error
Private Sub LogError(functionName As String, errorNumber As Long, errorDescription As String)
    On Error Resume Next
    
    Dim wsLog As Worksheet
    Dim lastRow As Long
    
    ' Try to get Error Log sheet
    On Error Resume Next
    Set wsLog = ThisWorkbook.Worksheets("ErrorLog")
    On Error GoTo 0
    
    ' Create Error Log sheet if it doesn't exist
    If wsLog Is Nothing Then
        Set wsLog = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsLog.Name = "ErrorLog"
        
        ' Set up log headers
        wsLog.Range("A1").Value = "Timestamp"
        wsLog.Range("B1").Value = "User"
        wsLog.Range("C1").Value = "Function"
        wsLog.Range("D1").Value = "Error Number"
        wsLog.Range("E1").Value = "Description"
        wsLog.Range("A1:E1").Font.Bold = True
    End If
    
    ' Find last row
    lastRow = wsLog.Cells(wsLog.Rows.Count, "A").End(xlUp).Row + 1
    
    ' Add log entry
    wsLog.Cells(lastRow, 1).Value = Now()
    wsLog.Cells(lastRow, 2).Value = GetCurrentUser()
    wsLog.Cells(lastRow, 3).Value = functionName
    wsLog.Cells(lastRow, 4).Value = errorNumber
    wsLog.Cells(lastRow, 5).Value = errorDescription
    
    ' Format log
    wsLog.Columns.AutoFit
End Sub

'------------------------------------------------------------------------------
' EXPORT FUNCTIONS
'------------------------------------------------------------------------------
' Function to export data to CSV
Public Sub ExportDataToCSV()
    On Error GoTo ErrorHandler
    
    Dim wsData As Worksheet
    Dim filePath As String
    Dim fileNum As Integer
    Dim i As Long, j As Long
    Dim lastRow As Long, lastCol As Long
    Dim line As String
    Dim cell As Range
    
    ' Get data sheet
    Set wsData = ThisWorkbook.Worksheets(SHEET_INTAKE_DATA)
    
    ' Find last row and column
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    lastCol = wsData.Cells(1, wsData.Columns.Count).End(xlToLeft).Column
    
    ' Get file path
    filePath = Application.GetSaveAsFilename("IntakeData_" & Format(Now(), "yyyymmdd") & ".csv", "CSV Files (*.csv), *.csv")
    
    ' Exit if user canceled
    If filePath = "False" Then
        Exit Sub
    End If
    
    ' Show progress
    ShowProgressDialog "Exporting data to CSV...", 0
    
    ' Open file for writing
    fileNum = FreeFile
    Open filePath For Output As #fileNum
    
    ' Write header row
    line = ""
    For j = 1 To lastCol
        If j > 1 Then line = line & ","
        line = line & """" & Replace(wsData.Cells(1, j).Value, """", """""") & """"
    Next j
    Print #fileNum, line
    
    ' Write data rows
    For i = 2 To lastRow
        ShowProgressDialog "Exporting data to CSV...", Int((i - 2) / (lastRow - 2) * 100)
        
        line = ""
        For j = 1 To lastCol
            If j > 1 Then line = line & ","
            
            ' Format cell value based on type
            Select Case wsData.Cells(i, j).NumberFormat
                Case "m/d/yyyy", "mm/dd/yyyy", "dd/mm/yyyy", "yyyy-mm-dd"
                    If IsDate(wsData.Cells(i, j).Value) Then
                        line = line & """" & Format(wsData.Cells(i, j).Value, "yyyy-mm-dd") & """"
                    Else
                        line = line & """" & Replace(wsData.Cells(i, j).Value, """", """""") & """"
                    End If
                Case Else
                    line = line & """" & Replace(wsData.Cells(i, j).Value, """", """""") & """"
            End Select
        Next j
        Print #fileNum, line
    Next i
    
    ' Close file
    Close #fileNum
    
    ' Hide progress
    HideProgressDialog
    
    ' Show success message
    ShowAnimatedMessage "Data exported successfully to:" & vbNewLine & filePath, "Export Complete", vbInformation
    
    ' Log the activity
    LogActivity "Data Export", "Exported to CSV: " & filePath
    
    Exit Sub
    
ErrorHandler:
    ' Close file if open
    On Error Resume Next
    Close #fileNum
    HideProgressDialog
    On Error GoTo 0
    
    ShowErrorMessage "ExportDataToCSV", Err.Number, Err.Description
End Sub

' Function to export data to Excel
Public Sub ExportDataToExcel()
    On Error GoTo ErrorHandler
    
    Dim wsData As Worksheet
    Dim newWB As Workbook
    Dim newWS As Worksheet
    Dim filePath As String
    Dim dataRange As Range
    Dim lastRow As Long, lastCol As Long
    
    ' Get data sheet
    Set wsData = ThisWorkbook.Worksheets(SHEET_INTAKE_DATA)
    
    ' Find last row and column
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    lastCol = wsData.Cells(1, wsData.Columns.Count).End(xlToLeft).Column
    
    ' Get data range
    Set dataRange = wsData.Range(wsData.Cells(1, 1), wsData.Cells(lastRow, lastCol))
    
    ' Show progress
    ShowProgressDialog "Exporting data to Excel...", 0
    
    ' Create new workbook
    Set newWB = Workbooks.Add
    Set newWS = newWB.Sheets(1)
    newWS.Name = "Intake Data"
    
    ' Copy data
    dataRange.Copy newWS.Range("A1")
    
    ' Format data
    With newWS.Range("A1").CurrentRegion
        ' Add borders
        .Borders.LineStyle = xlContinuous
        .Borders.Weight = xlThin
        
        ' Format header row
        .Rows(1).Font.Bold = True
        .Rows(1).Interior.Color = COLOR_PRIMARY
        .Rows(1).Font.Color = vbWhite
        
        ' Add alternating row colors
        Dim i As Long
        For i = 2 To .Rows.Count Step 2
            .Rows(i).Interior.Color = COLOR_LIGHT
        Next i
        
        ' Autofit columns
        .Columns.AutoFit
    End With
    
    ' Add status column conditional formatting
    Dim statusColIndex As Long
    statusColIndex = GetColumnIndex(wsData, "Status")
    
    If statusColIndex > 0 Then
        Dim statusRange As Range
        Set statusRange = newWS.Range(newWS.Cells(2, statusColIndex), newWS.Cells(lastRow, statusColIndex))
        
        ' Clear existing conditional formatting
        statusRange.FormatConditions.Delete
        
        ' Format "Pending Review" as blue
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_PENDING & """")
            .Interior.Color = COLOR_INFO
            .Font.Color = vbBlack
        End With
        
        ' Format "Approved" as green
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_APPROVED & """")
            .Interior.Color = COLOR_SUCCESS
            .Font.Color = vbWhite
        End With
        
        ' Format "Rejected" as red
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_REJECTED & """")
            .Interior.Color = COLOR_DANGER
            .Font.Color = vbWhite
        End With
        
        ' Format "Archived" as gray
        With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_ARCHIVED & """")
            .Interior.Color = COLOR_DARK
            .Font.Color = vbWhite
        End With
    End If
    
    ' Add filters
    newWS.Range("A1").CurrentRegion.AutoFilter
    
    ' Update progress
    ShowProgressDialog "Exporting data to Excel...", 50
    
    ' Get file path
    filePath = Application.GetSaveAsFilename("IntakeData_" & Format(Now(), "yyyymmdd") & ".xlsx", "Excel Files (*.xlsx), *.xlsx")
    
    ' Exit if user canceled
    If filePath = "False" Then
        newWB.Close SaveChanges:=False
        HideProgressDialog
        Exit Sub
    End If
    
    ' Update progress
    ShowProgressDialog "Saving file...", 75
    
    ' Save workbook
    newWB.SaveAs filePath, FileFormat:=xlOpenXMLWorkbook
    
    ' Update progress
    ShowProgressDialog "Finalizing export...", 90
    
    ' Close workbook
    newWB.Close SaveChanges:=True
    
    ' Hide progress
    HideProgressDialog
    
    ' Show success message
    ShowAnimatedMessage "Data exported successfully to:" & vbNewLine & filePath, "Export Complete", vbInformation
    
    ' Log the activity
    LogActivity "Data Export", "Exported to Excel: " & filePath
    
    Exit Sub
    
ErrorHandler:
    ' Close workbook if open
    On Error Resume Next
    If Not newWB Is Nothing Then newWB.Close SaveChanges:=False
    HideProgressDialog
    On Error GoTo 0
    
    ShowErrorMessage "ExportDataToExcel", Err.Number, Err.Description
End Sub

'------------------------------------------------------------------------------
' SETUP FUNCTIONS
'------------------------------------------------------------------------------
' Function to create Settings sheet if it doesn't exist
Public Sub CreateSettingsSheet()
    On Error Resume Next
    
    Dim wsSettings As Worksheet
    
    ' Check if Settings sheet already exists
    Set wsSettings = ThisWorkbook.Worksheets(SHEET_SETTINGS)
    
    If wsSettings Is Nothing Then
        ' Create new Settings sheet
        Set wsSettings = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsSettings.Name = SHEET_SETTINGS
        
        ' Set up headers
        wsSettings.Range("A1").Value = "Setting"
        wsSettings.Range("B1").Value = "Value"
        wsSettings.Range("A1:B1").Font.Bold = True
        wsSettings.Range("A1:B1").Interior.Color = COLOR_PRIMARY
        wsSettings.Range("A1:B1").Font.Color = vbWhite
        
        ' Add recipient email setting
        wsSettings.Range("A2").Value = "Recipient Email"
        wsSettings.Range("B2").Value = "recipient@example.com"
        
        ' Add reviewer email setting
        wsSettings.Range("A3").Value = "Reviewer Email"
        wsSettings.Range("B3").Value = "reviewer@example.com"
        
        ' Add company name setting
        wsSettings.Range("A4").Value = "Company Name"
        wsSettings.Range("B4").Value = "Your Company Name"
        
        ' Add company logo URL setting
        wsSettings.Range("A5").Value = "Company Logo URL"
        wsSettings.Range("B5").Value = ""
        
        ' Add email notification setting
        wsSettings.Range("A6").Value = "Send Email Notifications"
        wsSettings.Range("B6").Value = "Yes"
        
        ' Add auto-refresh dashboard setting
        wsSettings.Range("A7").Value = "Auto-Refresh Dashboard"
        wsSettings.Range("B7").Value = "No"
        
        ' Format the sheet
        wsSettings.Columns("A:B").AutoFit
        wsSettings.Range("A1:B" & wsSettings.Cells(wsSettings.Rows.Count, "A").End(xlUp).Row).Borders.LineStyle = xlContinuous
        
        ' Add data validation for Yes/No fields
        Dim yesNoRange As Range
        Set yesNoRange = wsSettings.Range("B6:B7")
        
        With yesNoRange.Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:="Yes,No"
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        
        ShowAnimatedMessage "Settings sheet has been created." & vbNewLine & _
               "You can now configure email addresses and other settings.", "Setup Complete", vbInformation
    Else
        ShowModernDialog "Settings", "Settings sheet already exists.", "info"
    End If
End Sub

' Function to create DefaultValues sheet if it doesn't exist
Public Sub CreateDefaultValuesSheet()
    On Error Resume Next
    
    Dim wsDefaults As Worksheet
    Dim wsInput As Worksheet
    Dim i As Integer
    
    ' Check if DefaultValues sheet already exists
    Set wsDefaults = ThisWorkbook.Worksheets(SHEET_DEFAULTS)
    
    If wsDefaults Is Nothing Then
        ' Create new DefaultValues sheet
        Set wsDefaults = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsDefaults.Name = SHEET_DEFAULTS
        
        ' Set up header
        wsDefaults.Range("A1").Value = "Field Name"
        wsDefaults.Range("B1").Value = "Default Value"
        wsDefaults.Range("C1").Value = "Required"
        wsDefaults.Range("D1").Value = "Field Type"
        wsDefaults.Range("E1").Value = "Validation Rule"
        wsDefaults.Range("A1:E1").Font.Bold = True
        wsDefaults.Range("A1:E1").Interior.Color = COLOR_PRIMARY
        wsDefaults.Range("A1:E1").Font.Color = vbWhite
        
        ' Copy field names from IntakeForm
        Set wsInput = ThisWorkbook.Worksheets(SHEET_INTAKE_FORM)
        
        Dim lastRow As Long
        lastRow = wsInput.Cells(wsInput.Rows.Count, 1).End(xlUp).Row
        
        For i = 2 To lastRow
            If Not IsEmpty(wsInput.Cells(i, 1)) Then
                wsDefaults.Cells(i, 1).Value = wsInput.Cells(i, 1).Value
                
                ' Copy current values as defaults (optional)
                If Not IsEmpty(wsInput.Cells(i, 2)) Then
                    wsDefaults.Cells(i, 2).Value = wsInput.Cells(i, 2).Value
                End If
                
                ' Set required flag (if field name contains *)
                If InStr(wsInput.Cells(i, 1).Value, "*") > 0 Then
                    wsDefaults.Cells(i, 3).Value = "Yes"
                Else
                    wsDefaults.Cells(i, 3).Value = "No"
                End If
                
                ' Set field type based on cell format
                wsDefaults.Cells(i, 4).Value = DetermineFieldType(wsInput.Cells(i, 2))
                
                ' Set validation rule if any
                If wsInput.Cells(i, 2).Validation.Type <> xlValidateNone Then
                    wsDefaults.Cells(i, 5).Value = GetValidationRule(wsInput.Cells(i, 2).Validation)
                End If
            End If
        Next i
        
        ' Format the sheet
        wsDefaults.Columns("A:E").AutoFit
        wsDefaults.Range("A1:E" & wsDefaults.Cells(wsDefaults.Rows.Count, "A").End(xlUp).Row).Borders.LineStyle = xlContinuous
        
        ' Add data validation for Required column
        Dim requiredRange As Range
        Set requiredRange = wsDefaults.Range("C2:C" & wsDefaults.Cells(wsDefaults.Rows.Count, "A").End(xlUp).Row)
        
        With requiredRange.Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:="Yes,No"
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        
        ' Add data validation for Field Type column
        Dim typeRange As Range
        Set typeRange = wsDefaults.Range("D2:D" & wsDefaults.Cells(wsDefaults.Rows.Count, "A").End(xlUp).Row)
        
        With typeRange.Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:="Text,Number,Date,Email,Dropdown"
            .IgnoreBlank = True
            .InCellDropdown = True
        End With
        
        ShowAnimatedMessage "DefaultValues sheet has been created." & vbNewLine & _
               "You can now enter default values for the form fields.", "Setup Complete", vbInformation
    Else
        ShowModernDialog "Default Values", "DefaultValues sheet already exists.", "info"
    End If
End Sub

' Function to view pending submissions
Public Sub ViewPendingSubmissions()
    On Error GoTo ErrorHandler
    
    Dim wsData As Worksheet
    Dim pendingCount As Long
    Dim statusColIndex As Long
    
    Set wsData = ThisWorkbook.Worksheets(SHEET_INTAKE_DATA)
    
    ' Get status column index
    statusColIndex = GetColumnIndex(wsData, "Status")
    
    ' Count pending submissions
    pendingCount = WorksheetFunction.CountIf(wsData.Columns(statusColIndex), STATUS_PENDING)
    
    If pendingCount = 0 Then
        ShowModernDialog "No Pending Submissions", "There are no pending submissions to review.", "info"
        Exit Sub
    End If
    
    ' Show pending submissions in a modern UI
    ShowPendingSubmissionsForm wsData, statusColIndex
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "ViewPendingSubmissions", Err.Number, Err.Description
End Sub

' Function to show pending submissions in a form
Private Sub ShowPendingSubmissionsForm(wsData As Worksheet, statusColIndex As Long)
    On Error GoTo ErrorHandler
    
    ' Create a UserForm dynamically
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Pending Submissions"
        .Properties("Width") = 600
        .Properties("Height") = 400
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add form header
    Dim lblHeader As Object
    Set lblHeader = frm.Designer.Controls.Add("Forms.Label.1")
    With lblHeader
        .Left = 10
        .Top = 10
        .Width = 580
        .Height = 30
        .Caption = "Pending Submissions"
        .Font.Size = 14
        .Font.Bold = True
        .ForeColor = COLOR_PRIMARY
    End With
    
    ' Add ListView for pending submissions
    Dim lvwPending As Object
    Set lvwPending = frm.Designer.Controls.Add("Forms.ListView.1")
    With lvwPending
        .Left = 10
        .Top = 50
        .Width = 580
        .Height = 300
        .View = 3 ' Report view
    End With
    
    ' Add Review button
    Dim btnReview As Object
    Set btnReview = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnReview
        .Left = 400
        .Top = 360
        .Width = 90
        .Height = 30
        .Caption = "Review"
    End With
    
    ' Add Close button
    Dim btnClose As Object
    Set btnClose = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnClose
        .Left = 500
        .Top = 360
        .Width = 90
        .Height = 30
        .Caption = "Close"
        .Cancel = True
    End With
    
    ' Add code to initialize the form and handle buttons
    Dim formCode As String
    formCode = "Private Sub UserForm_Initialize()" & vbNewLine & _
               "  ' Initialize ListView columns" & vbNewLine & _
               "  With ListView1" & vbNewLine & _
               "    .ColumnHeaders.Add , , ""Entry ID"", 80" & vbNewLine & _
               "    .ColumnHeaders.Add , , ""Submission Date"", 120" & vbNewLine & _
               "    .ColumnHeaders.Add , , ""Submitter"", 120" & vbNewLine & _
               "    .ColumnHeaders.Add , , ""Status"", 100" & vbNewLine & _
               "    .FullRowSelect = True" & vbNewLine & _
               "  End With" & vbNewLine & _
               "  " & vbNewLine & _
               "  ' Load pending submissions" & vbNewLine & _
               "  LoadPendingSubmissions" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub LoadPendingSubmissions()" & vbNewLine & _
               "  Dim ws As Worksheet" & vbNewLine & _
               "  Dim i As Long, lastRow As Long" & vbNewLine & _
               "  Dim item As Object" & vbNewLine & _
               "  Dim entryIdCol As Long, dateCol As Long, submitterCol As Long, statusCol As Long" & vbNewLine & _
               "  " & vbNewLine & _
               "  Set ws = ThisWorkbook.Worksheets(""" & SHEET_INTAKE_DATA & """)" & vbNewLine & _
               "  lastRow = ws.Cells(ws.Rows.Count, ""A"").End(xlUp).Row" & vbNewLine & _
               "  " & vbNewLine & _
               "  ' Get column indexes" & vbNewLine & _
               "  entryIdCol = 1 ' Assuming Entry ID is in column A" & vbNewLine & _
               "  dateCol = GetColumnIndex(ws, ""Submission Date"")" & vbNewLine & _
               "  submitterCol = GetColumnIndex(ws, ""Submitter"")" & vbNewLine & _
               "  statusCol = " & statusColIndex & vbNewLine & _
               "  " & vbNewLine & _
               "  ' Load pending submissions" & vbNewLine & _
               "  For i = 2 To lastRow" & vbNewLine & _
               "    If ws.Cells(i, statusCol).Value = """ & STATUS_PENDING & """ Then" & vbNewLine & _
               "      Set item = ListView1.ListItems.Add(, , ws.Cells(i, entryIdCol).Value)" & vbNewLine & _
               "      " & vbNewLine & _
               "      ' Add submission date" & vbNewLine & _
               "      If dateCol > 0 And Not IsEmpty(ws.Cells(i, dateCol).Value) Then" & vbNewLine & _
               "        item.SubItems(1) = Format(ws.Cells(i, dateCol).Value, ""yyyy-mm-dd"")" & vbNewLine & _
               "      Else" & vbNewLine & _
               "        item.SubItems(1) = """"" & vbNewLine & _
               "      End If" & vbNewLine & _
               "      " & vbNewLine & _
               "      ' Add submitter" & vbNewLine & _
               "      If submitterCol > 0 And Not IsEmpty(ws.Cells(i, submitterCol).Value) Then" & vbNewLine & _
               "        item.SubItems(2) = ws.Cells(i, submitterCol).Value" & vbNewLine & _
               "      Else" & vbNewLine & _
               "        item.SubItems(2) = """"" & vbNewLine & _
               "      End If" & vbNewLine & _
               "      " & vbNewLine & _
               "      ' Add status" & vbNewLine & _
               "      item.SubItems(3) = ws.Cells(i, statusCol).Value" & vbNewLine & _
               "    End If" & vbNewLine & _
               "  Next i" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Function GetColumnIndex(ws As Worksheet, headerName As String) As Long" & vbNewLine & _
               "  Dim headerRow As Range" & vbNewLine & _
               "  Dim cell As Range" & vbNewLine & _
               "  " & vbNewLine & _
               "  Set headerRow = ws.Range(""1:1"")" & vbNewLine & _
               "  " & vbNewLine & _
               "  For Each cell In headerRow.Cells" & vbNewLine & _
               "    If cell.Value = headerName Then" & vbNewLine & _
               "      GetColumnIndex = cell.Column" & vbNewLine & _
               "      Exit Function" & vbNewLine & _
               "    End If" & vbNewLine & _
               "  Next cell" & vbNewLine & _
               "  " & vbNewLine & _
               "  GetColumnIndex = 0" & vbNewLine & _
               "End Function" & vbNewLine & _
               "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  ' Review selected submission" & vbNewLine & _
               "  If ListView1.SelectedItem Is Nothing Then" & vbNewLine & _
               "    MsgBox ""Please select a submission to review."", vbExclamation" & vbNewLine & _
               "    Exit Sub" & vbNewLine & _
               "  End If" & vbNewLine & _
               "  " & vbNewLine & _
               "  ' Get selected entry ID" & vbNewLine & _
               "  Dim entryId As Long" & vbNewLine & _
               "  entryId = CLng(ListView1.SelectedItem.Text)" & vbNewLine & _
               "  " & vbNewLine & _
               "  ' Hide form" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  " & vbNewLine & _
               "  ' Call ReviewSubmission with selected entry ID" & vbNewLine & _
               "  Application.Run ""ReviewSubmission""" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton2_Click()" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "ShowPendingSubmissionsForm", Err.Number, Err.Description
End Sub

'==============================================================================
' MAIN MENU FUNCTIONS
'==============================================================================
' Function to show main menu
Public Sub ShowMainMenu()
    On Error GoTo ErrorHandler
    
    ' Create a UserForm dynamically
    Dim frm As Object
    Set frm = ThisWorkbook.VBProject.VBComponents.Add(3) ' 3 = vbext_ct_MSForm
    
    ' Set form properties
    With frm
        .Properties("Caption") = "Intake Form System"
        .Properties("Width") = 400
        .Properties("Height") = 500
        .Properties("BackColor") = COLOR_LIGHT
    End With
    
    ' Add form header
    Dim lblHeader As Object
    Set lblHeader = frm.Designer.Controls.Add("Forms.Label.1")
    With lblHeader
        .Left = 0
        .Top = 0
        .Width = 400
        .Height = 50
        .Caption = "Intake Form Management System"
        .Font.Size = 14
        .Font.Bold = True
        .ForeColor = vbWhite
        .BackColor = COLOR_PRIMARY
        .TextAlign = 2 ' Center
    End With
    
    ' Add version label
    Dim lblVersion As Object
    Set lblVersion = frm.Designer.Controls.Add("Forms.Label.1")
    With lblVersion
        .Left = 0
        .Top = 50
        .Width = 400
        .Height = 20
        .Caption = "Version 2.0"
        .Font.Size = 8
        .ForeColor = vbWhite
        .BackColor = COLOR_PRIMARY
        .TextAlign = 2 ' Center
    End With
    
    ' Add form section
    Dim lblFormSection As Object
    Set lblFormSection = frm.Designer.Controls.Add("Forms.Label.1")
    With lblFormSection
        .Left = 10
        .Top = 80
        .Width = 380
        .Height = 20
        .Caption = "Form Management"
        .Font.Bold = True
        .ForeColor = COLOR_PRIMARY
    End With
    
    ' Add Submit Form button
    Dim btnSubmit As Object
    Set btnSubmit = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnSubmit
        .Left = 10
        .Top = 110
        .Width = 180
        .Height = 40
        .Caption = "Submit Form"
    End With
    
    ' Add Clear Form button
    Dim btnClear As Object
    Set btnClear = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnClear
        .Left = 210
        .Top = 110
        .Width = 180
        .Height = 40
        .Caption = "Clear Form"
    End With
    
    ' Add review section
    Dim lblReviewSection As Object
    Set lblReviewSection = frm.Designer.Controls.Add("Forms.Label.1")
    With lblReviewSection
        .Left = 10
        .Top = 160
        .Width = 380
        .Height = 20
        .Caption = "Review Management"
        .Font.Bold = True
        .ForeColor = COLOR_PRIMARY
    End With
    
    ' Add View Pending button
    Dim btnPending As Object
    Set btnPending = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnPending
        .Left = 10
        .Top = 190
        .Width = 180
        .Height = 40
        .Caption = "View Pending Submissions"
    End With
    
    ' Add Review Submission button
    Dim btnReview As Object
    Set btnReview = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnReview
        .Left = 210
        .Top = 190
        .Width = 180
        .Height = 40
        .Caption = "Review Submission"
    End With
    
    ' Add data section
    Dim lblDataSection As Object
    Set lblDataSection = frm.Designer.Controls.Add("Forms.Label.1")
    With lblDataSection
        .Left = 10
        .Top = 240
        .Width = 380
        .Height = 20
        .Caption = "Data Management"
        .Font.Bold = True
        .ForeColor = COLOR_PRIMARY
    End With
    
    ' Add View Dashboard button
    Dim btnDashboard As Object
    Set btnDashboard = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnDashboard
        .Left = 10
        .Top = 270
        .Width = 180
        .Height = 40
        .Caption = "View Dashboard"
    End With
    
    ' Add Export Data button
    Dim btnExport As Object
    Set btnExport = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnExport
        .Left = 210
        .Top = 270
        .Width = 180
        .Height = 40
        .Caption = "Export Data"
    End With
    
    ' Add setup section
    Dim lblSetupSection As Object
    Set lblSetupSection = frm.Designer.Controls.Add("Forms.Label.1")
    With lblSetupSection
        .Left = 10
        .Top = 320
        .Width = 380
        .Height = 20
        .Caption = "System Setup"
        .Font.Bold = True
        .ForeColor = COLOR_PRIMARY
    End With
    
    ' Add Settings button
    Dim btnSettings As Object
    Set btnSettings = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnSettings
        .Left = 10
        .Top = 350
        .Width = 180
        .Height = 40
        .Caption = "Settings"
    End With
    
    ' Add Default Values button
    Dim btnDefaults As Object
    Set btnDefaults = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnDefaults
        .Left = 210
        .Top = 350
        .Width = 180
        .Height = 40
        .Caption = "Default Values"
    End With
    
    ' Add Close button
    Dim btnClose As Object
    Set btnClose = frm.Designer.Controls.Add("Forms.CommandButton.1")
    With btnClose
        .Left = 150
        .Top = 420
        .Width = 100
        .Height = 30
        .Caption = "Close"
        .Cancel = True
    End With
    
    ' Add code to handle buttons
    Dim formCode As String
    formCode = "Private Sub CommandButton1_Click()" & vbNewLine & _
               "  ' Submit Form" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  Application.Run ""SubmitIntake""" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton2_Click()" & vbNewLine & _
               "  ' Clear Form" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  Dim ws As Worksheet" & vbNewLine & _
               "  Set ws = ThisWorkbook.Worksheets(""" & SHEET_INTAKE_FORM & """)" & vbNewLine & _
               "  Application.Run ""ClearForm"", ws" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton3_Click()" & vbNewLine & _
               "  ' View Pending Submissions" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  Application.Run ""ViewPendingSubmissions""" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton4_Click()" & vbNewLine & _
               "  ' Review Submission" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  Application.Run ""ReviewSubmission""" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton5_Click()" & vbNewLine & _
               "  ' View Dashboard" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  Dim ws As Worksheet" & vbNewLine & _
               "  On Error Resume Next" & vbNewLine & _
               "  Set ws = ThisWorkbook.Worksheets(""" & SHEET_DASHBOARD & """)" & vbNewLine & _
               "  If ws Is Nothing Then" & vbNewLine & _
               "    Application.Run ""UpdateDashboard""" & vbNewLine & _
               "    Set ws = ThisWorkbook.Worksheets(""" & SHEET_DASHBOARD & """)" & vbNewLine & _
               "  End If" & vbNewLine & _
               "  ws.Activate" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton6_Click()" & vbNewLine & _
               "  ' Export Data" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  " & vbNewLine & _
               "  ' Show export options" & vbNewLine & _
               "  Dim response As VbMsgBoxResult" & vbNewLine & _
               "  response = MsgBox(""Select export format:"" & vbNewLine & _" & vbNewLine & _
               "                   ""Yes = Excel"" & vbNewLine & _" & vbNewLine & _
               "                   ""No = CSV"", vbYesNoCancel + vbQuestion, ""Export Data"")" & vbNewLine & _
               "  " & vbNewLine & _
               "  Select Case response" & vbNewLine & _
               "    Case vbYes" & vbNewLine & _
               "      Application.Run ""ExportDataToExcel""" & vbNewLine & _
               "    Case vbNo" & vbNewLine & _
               "      Application.Run ""ExportDataToCSV""" & vbNewLine & _
               "  End Select" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton7_Click()" & vbNewLine & _
               "  ' Settings" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  Application.Run ""CreateSettingsSheet""" & vbNewLine & _
               "  " & vbNewLine & _
               "  Dim ws As Worksheet" & vbNewLine & _
               "  On Error Resume Next" & vbNewLine & _
               "  Set ws = ThisWorkbook.Worksheets(""" & SHEET_SETTINGS & """)" & vbNewLine & _
               "  If Not ws Is Nothing Then" & vbNewLine & _
               "    ws.Activate" & vbNewLine & _
               "  End If" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton8_Click()" & vbNewLine & _
               "  ' Default Values" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "  Application.Run ""CreateDefaultValuesSheet""" & vbNewLine & _
               "  " & vbNewLine & _
               "  Dim ws As Worksheet" & vbNewLine & _
               "  On Error Resume Next" & vbNewLine & _
               "  Set ws = ThisWorkbook.Worksheets(""" & SHEET_DEFAULTS & """)" & vbNewLine & _
               "  If Not ws Is Nothing Then" & vbNewLine & _
               "    ws.Activate" & vbNewLine & _
               "  End If" & vbNewLine & _
               "End Sub" & vbNewLine & _
               "Private Sub CommandButton9_Click()" & vbNewLine & _
               "  ' Close" & vbNewLine & _
               "  Me.Hide" & vbNewLine & _
               "End Sub"
    
    frm.CodeModule.AddFromString formCode
    
    ' Show the form
    ExecuteExcel4Macro "SHOW.DIALOG([" & frm.Name & "])"
    
    ' Clean up
    ThisWorkbook.VBProject.VBComponents.Remove frm
    
    Exit Sub
    
ErrorHandler:
    ShowErrorMessage "ShowMainMenu", Err.Number, Err.Description
End Sub
