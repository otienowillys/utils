Option Explicit

' Constants for status
Private Const STATUS_PENDING As String = "Pending Review"
Private Const STATUS_APPROVED As String = "Approved"
Private Const STATUS_REJECTED As String = "Rejected"

' Main function to handle form submission
Public Sub SubmitIntake()
    On Error GoTo ErrorHandler
    
    Dim wsInput As Worksheet
    Dim wsData As Worksheet
    Dim entryId As Long
    Dim emailSent As Boolean
    
    Set wsInput = ThisWorkbook.Worksheets("IntakeForm")
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    
    ' Validate form
    If Not ValidateForm(wsInput) Then
        MsgBox "Please fill in all required fields.", vbExclamation
        Exit Sub
    End If
    
    ' Get next entry ID
    entryId = GetNextEntryId(wsData)
    
    ' Save form data first
    SaveFormData wsInput, wsData, entryId
    
    ' Try to send email
    emailSent = SendEmail(wsInput, entryId)
    
    ' Restore default values to form
    ClearForm wsInput
    
    ' Format data sheet
    FormatDataSheet wsData
    
    If emailSent Then
        MsgBox "Form submitted successfully and email sent!" & vbNewLine & _
               "The submission is now pending review.", vbInformation
    Else
        MsgBox "Form submitted successfully, but email could not be sent. The data has been saved." & vbNewLine & _
               "The submission is now pending review.", vbInformation
    End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "An error occurred in SubmitIntake: " & Err.Description, vbCritical
End Sub

' Function to validate form fields (updated range: rows 2 to 40)
Private Function ValidateForm(ws As Worksheet) As Boolean
    On Error GoTo ErrorHandler
    
    Dim cell As Range
    Dim requiredRange As Range
    
    ' Assuming required fields are in column A, rows 2 to 40
    Set requiredRange = ws.Range("A2:A40")
    
    For Each cell In requiredRange
        If IsEmpty(cell.Offset(0, 1)) Then
            ValidateForm = False
            Exit Function
        End If
    Next cell
    
    ValidateForm = True
    Exit Function
    
ErrorHandler:
    MsgBox "Error in ValidateForm: " & Err.Description, vbCritical
    ValidateForm = False
End Function

' Function to get the next entry ID
Private Function GetNextEntryId(wsData As Worksheet) As Long
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    If lastRow = 1 Then
        GetNextEntryId = 1
    Else
        GetNextEntryId = wsData.Cells(lastRow, "A").Value + 1
    End If
    
    Exit Function
    
ErrorHandler:
    MsgBox "Error in GetNextEntryId: " & Err.Description, vbCritical
    GetNextEntryId = 0
End Function

' Function to send email
Private Function SendEmail(wsInput As Worksheet, entryId As Long) As Boolean
    On Error GoTo ErrorHandler
    
    Dim outlookApp As Object
    Dim mailItem As Object
    Dim htmlBody As String
    Dim userResponse As VbMsgBoxResult
    Dim recipientEmail As String
    
    ' Try to use Outlook
    Set outlookApp = GetOutlookApp()
    
    ' Get recipient email - can be configured in a settings sheet or cell
    recipientEmail = GetRecipientEmail()
    
    If Not outlookApp Is Nothing Then
        Set mailItem = outlookApp.CreateItem(0)  ' 0 = olMailItem
        
        With mailItem
            .To = recipientEmail
            .Subject = "New Intake Form Submission - Entry ID: " & entryId
            
            ' Build HTML body
            htmlBody = BuildEmailHTML(wsInput, entryId)
            .HTMLBody = htmlBody
            
            ' Optional: Add attachments if needed
            ' .Attachments.Add "path\to\file.xlsx"
            
            ' Ask user for confirmation
            userResponse = MsgBox("Do you want to send this email?" & vbNewLine & _
                                  "To: " & .To & vbNewLine & _
                                  "Subject: " & .Subject, vbYesNo + vbQuestion)
            
            If userResponse = vbYes Then
                .Send
                SendEmail = True
            Else
                SendEmail = False
            End If
        End With
        
        Set mailItem = Nothing
    Else
        MsgBox "Outlook is not available. Please make sure Outlook is installed and running.", vbExclamation
        SendEmail = False
    End If
    
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in SendEmail: " & Err.Description
    MsgBox "Error sending email: " & Err.Description & vbNewLine & _
           "Please ensure Outlook is properly configured.", vbExclamation
    SendEmail = False
End Function

' Function to get or create Outlook application object
Private Function GetOutlookApp() As Object
    On Error Resume Next
    Set GetOutlookApp = GetObject(, "Outlook.Application")
    If GetOutlookApp Is Nothing Then
        Set GetOutlookApp = CreateObject("Outlook.Application")
    End If
    On Error GoTo 0
End Function

' Function to get recipient email (can be modified to read from a settings sheet)
Private Function GetRecipientEmail() As String
    On Error Resume Next
    
    Dim wsSettings As Worksheet
    Dim findCell As Range
    
    ' Try to get email from Settings sheet if it exists
    Set wsSettings = ThisWorkbook.Worksheets("Settings")
    
    If Not wsSettings Is Nothing Then
        ' Check if there's a cell with "Email" or "Recipient" label
        Set findCell = wsSettings.Cells.Find(What:="Email", LookAt:=xlWhole)
        If findCell Is Nothing Then
            Set findCell = wsSettings.Cells.Find(What:="Recipient", LookAt:=xlWhole)
        End If
        
        If Not findCell Is Nothing Then
            Dim emailValue As String
            emailValue = Trim(findCell.Offset(0, 1).Value)
            If emailValue <> "" Then
                GetRecipientEmail = emailValue
                Exit Function
            End If
        End If
    End If
    
    ' Fallback default
    GetRecipientEmail = "recipient@example.com"
End Function

' Function to create Settings sheet if it doesn't exist
Public Sub CreateSettingsSheet()
    On Error Resume Next
    
    Dim wsSettings As Worksheet
    Set wsSettings = ThisWorkbook.Worksheets("Settings")
    
    If wsSettings Is Nothing Then
        Set wsSettings = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsSettings.Name = "Settings"
        
        ' Set up headers
        wsSettings.Range("A1").Value = "Setting"
        wsSettings.Range("B1").Value = "Value"
        wsSettings.Range("A1:B1").Font.Bold = True
        
        ' Add recipient email setting
        wsSettings.Range("A2").Value = "Recipient Email"
        wsSettings.Range("B2").Value = "recipient@example.com"
        
        ' Add reviewer email setting
        wsSettings.Range("A3").Value = "Reviewer Email"
        wsSettings.Range("B3").Value = "reviewer@example.com"
        
        ' Add company name setting
        wsSettings.Range("A4").Value = "Company Name"
        wsSettings.Range("B4").Value = "Your Company Name"
        
        ' Format the sheet
        wsSettings.Columns("A:B").AutoFit
        
        MsgBox "Settings sheet has been created." & vbNewLine & _
               "You can now configure email addresses and other settings.", vbInformation
    Else
        MsgBox "Settings sheet already exists.", vbInformation
    End If
End Sub

' Function to build HTML email content for submission notification
Private Function BuildEmailHTML(ws As Worksheet, entryId As Long) As String
    On Error GoTo ErrorHandler
    
    Dim html As String
    Dim i As Integer
    Dim fieldName As String
    Dim fieldValue As String
    
    html = "<html><head><meta name='viewport' content='width=device-width, initial-scale=1.0'><style>"
    html = html & "body { font-family: Arial, Helvetica, sans-serif; line-height: 1.6; color: #000000; max-width: 650px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; }"
    html = html & ".email-container { background-color: #ffffff; border: 1px solid #dddddd; padding: 20px; }"
    html = html & "h1 { color: #000000; font-weight: bold; margin-top: 0; padding-bottom: 10px; border-bottom: 1px solid #dddddd; }"
    html = html & ".header-section { margin-bottom: 25px; }"
    html = html & ".entry-id { background-color: #006EB6; color: #ffffff; display: inline-block; padding: 8px 12px; font-weight: bold; margin-bottom: 15px; }"
    html = html & "table { width: 100%; border-collapse: collapse; margin: 25px 0; border: 1px solid #dddddd; }"
    html = html & "th { background-color: #006EB6; color: #ffffff; font-weight: bold; text-align: left; padding: 10px; }"
    html = html & "td { padding: 10px; border-bottom: 1px solid #dddddd; }"
    html = html & "tr:last-child td { border-bottom: none; }"
    html = html & ".category-cell { font-weight: bold; }"
    html = html & ".pending { background-color: #17a2b8; color: #ffffff; padding: 5px 10px; font-weight: bold; display: inline-block; }"
    html = html & ".button-container { text-align: center; margin-top: 25px; }"
    html = html & ".button { background-color: #006EB6; color: #ffffff; padding: 10px 20px; text-decoration: none; font-weight: bold; display: inline-block; }"
    html = html & ".footer { margin-top: 20px; border-top: 1px solid #dddddd; padding-top: 20px; color: #666666; font-size: 14px; }"
    html = html & "</style></head><body>"
    
    html = html & "<div class='email-container'>"
    html = html & "<div class='header-section'>"
    html = html & "<h1>New Intake Form Submission</h1>"
    html = html & "<p>A new intake form has been submitted with the following information:</p>"
    html = html & "<div class='entry-id'>Entry ID: " & entryId & "</div>"
    html = html & "</div>"
    
    html = html & "<table>"
    html = html & "<tr><th>Category</th><th>Details</th><th>Status</th></tr>"
    
    ' Loop through form fields (now rows 2 to 40)
    For i = 2 To 40
        If Not IsEmpty(ws.Cells(i, 1)) Then
            fieldName = ws.Cells(i, 1).Value
            fieldValue = ws.Cells(i, 2).Value
            fieldName = Replace(Replace(Replace(fieldName, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            fieldValue = Replace(Replace(Replace(fieldValue, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            html = html & "<tr>"
            html = html & "<td class='category-cell'>" & fieldName & "</td>"
            html = html & "<td>" & fieldValue & "</td>"
            html = html & "<td><div class='pending'>Pending Review</div></td>"
            html = html & "</tr>"
        End If
    Next i
    
    html = html & "</table>"
    html = html & "<div class='button-container'>"
    html = html & "<a href='#' class='button'>View Full Details →</a>"
    html = html & "</div>"
    html = html & "<div class='footer'>"
    html = html & "Thank you for using our intake form system. If you have any questions, please contact support."
    html = html & "</div>"
    html = html & "</div></body></html>"
    
    BuildEmailHTML = html
    Exit Function
    
ErrorHandler:
    MsgBox "Error in BuildEmailHTML: " & Err.Description, vbCritical
    BuildEmailHTML = ""
End Function

' Subroutine to save form data (updated: save fields from columns 2 to 40, then status at 41, review fields at 42-44)
Private Sub SaveFormData(wsInput As Worksheet, wsData As Worksheet, entryId As Long)
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long, i As Integer
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row + 1
    
    ' Save Entry ID in column A
    wsData.Cells(lastRow, "A").Value = entryId
    
    ' Save form data (fields in columns 2 to 40)
    For i = 2 To 40
        wsData.Cells(lastRow, i).Value = wsInput.Cells(i, 2).Value
    Next i
    
    ' Set default status and review columns (now columns 41 to 44)
    wsData.Cells(lastRow, 41).Value = STATUS_PENDING
    wsData.Cells(lastRow, 42).Value = ""
    wsData.Cells(lastRow, 43).Value = ""
    wsData.Cells(lastRow, 44).Value = ""
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in SaveFormData: " & Err.Description, vbCritical
End Sub

' Subroutine to restore default values to form (updated loop from 2 to 40)
Private Sub ClearForm(ws As Worksheet)
    On Error GoTo ErrorHandler
    
    Dim clearRange As Range
    Dim wsDefaults As Worksheet
    Dim i As Integer
    
    On Error Resume Next
    Set wsDefaults = ThisWorkbook.Worksheets("DefaultValues")
    On Error GoTo ErrorHandler
    
    If wsDefaults Is Nothing Then
        Set clearRange = ws.Range("B2:B40")
        clearRange.ClearContents
        Debug.Print "DefaultValues sheet not found. Form cleared."
    Else
        For i = 2 To 40
            If Not IsEmpty(ws.Cells(i, 1)) Then
                Dim fieldName As String
                Dim defaultCell As Range
                
                fieldName = ws.Cells(i, 1).Value
                Set defaultCell = FindDefaultCell(wsDefaults, fieldName)
                
                If Not defaultCell Is Nothing Then
                    ws.Cells(i, 2).Value = defaultCell.Offset(0, 1).Value
                Else
                    ws.Cells(i, 2).ClearContents
                End If
            End If
        Next i
        Debug.Print "Default values loaded from DefaultValues sheet."
    End If
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in ClearForm: " & Err.Description, vbCritical
    On Error Resume Next
    Set clearRange = ws.Range("B2:B40")
    clearRange.ClearContents
End Sub

' Helper function to find a default value cell by field name (no change)
Private Function FindDefaultCell(wsDefaults As Worksheet, fieldName As String) As Range
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long, i As Long
    lastRow = wsDefaults.Cells(wsDefaults.Rows.Count, 1).End(xlUp).Row
    
    For i = 1 To lastRow
        If wsDefaults.Cells(i, 1).Value = fieldName Then
            Set FindDefaultCell = wsDefaults.Cells(i, 1)
            Exit Function
        End If
    Next i
    
    Set FindDefaultCell = Nothing
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in FindDefaultCell: " & Err.Description
    Set FindDefaultCell = Nothing
End Function

' Subroutine to format data sheet (update header cells for review columns to 41-44)
Private Sub FormatDataSheet(wsData As Worksheet)
    On Error GoTo ErrorHandler
    
    Dim dataRange As Range
    Dim lastRow As Long
    Dim lastCol As Long
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    lastCol = wsData.Cells(1, wsData.Columns.Count).End(xlToLeft).Column
    
    ' Ensure headers for the review columns (now at 41-44)
    If wsData.Cells(1, 41).Value = "" Then wsData.Cells(1, 41).Value = "Status"
    If wsData.Cells(1, 42).Value = "" Then wsData.Cells(1, 42).Value = "Review Comments"
    If wsData.Cells(1, 43).Value = "" Then wsData.Cells(1, 43).Value = "Reviewer"
    If wsData.Cells(1, 44).Value = "" Then wsData.Cells(1, 44).Value = "Review Date"
    
    Set dataRange = wsData.Range(wsData.Cells(1, 1), wsData.Cells(lastRow, lastCol))
    
    With dataRange
        .Borders.LineStyle = xlContinuous
        .Borders.Weight = xlThin
        .Rows(1).Font.Bold = True
        .Rows(1).Interior.Color = RGB(200, 200, 200)
        .Columns.AutoFit
    End With
    
    Dim statusRange As Range
    Set statusRange = wsData.Range(wsData.Cells(2, 41), wsData.Cells(lastRow, 41))
    statusRange.FormatConditions.Delete
    
    With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_PENDING & """")
        .Interior.Color = RGB(255, 255, 0)
    End With
    With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_APPROVED & """")
        .Interior.Color = RGB(0, 255, 0)
    End With
    With statusRange.FormatConditions.Add(Type:=xlCellValue, Operator:=xlEqual, Formula1:="""" & STATUS_REJECTED & """")
        .Interior.Color = RGB(255, 0, 0)
    End With
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in FormatDataSheet: " & Err.Description, vbCritical
End Sub

' New function to review submissions
Public Sub ReviewSubmission()
    On Error GoTo ErrorHandler
    
    Dim wsData As Worksheet
    Dim entryId As Long
    Dim rowIndex As Long
    Dim statusValue As String
    Dim comments As String
    Dim reviewer As String
    Dim emailSent As Boolean
    
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    
    ' Get entry ID to review
    entryId = Application.InputBox("Enter the Entry ID to review:", "Review Submission", Type:=1)
    If entryId = 0 Then Exit Sub
    
    ' Find the row with the entry ID
    rowIndex = FindEntryRow(wsData, entryId)
    If rowIndex = 0 Then
        MsgBox "Entry ID " & entryId & " not found.", vbExclamation
        Exit Sub
    End If
    
    ' Get current status
    statusValue = wsData.Cells(rowIndex, 41).Value
    If statusValue <> STATUS_PENDING Then
        If MsgBox("This entry has already been reviewed as '" & statusValue & "'." & vbNewLine & _
                  "Do you want to review it again?", vbYesNo + vbQuestion) = vbNo Then
            Exit Sub
        End If
    End If
    
    ' Get reviewer name
    reviewer = Application.InputBox("Enter your name:", "Reviewer Information", Type:=2)
    If reviewer = "" Then Exit Sub
    
    Dim reviewResult As VbMsgBoxResult
    reviewResult = MsgBox("Do you want to approve this submission?" & vbNewLine & _
                          "Click 'Yes' to approve or 'No' to reject.", vbYesNo + vbQuestion)
    If reviewResult = vbYes Then
        statusValue = STATUS_APPROVED
    Else
        statusValue = STATUS_REJECTED
    End If
    
    comments = Application.InputBox("Enter your review comments:", "Review Comments", Type:=2)
    
    wsData.Cells(rowIndex, 41).Value = statusValue          ' Updated status column to 41
    wsData.Cells(rowIndex, 42).Value = comments             ' Updated review comments to 42
    wsData.Cells(rowIndex, 43).Value = reviewer             ' Updated reviewer to 43
    wsData.Cells(rowIndex, 44).Value = Now()                ' Updated review date to 44
    
    emailSent = SendReviewNotificationEmail(wsData, rowIndex, entryId, statusValue, comments, reviewer)
    FormatDataSheet wsData
    
    If emailSent Then
        MsgBox "Review completed successfully and notification email sent!", vbInformation
    Else
        MsgBox "Review completed successfully, but notification email could not be sent.", vbInformation
    End If
    
    Exit Sub
ErrorHandler:
    MsgBox "An error occurred in ReviewSubmission: " & Err.Description, vbCritical
End Sub

' Function to find the row index for an entry ID
Private Function FindEntryRow(wsData As Worksheet, entryId As Long) As Long
    On Error GoTo ErrorHandler
    
    Dim lastRow As Long, i As Long
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    For i = 2 To lastRow
        If wsData.Cells(i, 1).Value = entryId Then
            FindEntryRow = i
            Exit Function
        End If
    Next i
    
    FindEntryRow = 0
    Exit Function
    
ErrorHandler:
    MsgBox "Error in FindEntryRow: " & Err.Description, vbCritical
    FindEntryRow = 0
End Function

' Function to send review notification email
Private Function SendReviewNotificationEmail(wsData As Worksheet, rowIndex As Long, entryId As Long, status As String, comments As String, reviewer As String) As Boolean
    On Error GoTo ErrorHandler
    
    Dim outlookApp As Object
    Dim mailItem As Object
    Dim htmlBody As String
    Dim userResponse As VbMsgBoxResult
    Dim recipientEmail As String
    
    Set outlookApp = GetOutlookApp()
    recipientEmail = GetRecipientEmail()
    
    If Not outlookApp Is Nothing Then
        Set mailItem = outlookApp.CreateItem(0)
        
        With mailItem
            .To = recipientEmail
            .Subject = "Intake Form Review - Entry ID: " & entryId & " - " & status
            
            htmlBody = BuildReviewEmailHTML(wsData, rowIndex, entryId, status, comments, reviewer)
            .HTMLBody = htmlBody
            
            userResponse = MsgBox("Do you want to send this review notification email?" & vbNewLine & _
                                  "To: " & .To & vbNewLine & "Subject: " & .Subject, vbYesNo + vbQuestion)
            If userResponse = vbYes Then
                .Send
                SendReviewNotificationEmail = True
            Else
                SendReviewNotificationEmail = False
            End If
        End With
        
        Set mailItem = Nothing
    Else
        MsgBox "Outlook is not available. Please ensure Outlook is installed and running.", vbExclamation
        SendReviewNotificationEmail = False
    End If
    
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in SendReviewNotificationEmail: " & Err.Description
    MsgBox "Error sending review notification email: " & Err.Description & vbNewLine & _
           "Please ensure Outlook is properly configured.", vbExclamation
    SendReviewNotificationEmail = False
End Function

' Function to build HTML email for review notification
Private Function BuildReviewEmailHTML(wsData As Worksheet, rowIndex As Long, entryId As Long, status As String, comments As String, reviewer As String) As String
    On Error GoTo ErrorHandler
    
    Dim html As String, i As Integer
    Dim fieldName As String, fieldValue As String
    Dim statusClass As String
    
    ' Determine status class based on status
    Select Case status
        Case STATUS_APPROVED
            statusClass = "completed"
        Case STATUS_REJECTED
            statusClass = "in-progress"
        Case Else
            statusClass = "pending"
    End Select
    
    html = "<html><head><meta name='viewport' content='width=device-width, initial-scale=1.0'><style>"
    html = html & "body { font-family: Arial, Helvetica, sans-serif; line-height: 1.6; color: #000000; max-width: 650px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; }"
    html = html & ".email-container { background-color: #ffffff; border: 1px solid #dddddd; padding: 20px; }"
    html = html & "h1 { color: #000000; font-weight: bold; margin-top: 0; padding-bottom: 10px; border-bottom: 1px solid #dddddd; }"
    html = html & "h2 { color: #000000; font-weight: bold; margin-top: 30px; margin-bottom: 15px; }"
    html = html & ".header-section { margin-bottom: 25px; }"
    html = html & ".entry-id { background-color: #006EB6; color: #ffffff; display: inline-block; padding: 8px 12px; font-weight: bold; margin-bottom: 15px; }"
    html = html & ".announcements { display: flex; margin: 25px 0; gap: 20px; }"
    html = html & ".announcement-box { border: 1px solid #dddddd; padding: 15px; flex: 1; }"
    html = html & ".announcement-box h3 { color: #006EB6; margin-top: 0; }"
    html = html & ".announcement-box.orange h3 { color: #FF9800; }"
    html = html & "table { width: 100%; border-collapse: collapse; margin: 25px 0; border: 1px solid #dddddd; }"
    html = html & "th { background-color: #006EB6; color: #ffffff; font-weight: bold; text-align: left; padding: 10px; }"
    html = html & "td { padding: 10px; border-bottom: 1px solid #dddddd; }"
    html = html & "tr:last-child td { border-bottom: none; }"
    html = html & ".category-cell { font-weight: bold; }"
    html = html & ".completed { background-color: #4CAF50; color: #ffffff; padding: 5px 10px; font-weight: bold; display: inline-block; }"
    html = html & ".in-progress { background-color: #FFC107; color: #000000; padding: 5px 10px; font-weight: bold; display: inline-block; }"
    html = html & ".pending { background-color: #17a2b8; color: #ffffff; padding: 5px 10px; font-weight: bold; display: inline-block; }"
    html = html & ".button-container { text-align: center; margin-top: 25px; }"
    html = html & ".button { background-color: #006EB6; color: #ffffff; padding: 10px 20px; text-decoration: none; font-weight: bold; display: inline-block; }"
    html = html & ".footer { margin-top: 20px; border-top: 1px solid #dddddd; padding-top: 20px; color: #666666; font-size: 14px; }"
    html = html & "</style></head><body>"
    
    html = html & "<div class='email-container'>"
    html = html & "<div class='header-section'>"
    html = html & "<h1>Intake Form Review Notification</h1>"
    html = html & "<p>The following submission has been reviewed:</p>"
    html = html & "<div class='entry-id'>Entry ID: " & entryId & "</div>"
    html = html & "</div>"
    
    html = html & "<div class='announcements'>"
    html = html & "<div class='announcement-box blue'>"
    html = html & "<h3>Review Details</h3>"
    html = html & "<p><strong>Status:</strong> <span class='" & statusClass & "'>" & status & "</span></p>"
    html = html & "<p><strong>Reviewer:</strong> " & reviewer & "</p>"
    html = html & "<p><strong>Date:</strong> " & Format(wsData.Cells(rowIndex, 44).Value, "yyyy-mm-dd") & "</p>"
    html = html & "</div>"
    html = html & "<div class='announcement-box orange'>"
    html = html & "<h3>Review Comments</h3>"
    If comments <> "" Then
        html = html & "<p>" & comments & "</p>"
    Else
        html = html & "<p>No additional comments provided.</p>"
    End If
    html = html & "</div>"
    html = html & "</div>"
    
    html = html & "<h2>Submission Details</h2>"
    html = html & "<table>"
    html = html & "<tr><th>Category</th><th>Details</th><th>Status</th></tr>"
    
    ' Loop through submission details (update loop to include columns 1 to 40)
    For i = 1 To 40
        If Not IsEmpty(wsData.Cells(1, i)) And Not IsEmpty(wsData.Cells(rowIndex, i)) Then
            fieldName = wsData.Cells(1, i).Value
            fieldValue = wsData.Cells(rowIndex, i).Value
            fieldName = Replace(Replace(Replace(fieldName, "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            If IsDate(fieldValue) Then
                fieldValue = Format(fieldValue, "yyyy-mm-dd")
            Else
                fieldValue = Replace(Replace(Replace(CStr(fieldValue), "&", "&amp;"), "<", "&lt;"), ">", "&gt;")
            End If
            html = html & "<tr>"
            html = html & "<td class='category-cell'>" & fieldName & "</td>"
            html = html & "<td>" & fieldValue & "</td>"
            html = html & "<td><div class='" & statusClass & "'>" & status & "</div></td>"
            html = html & "</tr>"
        End If
    Next i
    
    html = html & "</table>"
    html = html & "<div class='button-container'>"
    html = html & "<a href='#' class='button'>View Full Details →</a>"
    html = html & "</div>"
    html = html & "<div class='footer'>"
    html = html & "Thank you for using our intake form system. If you have any questions, please contact support."
    html = html & "</div>"
    html = html & "</div></body></html>"
    
    BuildReviewEmailHTML = html
    Exit Function
    
ErrorHandler:
    MsgBox "Error in BuildReviewEmailHTML: " & Err.Description, vbCritical
    BuildReviewEmailHTML = ""
End Function

' Add a function to view pending submissions
Public Sub ViewPendingSubmissions()
    On Error GoTo ErrorHandler
    
    Dim wsData As Worksheet
    Dim pendingCount As Long
    Dim lastRow As Long, i As Long, msg As String
    
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    
    ' Count pending submissions (status now in column 41)
    pendingCount = WorksheetFunction.CountIf(wsData.Columns(41), STATUS_PENDING)
    
    If pendingCount = 0 Then
        MsgBox "There are no pending submissions to review.", vbInformation
        Exit Sub
    End If
    
    msg = "There are " & pendingCount & " pending submissions:" & vbNewLine & vbNewLine
    
    lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
    
    For i = 2 To lastRow
        If wsData.Cells(i, 41).Value = STATUS_PENDING Then
            msg = msg & "Entry ID: " & wsData.Cells(i, 1).Value
            If Not IsEmpty(wsData.Cells(i, 3).Value) And IsDate(wsData.Cells(i, 3).Value) Then
                msg = msg & " - Date: " & Format(wsData.Cells(i, 3).Value, "yyyy-mm-dd")
            End If
            msg = msg & vbNewLine
        End If
    Next i
    
    msg = msg & vbNewLine & "Use the ReviewSubmission function to review these submissions."
    
    MsgBox msg, vbInformation
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in ViewPendingSubmissions: " & Err.Description, vbCritical
End Sub

' Function to create DefaultValues sheet if it doesn't exist
Public Sub CreateDefaultValuesSheet()
    On Error Resume Next
    
    Dim wsDefaults As Worksheet
    Dim wsInput As Worksheet
    Dim i As Integer
    
    Set wsDefaults = ThisWorkbook.Worksheets("DefaultValues")
    
    If wsDefaults Is Nothing Then
        Set wsDefaults = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsDefaults.Name = "DefaultValues"
        
        ' Set up header
        wsDefaults.Range("A1").Value = "Field Name"
        wsDefaults.Range("B1").Value = "Default Value"
        wsDefaults.Range("A1:B1").Font.Bold = True
        
        ' Copy field names from IntakeForm (update loop from 2 to 40)
        Set wsInput = ThisWorkbook.Worksheets("IntakeForm")
        
        For i = 2 To 40
            If Not IsEmpty(wsInput.Cells(i, 1)) Then
                wsDefaults.Cells(i, 1).Value = wsInput.Cells(i, 1).Value
                
                ' Copy current values as defaults (optional)
                If Not IsEmpty(wsInput.Cells(i, 2)) Then
                    wsDefaults.Cells(i, 2).Value = wsInput.Cells(i, 2).Value
                End If
            End If
        Next i
        
        wsDefaults.Columns("A:B").AutoFit
        
        MsgBox "DefaultValues sheet has been created." & vbNewLine & _
               "You can now enter default values for the form fields.", vbInformation
    Else
        MsgBox "DefaultValues sheet already exists.", vbInformation
    End If
End Sub
