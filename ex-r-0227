Option Explicit

' Constants for status values
Private Const STATUS_PENDING As String = "Pending"
Private Const STATUS_APPROVED As String = "Approved"
Private Const STATUS_REJECTED As String = "Rejected"
Private Const REVIEW_SHEET_NAME As String = "ReviewEntries"

' Helper function to check if sheet exists - SINGLE DEFINITION
Private Function DoesSheetExist(sheetName As String) As Boolean
    Dim ws As Worksheet
    
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets(sheetName)
    On Error GoTo 0
    
    DoesSheetExist = Not ws Is Nothing
End Function

Public Sub SetupReviewSystem()
    On Error GoTo ErrorHandler
    
    Dim wsData As Worksheet
    Dim lastCol As Long
    Dim lastRow As Long
    Dim statusRange As Range
    
    ' Reference the IntakeData worksheet
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    
    Application.ScreenUpdating = False
    
    ' Check if Status column exists (assumed to be last column)
    lastCol = wsData.Cells(1, wsData.Columns.Count).End(xlToLeft).Column
    
    If wsData.Cells(1, lastCol).Value <> "Status" Then
        ' Add Status column header
        lastCol = lastCol + 1
        wsData.Cells(1, lastCol).Value = "Status"
        
        ' Add status to existing entries
        lastRow = wsData.Cells(wsData.Rows.Count, "A").End(xlUp).Row
        
        If lastRow > 1 Then
            ' Set the range for status column
            Set statusRange = wsData.Range(wsData.Cells(2, lastCol), wsData.Cells(lastRow, lastCol))
            
            ' Fill status for existing entries
            statusRange.Value = STATUS_PENDING
        End If
        
        ' Format the status column
        With wsData.Columns(lastCol)
            .AutoFit
            .HorizontalAlignment = xlCenter
        End With
    End If
    
    ' Create Review sheet if it doesn't exist
    If Not DoesSheetExist(REVIEW_SHEET_NAME) Then
        CreateReviewSheet
    End If
    
    ' Format the IntakeData sheet
    With wsData.Range(wsData.Cells(1, 1), wsData.Cells(1, lastCol))
        .Font.Bold = True
        .Interior.Color = RGB(200, 200, 200)
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlMedium
    End With
    
    Application.ScreenUpdating = True
    
    MsgBox "Review system has been set up successfully!", vbInformation
    
    Exit Sub
    
ErrorHandler:
    Application.ScreenUpdating = True
    
    Dim errMsg As String
    errMsg = "Error " & Err.Number & ": " & Err.Description
    
    Select Case Err.Number
        Case 9 ' Subscript out of range
            errMsg = errMsg & vbNewLine & "The 'IntakeData' worksheet was not found. Please ensure it exists."
        Case 1004 ' Application-defined or object-defined error
            errMsg = errMsg & vbNewLine & "There was an error accessing the worksheet or range."
        Case Else
            errMsg = errMsg & vbNewLine & "An unexpected error occurred."
    End Select
    
    MsgBox errMsg, vbCritical, "Setup Error"
End Sub

' Function to create the review sheet with improved error handling
Private Sub CreateReviewSheet()
    On Error GoTo ErrorHandler
    
    Dim wsReview As Worksheet
    Dim wsData As Worksheet
    Dim lastCol As Long
    
    Application.ScreenUpdating = False
    
    ' Delete existing review sheet if it exists
    Application.DisplayAlerts = False
    On Error Resume Next
    ThisWorkbook.Worksheets(REVIEW_SHEET_NAME).Delete
    On Error GoTo ErrorHandler
    Application.DisplayAlerts = True
    
    ' Create new review sheet
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    Set wsReview = ThisWorkbook.Sheets.Add(After:=wsData)
    
    ' Name the new sheet
    wsReview.Name = REVIEW_SHEET_NAME
    
    ' Get the last column from IntakeData
    lastCol = wsData.Cells(1, wsData.Columns.Count).End(xlToLeft).Column
    
    ' Copy headers from IntakeData
    wsData.Range(wsData.Cells(1, 1), wsData.Cells(1, lastCol)).Copy _
        Destination:=wsReview.Range("A1")
    
    ' Format the review sheet
    With wsReview
        ' Format headers
        With .Range(.Cells(1, 1), .Cells(1, lastCol))
            .Font.Bold = True
            .Interior.Color = RGB(200, 200, 200)
            .Borders(xlEdgeBottom).LineStyle = xlContinuous
            .Borders(xlEdgeBottom).Weight = xlMedium
        End With
        
        ' Add Actions header
        .Cells(1, lastCol + 1).Value = "Actions"
        .Cells(1, lastCol + 1).Font.Bold = True
        .Cells(1, lastCol + 1).Interior.Color = RGB(200, 200, 200)
        
        ' Freeze top row
        .Rows("2:2").Select
        ActiveWindow.FreezePanes = True
        
        ' Autofit columns
        .Cells.EntireColumn.AutoFit
        
        ' Add filter buttons
        .Range(.Cells(1, 1), .Cells(1, lastCol + 1)).AutoFilter
    End With
    
    ' Reset selection
    wsReview.Range("A1").Select
    
    Application.ScreenUpdating = True
    
    Exit Sub
    
ErrorHandler:
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    
    Dim errMsg As String
    errMsg = "Error " & Err.Number & ": " & Err.Description
    
    Select Case Err.Number
        Case 9 ' Subscript out of range
            errMsg = errMsg & vbNewLine & "The 'IntakeData' worksheet was not found."
        Case 1004 ' Application-defined or object-defined error
            errMsg = errMsg & vbNewLine & "There was an error creating or formatting the review sheet."
        Case -2147024809 ' Sheet name already exists
            errMsg = errMsg & vbNewLine & "Could not create review sheet. The name is already in use."
        Case Else
            errMsg = errMsg & vbNewLine & "An unexpected error occurred while creating the review sheet."
    End Select
    
    MsgBox errMsg, vbCritical, "Review Sheet Creation Error"
End Sub

' Function to move entry to review sheet
Public Sub MoveToReview(entryId As Long)
    On Error GoTo ErrorHandler
    
    Dim wsData As Worksheet
    Dim wsReview As Worksheet
    Dim dataRow As Range
    Dim reviewRow As Range
    Dim lastReviewRow As Long
    
    Set wsData = ThisWorkbook.Worksheets("IntakeData")
    Set wsReview = ThisWorkbook.Worksheets(REVIEW_SHEET_NAME)
    
    ' Find the row with the entry ID
    Set dataRow = wsData.Range("A:A").Find(entryId, LookIn:=xlValues)
    
    If Not dataRow Is Nothing Then
        ' Get the last row in review sheet
        lastReviewRow = wsReview.Cells(wsReview.Rows.Count, "A").End(xlUp).Row + 1
        
        ' Copy the row to review sheet
        dataRow.EntireRow.Copy wsReview.Cells(lastReviewRow, 1)
        
        ' Add approve/reject buttons
        AddReviewButtons wsReview, lastReviewRow
    Else
        MsgBox "Entry ID " & entryId & " not found.", vbExclamation
    End If
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error in MoveToReview: " & Err.Description, vbCritical
End Sub

